<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ECharts</title>
    <url>/2019/12/25/ECharts/</url>
    <content><![CDATA[<p>​        一个随笔,写一个学校布置的作业,用到了ECharts,第一次接触,实现了项目中的异步数据加载,按照文档,自己没能实现,换一种小思路成功实现,当时,拿到了值,可是没能渲染成功,解决了之后,还是很有必要记录一下,毕竟太菜了…</p>
<p><img src="https://i.loli.net/2019/12/25/cFBkdltYKDzx1QT.png" alt="1111.png"></p>
<a id="more"></a>

<h1 id="ECharts"><a href="#ECharts" class="headerlink" title="ECharts"></a>ECharts</h1><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>通过接收从php后台返回的json数据,使用ajax异步请求,实现echarts的异步数据加载</p>
<p>代码一看,什么都明白了….</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>后台数据返回</strong></p>
<p><img src="https://i.loli.net/2019/12/25/1s2G479pmjPnOXi.png" alt="1111.png"></p>
<p><strong>页面接收</strong></p>
<p><img src="https://i.loli.net/2019/12/25/a2wW5GdXsb8co6R.png" alt="2222.png"></p>
<p>通过ajax请求拿到json数据 生明两个空数组,拿到值丢到数组中,注意  success成功之后 拿到通过遍历出来的两个数组,填充到data:中,完成数据展示</p>
<p>其实是很简单的问题,多总结,多练习,多读文档是真的重要！！！</p>
]]></content>
      <categories>
        <category>ECharts</category>
      </categories>
      <tags>
        <tag>ECharts</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos系列之更改cocos默认启动场景</title>
    <url>/2022/03/05/cocos%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p>​    公司最近在开发一个微信小游戏,对战答题之类的,之前也没有接触过微信小游戏,对这块比较陌生。好在,通过这次项目开发,自己也算是对游戏开发入了个门,有了一些了解.项目使用cocos creator 3.4.0进行开发。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>​    我们使用cocos引擎开发,需要打包发布到微信小游戏,然后更换掉cocos默认的启动场景.了解这个需求之后，感觉还是很简单的，随即去官方文档一查，很遗憾没找到方法.那我们就开始分析这个需求,既然是要更换构建打包后的场景,那我们就先看一下,cocos构建打包的文件目录.如下图:</p>
<p><a href="https://imgtu.com/i/bwogtf" target="_blank" rel="noopener"><img src="https://s4.ax1x.com/2022/03/05/bwogtf.png" alt="bwogtf.png"></a></p>
<p>我们重点分析一下 first-screen.js 首个场景的js，看他做了什么，是否可以更改他的一些代码去实现这个功能。</p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p><a href="https://imgtu.com/i/bwTSBR" target="_blank" rel="noopener"><img src="https://s4.ax1x.com/2022/03/05/bwTSBR.png" alt="bwTSBR.png"></a></p>
<p>​    在这个js文件的末尾我们可以看到这个start方法,同时也看到了loadImage这个导入图片的方法,那我们要做的事情就很简单了,替换这张图片,达到我们的目的.在这个文件夹目录中我们也可以看到一张名为splash.png的图片 我们把这张图片替换到，然后看一下效果:</p>
<p><a href="https://imgtu.com/i/bw79MQ" target="_blank" rel="noopener"><img src="https://s4.ax1x.com/2022/03/05/bw79MQ.png" alt="bw79MQ.png"></a></p>
<p>的确起了效果，达到了我们的目的.但是我们发现这个场景加载完成之后，还会有一个插屏的页面,我们的产品需求里是不要这个页面的,那我们就想办法看怎么给他干掉.</p>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>小游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+GitHub+PicGo自建免费图床</title>
    <url>/2020/05/10/Typora-GiHub-PicGo%E8%87%AA%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701145123.jpg" alt=""></p>
<a id="more"></a>

<p>​    <strong>我个人呢,一直有写笔记和博客的习惯,虽然没什么技术含量,但也是记录了自己的成长,写博客最烦的就是上传图片,之前一直用的sm.ms,但现在这个图床有了上传限制,上传的也比较慢,就想着自己搭建一个图床,然后在掘金上看到了一个老哥的文章,帮助我成功搭建,特此记录一下.</strong></p>
<h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo下载</a></p>
<p>Windows系统下载<code>exe</code>文件，macOS系统下载<code>dmg</code>文件，Linux下载<code>AppImage</code>文件。</p>
<p><strong>我这里使用的是2.2.2版本</strong></p>
<h2 id="github上创建仓库和密钥"><a href="#github上创建仓库和密钥" class="headerlink" title="github上创建仓库和密钥"></a>github上创建仓库和密钥</h2><p><strong>仓库自己创建即可,这里就不做演示了</strong></p>
<p>然后,我们在github个人设置页面,创建一个访问令牌,在PicGo配置中会用到.</p>
<p>访问 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a>  点击<code>Generate new token</code>按照下图进行配置.</p>
<p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701145426.png" alt=""></p>
<p>配置完成,点击创建,就会生成一个密钥令牌,将其保存.</p>
<h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701145509.jpg" alt=""></p>
<ul>
<li>第一个是github的用户名/仓库名.</li>
<li>第二个是分支名,默认设置为master,主分支.</li>
<li>第三个是Token,就是刚才生成的令牌.</li>
<li>后面这两个可以不填,然后点击确定,点击设置为默认图床.</li>
</ul>
<p>到了这里,其实已经可以了,我们只需要点击PicGo的上传区直接上传图片即可,上传成功后,直接ctrl+v就可以在文档中使用,同时,可以在github仓库中看到我们上传的图片.看到这里,有的小伙伴就会说了,博主你骗人,你这里也没用到typora啊,别着急,下面只需几个简单的配置,你的typora会变得巨香无比.</p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>这里推荐大家使用最新版本,<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p>
<p>然后打开PicGo设置-&gt;设置Server, 看一下是否开启. 默认应该是开启的,监听的端口不能改变.</p>
<p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701145538.jpg" alt=""></p>
<h3 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h3><p> <strong>版本要求</strong>：<code>Typora 0.9.84及以上</code></p>
<p>​    不过我使用的时候, <code>Typora 0.9.85</code>没有好使,就更新到了最新版本,还是推荐大家使用最新版本.</p>
<p>​    打开文件-&gt;偏好设置-&gt;图像  如下图 进行配置.</p>
<p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701145604.jpg" alt=""></p>
<p><strong>设置完成之后,点击验证图片上传的功能. 返回true,即验证成功.</strong></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>三个使用方式.</strong></p>
<ul>
<li><p><strong>拖拽</strong>，在文件夹内拖拽图片到Typora编辑界面。</p>
</li>
<li><p><strong>插入</strong>，快捷键<code>Ctrl+Shift+I</code>，调出插入图片的功能。</p>
</li>
<li><p><strong>复制</strong>，使用截图功能后，直接粘贴到Typora编辑界面内。</p>
<p><strong>拖拽</strong>和<strong>插入</strong>都是自动将图片上传至图床。但是<strong>复制</strong>需要手动点击<code>上传</code></p>
</li>
</ul>
<p>   <strong>到此,一个香香的typora就配置好了,妈妈再也不用担心我找不到顺手的图床了.</strong></p>
]]></content>
      <categories>
        <category>图床工具</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习笔记</title>
    <url>/2019/12/23/git/</url>
    <content><![CDATA[<p>​        之前或多或少接触过git,但用了就忘,还经常出错,这篇就作为一篇git学习笔记,内容很水,主要是为了加深理解和记忆。</p>
<p><img src="https://i.loli.net/2019/12/24/sktlUj2hJPKAa8O.jpg" alt="11.jpg"></p>
<a id="more"></a>

<h1 id="git学习"><a href="#git学习" class="headerlink" title="git学习"></a>git学习</h1><p><strong>git是目前世界上最先进的分布式版本控制系统</strong></p>
<h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>​        版本库可以理解为一个目录,这个目录里面的所有文件都会被git管理,每个文件的修改,删除 <code>git</code>都可以跟踪,便于查询历史,或在需要的时候进行历史还原.</p>
<p><strong>执行:</strong>创建空目录,通过<code>git init</code>将目录变为git仓库 </p>
<p><img src="https://i.loli.net/2019/12/23/qwGSLa9O2RX1Ag4.png" alt="1.png"></p>
<p>执行成功 git仓库建好了 在当前目录下会生成一个<code>.git</code>的目录，这个目录是用来跟踪管理版本库的,一般情况下不要修改里面的文件,改乱了,<code>git</code>仓库就垮掉了。 如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>
<h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>​        所有的版本控制系统其实只能跟踪文本的改动,像TXT文件,程序代码等。版本控制系统可以清楚的告诉你每次的改动,修改内容,删除,添加等。    但是像图片,视频这些二进制文件,版本控制系统虽然也能管理,但是没法跟踪文件的变化,只能把二进制文件的每次改动串起来,每次只能知道像图片只是从100kb改成了120kb,具体改了什么,版本控制系统不知道。</p>
<p>​        Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。</p>
<h4 id="文件编写"><a href="#文件编写" class="headerlink" title="文件编写"></a>文件编写</h4><p>编写一个readme.txt文件 内容随意  文件必须在<code>learngit</code>这个目录或者其子目录下,只有放在git仓库下,git才能进行控制</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="string">"git"</span></span><br><span class="line"><span class="keyword">vi</span> readme.txt</span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2019/12/23/D3tOP7Bk18mxIQK.png" alt="1.png"></p>
<p><strong>编写完成之后,按esc键,然后:wq退出并保存</strong></p>
<p>将一个文件添加到<code>git</code>仓库只需要两步</p>
<p><strong>第一步</strong></p>
<p>使用命令</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> readme.txt</span></span><br></pre></td></tr></table></figure>

<p><strong>执行成功,没有任何显示,没有消息就是最好的消息,说明添加成功了</strong></p>
<p><strong>第二步</strong></p>
<p>使用命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">"wrote a readme file"</span>                                           </span><br><span class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) <span class="number">251</span>dffd] wrote a readme <span class="keyword">file</span>                              </span><br><span class="line"><span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)                                                </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> readme.txt</span><br></pre></td></tr></table></figure>

<p>命令说明: <code>-m</code> 后面输入的是本次提交的说明 要输入有意义的说明,方便查找和阅读</p>
<p><code>git commit</code> 命令执行成功 ,会有反馈, <code>1 file changed</code> 表示 1个文件被改动，<code>2 insertions(+)</code>  插入了两行内容</p>
<p>注意:<code>commit</code>可以一次提交很多文件,所以我们可以多次<code>add</code></p>
<p>不同的文件 如:</p>
<p><img src="https://i.loli.net/2019/12/23/fHKd27oNJ5p9IzQ.png" alt="1.png"></p>
<h3 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h3><p>再次修改<code>readme.txt</code>文件 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">readme</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/12/23/fYGsnHAVIeT76z1.png" alt="1.png"></p>
<p><code>git status</code> 查看结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git status                                                                    </span><br><span class="line">On branch master                                                                </span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:                                                  </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git add ..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)                    </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git checkout -- ..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)     </span><br><span class="line">modified:   readme.txt                                                  </span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure>

<p><code>git status</code> 命令可以让我们时刻掌握仓库当前的状态, 上面命令的输出信息告诉我们，<code>readme.txt</code>被修改了,但是还没有提交修改</p>
<p><code>git diff</code> 查看修改的内容</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt                                                           </span><br><span class="line">diff <span class="comment">--git a/readme.txt b/readme.txt                                            </span></span><br><span class="line"><span class="keyword">index</span> b0354bd.<span class="number">.5367626</span> <span class="number">100644</span>                                                   </span><br><span class="line"><span class="comment">--- a/readme.txt                                                                </span></span><br><span class="line">+++ b/readme.txt                                                                </span><br><span class="line">@@ <span class="number">-1</span>,<span class="number">2</span> +<span class="number">1</span>,<span class="number">2</span> @@                                                                 </span><br><span class="line">-Git <span class="keyword">is</span> a <span class="keyword">version</span> control <span class="keyword">system</span>.                                               </span><br><span class="line">+Git <span class="keyword">is</span> a distributed <span class="keyword">version</span> control <span class="keyword">system</span>.                                   </span><br><span class="line">Git <span class="keyword">is</span> a free software.</span><br></pre></td></tr></table></figure>

<p>修改完成之后,再次进行提交</p>
<p>第一步：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> readme.txt</span></span><br></pre></td></tr></table></figure>

<p>第二步:</p>
<p>在执行<code>git commit</code> 之前 我们可以执行<code>git status</code>查看当前仓库的状态</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$ git status                                                                    </span><br><span class="line"><span class="keyword">On</span> branch master                                                                </span><br><span class="line">Changes <span class="keyword">to</span> be committed:                                                        </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git reset HEAD ..."</span> <span class="keyword">to</span> unstage)                                   </span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>git status</code>命令告诉我们,将要被提交的修改包括 readme.txt</p>
<p>第三步:<code>git commit</code> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">"add distributed"</span>                                               </span><br><span class="line">[<span class="keyword">master</span> db2285b] <span class="keyword">add</span> <span class="keyword">distributed</span>                                                </span><br><span class="line"><span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure>

<p>再次 <code>git status</code> 查看仓库的当前状态</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git status                                                                    </span><br><span class="line"><span class="keyword">On</span> branch master                                                                </span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>

<p>git告诉我们当前没有需要提交的修改，而且，工作目录是干净</p>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>再次修改readme.txt文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">readme</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Git is <span class="keyword">a</span> distributed <span class="built_in">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git is <span class="keyword">a</span> free software distributed under <span class="keyword">the</span> GPL.</span><br></pre></td></tr></table></figure>

<p>再次提交</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt                                                                                        </span><br><span class="line">$ git commit -m <span class="string">"append GPL"</span>                                                    </span><br><span class="line">[master cd03a82] append GPL                                                     </span><br><span class="line"><span class="number">1</span> file <span class="section">changed</span>, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure>

<p>这样对文件不停修改，然后不断的提交到版本库里,可以形成多个版本，以便我们查找和更新。</p>
<p><code>git log</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ git log                                                                       </span><br><span class="line">commit cd03a8211f969905634826a1337b992b16d87235 (HEAD -&gt; master)                </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">09</span>:<span class="number">49</span>:<span class="number">15</span> <span class="number">2019</span> +<span class="number">0800</span>                                          </span><br><span class="line">append GPL                                                                  </span><br><span class="line">commit db2285b3da237cb3ee8fab85050abfc19f3af654                                 </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">09</span>:<span class="number">15</span>:<span class="number">28</span> <span class="number">2019</span> +<span class="number">0800</span>                                          </span><br><span class="line">add distributed                                                             </span><br><span class="line">commit <span class="number">36e9</span>e51137dfb5d5186739373cf806a42205f969                                 </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">08</span>:<span class="number">47</span>:<span class="number">12</span> <span class="number">2019</span> +<span class="number">0800</span>                                          </span><br><span class="line">add <span class="number">2</span> files.                                                                </span><br><span class="line">commit <span class="number">251</span>dffd1ad6d376f715c6994edc7a79308328269                                 </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">08</span>:<span class="number">39</span>:<span class="number">23</span> <span class="number">2019</span> +<span class="number">0800</span>                                          </span><br><span class="line">wrote a readme file</span><br></pre></td></tr></table></figure>

<p><code>git log</code>命令显示从最近到最远的提交日志。</p>
<p>可以加上参数 <code>--pretty=oneline</code>  简洁输出信息</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--pretty=oneline                                                      </span></span><br><span class="line">cd03a8211f969905634826a1337b992b16d87235 (HEAD -&gt; master) append GPL            </span><br><span class="line">db2285b3da237cb3ee8fab85050abfc19f3af654 <span class="built_in">add</span> distributed                        </span><br><span class="line"><span class="number">36e9</span>e51137dfb5d5186739373cf806a42205f969 <span class="built_in">add</span> <span class="number">2</span> <span class="built_in">files</span>.                           </span><br><span class="line"><span class="number">251</span>dffd1ad6d376f715c6994edc7a79308328269 wrote <span class="keyword">a</span> readme <span class="built_in">file</span></span><br></pre></td></tr></table></figure>

<p><code>cd03a821....</code> 这种一大串的是<code>commit id</code> (版本号)  版本号不会重复</p>
<p><strong>回退</strong></p>
<p><code>HEAD</code> 表示当前版本  <code>HEAD^</code> 表示上一个版本  <code>HEAD^^</code>表示上上个版本。</p>
<p>不过 如果往上几十上百个版本的情况 写100个<code>^</code>  有点太蠢了 ,可以写成 <code>HEAD~100</code></p>
<p><code>git reset</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^                                                        </span></span><br><span class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> db2285b <span class="keyword">add</span> <span class="keyword">distributed</span></span><br></pre></td></tr></table></figure>

<p>版本回退成功,查看一下文件内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> free software.</span><br></pre></td></tr></table></figure>

<p>内容被还原</p>
<p><code>git log</code> 查看一下版本库的状态</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ git log                                                                       </span><br><span class="line">commit db2285b3da237cb3ee8fab85050abfc19f3af654 (HEAD -&gt; master)                </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">09</span>:<span class="number">15</span>:<span class="number">28</span> <span class="number">2019</span> +<span class="number">0800</span>                                          </span><br><span class="line">add distributed                                                             </span><br><span class="line">commit <span class="number">36e9</span>e51137dfb5d5186739373cf806a42205f969                                 </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">08</span>:<span class="number">47</span>:<span class="number">12</span> <span class="number">2019</span> +<span class="number">0800</span>                                          </span><br><span class="line">add <span class="number">2</span> files.                                                                </span><br><span class="line">commit <span class="number">251</span>dffd1ad6d376f715c6994edc7a79308328269                                 </span><br><span class="line">Author: mydal &lt;<span class="symbol">2049837924@</span>qq.com&gt;                                               </span><br><span class="line">Date:   Mon Dec <span class="number">23</span> <span class="number">08</span>:<span class="number">39</span>:<span class="number">23</span> <span class="number">2019</span> +<span class="number">0800</span></span><br></pre></td></tr></table></figure>

<p>最新版本 <code>append GPL</code>已经看不到了 </p>
<p>我们想要找回这个版本 只需要找到<code>append GPL</code> 的<code>commit id</code>   顺着命令行往上找…</p>
<p>指定回到这个版本 版本号写前几位即可,也不能只写一两位,这样<code>git</code>可能会找到多个,从而无法确定是哪一个</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard cd03a8                                                       </span></span><br><span class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> cd03a82 append GPL</span><br></pre></td></tr></table></figure>

<p>再次查看<code>readme.txt</code>文件的内容             </p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt                                                                </span><br><span class="line">Git is <span class="keyword">a</span> distributed <span class="built_in">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git is <span class="keyword">a</span> free software distributed under <span class="keyword">the</span> GPL.</span><br></pre></td></tr></table></figure>

<p>又回到了最新版本                     `</p>
<p>特殊情况:比如，我们现在回到到了某个版本,关掉了电脑,第二天像恢复到最新版本,但是找不到新版本的<code>commit id</code>  咋办呢？</p>
<p>git提供了一个命令<code>git reflog</code> 用来记录我们的每一次命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">ref</span>log                                                                    </span><br><span class="line">cd03a82 (HEAD -&gt; master) <span class="symbol">HEAD@</span>&#123;<span class="number">0</span>&#125;: reset: moving to cd03a8                      </span><br><span class="line">db2285b <span class="symbol">HEAD@</span>&#123;<span class="number">1</span>&#125;: reset: moving to HEAD^                                        </span><br><span class="line">cd03a82 (HEAD -&gt; master) <span class="symbol">HEAD@</span>&#123;<span class="number">2</span>&#125;: commit: append GPL                           </span><br><span class="line">db2285b <span class="symbol">HEAD@</span>&#123;<span class="number">3</span>&#125;: commit: add distributed                                       </span><br><span class="line"><span class="number">36e9</span>e51 <span class="symbol">HEAD@</span>&#123;<span class="number">4</span>&#125;: commit: add <span class="number">2</span> files.                                          </span><br><span class="line"><span class="number">251</span>dffd <span class="symbol">HEAD@</span>&#123;<span class="number">5</span>&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure>

<p>可以看到<code>commit id</code>了                   </p>
<h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><p><strong>工作区</strong>:我们能在电脑里看到的目录,比如当前使用的 <code>learngit</code>的文件夹 就是一个git工作区</p>
<p><strong>版本库</strong>: 工作区中有一个隐藏目录<code>.git</code> 是<code>Git</code>的版本库</p>
<p><code>Git</code>版本库中存了很多东西,其中最为重要的是 称为<code>stage(index)</code>的暂存区,</p>
<p>还有<code>Git</code>为我们自动创建的第一个分支 <code>master</code>,以及指向<code>master</code>的指针 <code>HEAD</code></p>
<p><img src="https://i.loli.net/2019/12/25/y1sGkfLYAdwEOQb.png" alt="11.png"></p>
<p><strong>文件添加到版本库 两步执行</strong></p>
<p><code>git add</code> 把文件从工作区添加到暂存区</p>
<p><code>git commit</code> 提交更改, 把暂存区的内容提交到当前分支</p>
<p><strong>需要提交的文件修改先添加到暂存区,然后一次性提交到分支中</strong></p>
<p><strong>例子</strong></p>
<p>对<code>readme.txt</code>进行修改,添加一条内容</p>
<p><img src="https://i.loli.net/2019/12/25/5Rui8P2GB63SFWZ.png" alt="111.png"></p>
<p>新增一个<code>LICENSE</code>文本文件 </p>
<p>先用<code>git status</code>查看一下状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`$ git status                                                                    </span><br><span class="line">On branch master                                                                </span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:                                                  </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git add/rm ..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)                 </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git checkout -- ..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)     </span><br><span class="line">deleted:    LICENSE.txt                                                 </span><br><span class="line">modified:   readme.txt                                                  </span><br><span class="line">Untracked files:                                                                </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git add ..."</span> <span class="keyword">to</span> <span class="keyword">include</span> <span class="keyword">in</span> what will be committed)                </span><br><span class="line">LICENSE                                                                 </span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)               <span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>Git清楚的表明了,<code>readme.txt</code>被修改了,而<code>LICENSE</code>还从来没有被添加过,状态为<code>Untracked</code></p>
<p>使用两次<code>git add</code>,把<code>readme.txt</code>和<code>LICENSE</code>添加  ,然后,<code>git status</code>查看一下</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">new</span> <span class="keyword">file</span>:   LICENSE</span><br><span class="line">	modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>两个文件都被添加到了暂存区</p>
<p><img src="https://i.loli.net/2019/12/25/N5WsLH3rXQuwnpS.png" alt="111.png"></p>
<p>执行 <code>git commit</code> 就可以一次性把暂存区的所有修改提交到分支</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`$ git <span class="keyword">commit</span> -m <span class="string">'git new '</span>                                                      </span><br><span class="line">[<span class="keyword">master</span> <span class="number">0694</span>ef3] git <span class="keyword">new</span>                                                        </span><br><span class="line"><span class="number">3</span> files <span class="keyword">changed</span>, <span class="number">3</span> insertions(+), <span class="number">1</span> deletion(-)                                </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> LICENSE</span><br></pre></td></tr></table></figure>

<p> 提交之后,不对工作区做任何修改, 工作区就是干净的</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>

<p>版本库再次发生变化   </p>
<p><img src="https://i.loli.net/2019/12/25/kliVyJAW1gKpo9s.png" alt="111.png"></p>
<h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><p><code>git</code>跟踪并管理的是修改,而非文件</p>
<p>实践出真知:</p>
<p>首先,对<code>readme.txt</code>做一个修改 加一行内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">`$ <span class="keyword">cat</span> readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> free software distributed under the GPL.                               </span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.                                           </span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> nbnb nbn <span class="keyword">nb</span>.                                                          </span><br><span class="line">Git <span class="keyword">new</span> connect.    //新加的内容</span><br></pre></td></tr></table></figure>

<p><code>git add</code> 添加                                              `</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git <span class="builtin-name">add</span> readme.txt                                                                       </span><br><span class="line">$ git status                                                                    </span><br><span class="line">On branch master                                                                </span><br><span class="line">Changes <span class="keyword">to</span> be committed:                                                        </span><br><span class="line">(use <span class="string">"git reset HEAD ..."</span> <span class="keyword">to</span> unstage)                                   </span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>再次修改<code>readme.txt</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> free software distributed under the GPL.                               </span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.                                           </span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> nbnb nbn <span class="keyword">nb</span>.                                                          </span><br><span class="line">Git <span class="keyword">new</span> connect.                                                                </span><br><span class="line">Git <span class="keyword">new</span> <span class="keyword">new</span> connect        //再次添加</span><br></pre></td></tr></table></figure>

<p>  直接提交 <code>git commit</code>                                                   <code></code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`$ git <span class="keyword">commit</span> -m <span class="string">"git new new connect"</span>                                           </span><br><span class="line">[<span class="keyword">master</span> cf3406c] git <span class="keyword">new</span> <span class="keyword">new</span> <span class="keyword">connect</span>                                            </span><br><span class="line"><span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure>

<p>查看状态 <code>git status</code>                                `</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git status                                                                    </span><br><span class="line">On branch master                                                                </span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:                                                  </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git add/rm ..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)                 </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git checkout -- ..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)     </span><br><span class="line">deleted:    LICENSE                                                     </span><br><span class="line">modified:   readme.txt                                                  </span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)               <span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>可以看到 第二次修改没有被提交</p>
<p>因为:第一次修改-&gt;<code>git add</code> -&gt;第二次修改 -&gt; <code>git commit</code></p>
<p>第一次的修改放入到了暂存区,第二次的修改没有放入到暂存区,所以,使用</p>
<p><code>git commit</code> 只提交了暂存区的修改,因此,第一次修改被提交,第二次的修改不会被提交</p>
<p>使用 <code>git diff HEAD -- readme.txt</code> 查看工作区和版本库里面的区别</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">`$ git diff HEAD <span class="comment">-- readme.txt                                                   </span></span><br><span class="line">diff <span class="comment">--git a/readme.txt b/readme.txt                                            </span></span><br><span class="line"><span class="keyword">index</span> e1b5b50.<span class="number">.6558</span>bb3 <span class="number">100644</span>                                                   </span><br><span class="line"><span class="comment">--- a/readme.txt                                                                </span></span><br><span class="line">+++ b/readme.txt                                                                </span><br><span class="line">@@ <span class="number">-3</span>,<span class="number">3</span> +<span class="number">3</span>,<span class="number">4</span> @@ Git <span class="keyword">is</span> a free software distributed under the GPL.               </span><br><span class="line">Git has a mutable <span class="keyword">index</span> <span class="keyword">called</span> stage.                                          </span><br><span class="line">Git has a nbnb nbn nb.                                                         </span><br><span class="line">Git <span class="built_in">new</span> <span class="keyword">connect</span>.                                                               </span><br><span class="line">+Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span></span><br></pre></td></tr></table></figure>

<p>  想要提交第二次修改,可以继续<code>git add</code> 然后 <code>git commit</code>     也可以不急着提交修改,确定之后,执行<code>git add</code> 再 <code>git commit</code>                                       </p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt                                                            `</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="symbol">'git</span> <span class="keyword">new</span> <span class="keyword">new</span> <span class="keyword">new</span> connect'                                       </span><br><span class="line">[master e125243] git <span class="keyword">new</span> <span class="keyword">new</span> <span class="keyword">new</span> connect                                        </span><br><span class="line"><span class="number">1</span> <span class="keyword">file</span> changed, <span class="number">1</span> insertion(+)                                                 `</span><br><span class="line"></span><br><span class="line">$ git status                                                                    </span><br><span class="line"><span class="keyword">On</span> branch master                                                                </span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:                                                  </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git add/rm ..."</span> <span class="keyword">to</span> update what will be committed)                 </span><br><span class="line">(<span class="keyword">use</span> <span class="string">"git checkout -- ..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working directory)     </span><br><span class="line">deleted:    LICENSE                                                     </span><br><span class="line">no changes added <span class="keyword">to</span> commit (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure>

<p>现在 两次修改都提交到了版本库的当前分支中</p>
<h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p><code>git checkout -- file</code></p>
<p><strong>两种情况:</strong></p>
<p>文件修改后还没有执行 <code>git add</code> 没有添加到暂存区, 执行这条命令,就会回到和版本库一模一样的状态。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> a distributed <span class="keyword">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> a free software distributed under the GPL.                               </span><br><span class="line">Git has a mutable <span class="keyword">index</span> <span class="keyword">called</span> stage.                                           </span><br><span class="line">Git has a nbnb nbn nb.                                                          </span><br><span class="line">Git <span class="built_in">new</span> <span class="keyword">connect</span>.                                                                </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                            </span><br><span class="line">Git nen <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                        </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                    </span><br><span class="line">Git nbn nbn nbn            //添加数据</span><br></pre></td></tr></table></figure>

<p>不执行<code>git add</code>     的情况：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git checkout readme.txt                                                                                         </span><br><span class="line">$ cat readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> a distributed <span class="keyword">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> a free software distributed under the GPL.                               </span><br><span class="line">Git has a mutable <span class="keyword">index</span> <span class="keyword">called</span> stage.                                           </span><br><span class="line">Git has a nbnb nbn nb.                                                          </span><br><span class="line">Git <span class="built_in">new</span> <span class="keyword">connect</span>.                                                                </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                            </span><br><span class="line">Git nen <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                        </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.         //新数据已被撤回</span><br></pre></td></tr></table></figure>

<p>文件执行了git add 添加到了暂存区, 然后执行修改,现在撤销修改就回到添加到暂存区后的状态。可以让这个文件回到最后一次<code>git commit</code> 或 <code>git add</code> 时的状态</p>
<p><strong>文件提交后</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt                                                            `                                                                                     </span><br><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'new nbn'</span>                                                       </span><br><span class="line"><span class="keyword">On</span> branch <span class="keyword">master</span>                                                                </span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:                                                  </span><br><span class="line">deleted:    LICENSE                                                     </span><br><span class="line">Untracked files:                                                                </span><br><span class="line">readme,txt</span><br></pre></td></tr></table></figure>

<p><strong>执行修改:</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> a distributed <span class="keyword">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> a free software distributed under the GPL.                               </span><br><span class="line">Git has a mutable <span class="keyword">index</span> <span class="keyword">called</span> stage.                                           </span><br><span class="line">Git has a nbnb nbn nb.                                                          </span><br><span class="line">Git <span class="built_in">new</span> <span class="keyword">connect</span>.                                                                </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                            </span><br><span class="line">Git nen <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                        </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                    </span><br><span class="line">Git nbn.        //新增数据</span><br></pre></td></tr></table></figure>

<p><strong>撤回</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- readme.txt                                                    </span></span><br><span class="line">                                 </span><br><span class="line">$ cat readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> a distributed <span class="keyword">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> a free software distributed under the GPL.                               </span><br><span class="line">Git has a mutable <span class="keyword">index</span> <span class="keyword">called</span> stage.                                           </span><br><span class="line">Git has a nbnb nbn nb.                                                          </span><br><span class="line">Git <span class="built_in">new</span> <span class="keyword">connect</span>.                                                                </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                            </span><br><span class="line">Git nen <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                        </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.</span><br></pre></td></tr></table></figure>

<p>注意: <code>git checkout -- file</code> 命令中的 <code>--</code> 非常重要,没有 <code>-- ,</code>就变成了切换到另一个分支的命令</p>
<p><code>git  reset  HEAD  &lt;file&gt;</code></p>
<p><strong>撤销掉暂存区的修改,重新放回工作区</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">`$ cat readme.txt                                                                </span><br><span class="line">Git <span class="keyword">is</span> a distributed <span class="keyword">version</span> control <span class="keyword">system</span>.                                    </span><br><span class="line">Git <span class="keyword">is</span> a free software distributed under the GPL.                               </span><br><span class="line">Git has a mutable <span class="keyword">index</span> <span class="keyword">called</span> stage.                                           </span><br><span class="line">Git has a nbnb nbn nb.                                                          </span><br><span class="line">Git <span class="built_in">new</span> <span class="keyword">connect</span>.                                                                </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                            </span><br><span class="line">Git nen <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                        </span><br><span class="line">Git <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="built_in">new</span> <span class="keyword">connect</span>.                                                    </span><br><span class="line">git my nbme          //新增数据</span><br><span class="line"></span><br><span class="line">git <span class="keyword">add</span> readme.txt  //添加到暂存区</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> readme.txt                                                     </span><br><span class="line">Unstaged changes <span class="keyword">after</span> <span class="keyword">reset</span>:                                                   </span><br><span class="line">D       LICENSE                                                                 </span><br><span class="line">M       readme.txt                                                              <span class="string">`                                              `</span></span><br></pre></td></tr></table></figure>

<p><code>git reset</code> 命令既可以回退版本,也可以把暂存区的修改回退到工作区。当我们使用 <code>HEAD</code> 时,表示最新的版本</p>
<p><code>git status</code> 查看一下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ git status                                                                                                                                                                     On branch master                                                                                                                                                             Changes not staged for <span class="keyword">commit</span>:                                                                                                                                                    (<span class="keyword">use</span> <span class="string">"git add ..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)                                                                                                                               (<span class="keyword">use</span> <span class="string">"git checkout -- ..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)                                                                                                                 modified:   readme.txt                                                                                                                                                            <span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)                                                                                                                                                 <span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>现在暂存区干净了,工作区有修改</p>
<p>丢弃工作区的修改</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- readme.txt     </span></span><br><span class="line"></span><br><span class="line">$ git status                                                                    </span><br><span class="line"><span class="keyword">On</span> branch master                                                                </span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>

<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>先创建一个 <code>test.txt</code></p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">λ cat test.txt`</span><br><span class="line">`git <span class="keyword">new</span> test`</span><br></pre></td></tr></table></figure>

<p>提交到版本库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">λ git add test.txt</span><br><span class="line"></span><br><span class="line">λ git <span class="keyword">commit</span> -m <span class="string">"add test.txt"</span></span><br><span class="line">[<span class="keyword">master</span> <span class="number">9090e84</span>] <span class="keyword">add</span> test.txt</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> test.txt</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">λ <span class="keyword">rm</span> <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p>此时,删除文件之后,工作区和版本库就不一致了</p>
<p><code>git status</code> 查看一下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">λ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add/rm &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line">                                                                                           deleted:    test.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>两种情况</strong></p>
<p>第一:直接删除</p>
<p><code>git rm</code> 删掉  <code>git commit</code> 提交</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">λ git <span class="keyword">rm</span> <span class="keyword">test</span>.txt</span><br><span class="line"><span class="keyword">rm</span> '<span class="keyword">test</span>.txt'</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">λ git <span class="keyword">commit</span> -m <span class="string">"remove test.txt"</span></span><br><span class="line">[<span class="keyword">master</span> e732cb5] remove test.txt</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> deletion(-)</span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> test.txt</span><br></pre></td></tr></table></figure>

<p>文件就从版本库中删除了</p>
<p>第二:误删的情况 因为版本库中还存在,然后执行恢复文件操作</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">λ git checkout <span class="comment">-- test.txt</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout</code> 用版本库的版本替换工作区的版本,无论工作区是修改还是删除,然后可以一键还原</p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel模型关联</title>
    <url>/2019/11/13/laravel%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94/</url>
    <content><![CDATA[<h1 id="关联模型"><a href="#关联模型" class="headerlink" title="关联模型"></a>关联模型</h1><h2 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h2><h3 id="关联模型的关联方法"><a href="#关联模型的关联方法" class="headerlink" title="关联模型的关联方法"></a>关联模型的关联方法</h3><p>在写关联模型时 要分析出是谁关联谁 谁做主模型,谁做次模型.</p>
<p><strong>案例:(文章关联作者)</strong></p>
<p>文章是主模型 关联代码写在主模型中</p>
<a id="more"></a>

<p><strong>语法：</strong></p>
<p>public function <strong>被关联的模型名小写</strong>(){</p>
<p>​        return $this -&gt; hasOne(‘需要关联模型的命名空间,’被关联模型的关系字段,’本模型中的关系字段’);</p>
<p>} </p>
<p><img src="https://i.loli.net/2019/11/13/ZRrEJo9FVPLazv2.png" alt="a.png"></p>
<p><strong>创建控制器方法:</strong></p>
<p><img src="https://i.loli.net/2019/11/13/WZdLPQikxKn8z6u.png" alt="a.png"></p>
<p><strong>显示效果:</strong></p>
<p><img src="https://i.loli.net/2019/11/13/lkyYs7gEMVf8nP3.png" alt="aa.png"></p>
<h2 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h2><p><strong>如:一个文章有多个评论</strong></p>
<h3 id="关联模型的关联方法-1"><a href="#关联模型的关联方法-1" class="headerlink" title="关联模型的关联方法"></a><strong>关联模型的关联方法</strong></h3><p><strong>语法：</strong></p>
<p>public function <strong>被关联的模型名小写</strong>(){</p>
<p>​        return $this -&gt; hasMany(‘需要关联模型的命名空间,’被关联模型的关系字段,’本模型中的关系字段’);</p>
<p>} </p>
<p><strong>与hasOne方法相比，其只是把方法名称做了变化，其他与之前一致。</strong></p>
<p><img src="https://i.loli.net/2019/11/13/OKt8uZngzxR4dq5.png" alt="b.png"></p>
<p><strong>创建控制器方法:</strong></p>
<p><img src="https://i.loli.net/2019/11/13/YyTGLtCifeZXWbU.png" alt="bb1.png"></p>
<p><strong>显示效果:</strong></p>
<p><img src="https://i.loli.net/2019/11/13/oM95QwRidtXLUS8.png" alt="b1.png"></p>
<h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p><strong>例如：一个文章可能有多个关键词，一个关键词可能被多个文章使用。</strong></p>
<p><strong>多对多的关系经过拆分之后其实就是两个一对多的关系</strong>。</p>
<p>由于是双向一对多的关系，因此光靠2张表是无法建立的关系的，需要依靠第三张表建立关系（xx与xx的关系表）。</p>
<p><strong>三张表</strong>:</p>
<p><img src="https://i.loli.net/2019/11/13/hB92KJaoELIF6yq.png" alt="wz.png"></p>
<p><img src="https://i.loli.net/2019/11/13/63NkymzMcqX9j72.png" alt="gjz.png"></p>
<p><img src="https://i.loli.net/2019/11/13/hzXqUyLOp6xa7MA.png" alt="gxb.png"></p>
<p><strong>创建模型只需要给文章表和关键字表创建 关系表不需要创建</strong></p>
<p><strong>案例:查询出每个文章下面的全部关键词</strong></p>
<p><strong>语法：</strong></p>
<p><strong>return $this -&gt; belongsToMany(被关联模型的元素空间路径,多对多模型的关系表名,当前模型中的关系键,被关联模型的关系键);</strong></p>
<p><img src="https://i.loli.net/2019/11/13/4f65qus3rPYFeO2.png" alt="c.png"></p>
<p><strong>创建控制器方法</strong></p>
<p><img src="https://i.loli.net/2019/11/13/irDXjGusO4Rh3M7.png" alt="c1.png"></p>
<p><strong>显示效果:</strong></p>
<p><img src="https://i.loli.net/2019/11/13/Q9xfyRFgt7Z68JE.png" alt="c3.png"></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>git那些事</title>
    <url>/2021/12/17/git%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<p>​    在日常开发中,git是我们不可或缺的工具,作为一个优秀的版本控制工具,值得学习的地方还是很多的.趁这次学习git flow的机会,也重新学习一下git基本命令，好记性不如烂笔头,多写多练,才能在实际开发中游刃有余的使用git.</p>
<a id="more"></a>

<h2 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h2><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个 Git 代码库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为 Git 代码库</span></span><br><span class="line">git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">git mv [file-original] [file-renamed]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码提交</span><br><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次 commit 之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有 diff 信息</span></span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的 commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息</span></span><br><span class="line">git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次 commit，并包括指定文件的新变化</span></span><br><span class="line">git commit --amend   ...</span><br></pre></td></tr></table></figure>

<h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定 commit</span></span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个 commit，合并进当前分支</span></span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete </span><br><span class="line">git branch -dr</span><br></pre></td></tr></table></figure>

<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline  <span class="comment"># 使用不同于默认格式的方式展示提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --online  <span class="comment"># 简洁展示历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --all  <span class="comment"># 分支所有呈现</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>  <span class="comment"># 显示 commit 历史，以及每次 commit 发生变更的文件交</span></span><br><span class="line">git <span class="built_in">log</span> -p [file]  <span class="comment"># 显示指定文件相关的每一次 diff</span></span><br><span class="line">git <span class="built_in">log</span> -p -2      <span class="comment"># 展示最近的两次提交</span></span><br><span class="line">git <span class="built_in">log</span> -n4 --online  <span class="comment"># 看最近的历史消息</span></span><br><span class="line">git branch -v  <span class="comment"># 看本地有多少分支</span></span><br><span class="line">git checkout -b dashu 223343232  <span class="comment"># 分支 , 修改分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个 commit 的差异</span></span><br><span class="line">git diff --cached []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新 commit 之间的差异</span></span><br><span class="line">git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异/两个分支的比较</span></span><br><span class="line">git diff [first-branch]...[second-branch]</span><br><span class="line">git diff <span class="built_in">test</span> master <span class="comment"># 本地和本地</span></span><br><span class="line">git diff <span class="built_in">test</span> origin/<span class="built_in">test</span> <span class="comment"># 本地和远程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure>

<h2 id="git-flow的工作流程"><a href="#git-flow的工作流程" class="headerlink" title="git-flow的工作流程"></a>git-flow的工作流程</h2><h3 id="什么是git-flow"><a href="#什么是git-flow" class="headerlink" title="什么是git-flow?"></a>什么是git-flow?</h3><p>git-flow是一个git工作流,这里借鉴网上的一些说明:</p>
<p>​    Giflow 是另一种 Git 分支模型，它涉及使用功能分支和多个主分支。它由<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">文森特·德里森</a>( <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen) 在 nvie</a>首次出版并广受欢迎。与基于主干的开发相比，Giflow 拥有众多、寿命更长的分支和更大的提交。在这个模型下，开发者创建一个功能分支，并延迟合并到主干分支，直到功能完成。这些长期存在的特性分支需要更多的协作来合并，并且有更高的偏离主干分支的风险。它们还可以引入冲突的更新。</p>
<p>​    Gitflow可用于有计划的发布周期项目和为<a href="https://www.atlassian.com/devops/what-is-devops/devops-best-practices" target="_blank" rel="noopener">DevOps的最佳实践</a>的 <a href="https://www.atlassian.com/continuous-delivery" target="_blank" rel="noopener">持续交付</a>。除了<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow" target="_blank" rel="noopener">Feature Branch Workflow</a>所需的内容之外，此工作流不会添加任何新概念或命令 。相反，它为不同的分支分配非常具体的角色，并定义它们应该如何以及何时交互。除了<code>feature</code>分支之外，它还使用单独的分支来准备、维护和记录发布。当然，您还可以利用 Feature Branch Workflow 的所有优势：拉取请求、独立实验和更高效的协作。</p>
<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>​    Git-flow 是 Git 的包装器。该<code>git flow init</code>命令是默认<code>git init</code> 命令的扩展，除了为创建分支外，不会更改存储库中的任何内容。</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="https://s2.loli.net/2021/12/17/2ayIcekRsSFNihP.png" alt=""></p>
<p>​    当在项目的根目录执行”<code>git flow init</code>“命令时 当前项目是否已经包括了一个Git仓库并不重要。因为git flow只是一个工作流，不会添加任何新概念和命令。所以,在一个项目中,可以先执行<code>git init</code>，再执行<code>git flow init</code>,当然，这是很没有必要的.</p>
<h3 id="分支的模式"><a href="#分支的模式" class="headerlink" title="分支的模式"></a>分支的模式</h3><p>git-flow 模式会预设两个主分支在仓库中：</p>
<p><strong>master</strong> 只能用来包括产品代码. 不能直接在这个分支上工作. 而是在其他指定的，独立的特性分支中进行工作. 不直接提交到master分支上是很多工作流程的一个共同的规则。</p>
<p><strong>develop</strong> 是你进行任何新的开发的基础分支。当你开始一个新的功能分支时，它将是开发的基础。另外，该分支也应该汇集所有已经完成的功能，并等待被整合到 master分支中。</p>
<p><img src="https://www.git-tower.com/learn/media/pages/git/ebook/cn/command-line/advanced-topics/git-flow/1637630691-1639653849/01-master-develop.png" alt=""></p>
<p>​    这两个分支被称为<strong>长期分支</strong>。它们会存活在项目的整个生命周期中。而其他的分支,如针对功能的分支,针对发行的分支,只是临时存在。它们是根据你的需求来创建的,完成任务之后就删除掉.</p>
<p><img src="https://www.git-tower.com/learn/media/pages/git/ebook/cn/command-line/advanced-topics/git-flow/2144379591-1639653849/02-features-hotfix.png" alt=""></p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h4><p>​    对于一个开发人员来说，最平常的工作就是项目功能的开发。所以我们可以使用git-flow这个工作流，它定义了很多对于功能开发的工作流程</p>
<h5 id="开始新功能"><a href="#开始新功能" class="headerlink" title="开始新功能"></a>开始新功能</h5><p>现在我们开始开发项目的一个新功能<code>&quot;oss-upload&quot;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow feature start oss-upload</span><br><span class="line">Switched to a new branch <span class="string">'feature/oss-upload'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'feature/oss-upload'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'feature/oss-upload'</span></span><br></pre></td></tr></table></figure>

<p>​    这时，git-flow会创建一个名为”feature/oss-upload”的新分支，并自动切换到该分支,我们直接就可以开始工作了.</p>
<h5 id="完成一个功能"><a href="#完成一个功能" class="headerlink" title="完成一个功能"></a>完成一个功能</h5><p>经过艰苦的工作,我们的新功能终于开发完成了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow feature finish oss-upload</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Already up to date.</span><br><span class="line">Deleted branch feature/oss-upload (was 996bb46).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- The feature branch <span class="string">'feature/oss-upload'</span> was merged into <span class="string">'develop'</span></span><br><span class="line">- Feature branch <span class="string">'feature/oss-upload'</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure>

<p>​    ‘flow feature finish’会把我们添加或修改的新功能合并到’develop’分支中去.并且会删除这个当前已经完成工作的分支’feature/oss-upload’,并自动切换到’develop分支’</p>
<h4 id="管理releases"><a href="#管理releases" class="headerlink" title="管理releases"></a>管理releases</h4><p>​    Release 管理是版本控制处理中的另外一个非常重要的话题。让我们来看看如何利用 git-flow 创建和发布 release。</p>
<h5 id="创建release"><a href="#创建release" class="headerlink" title="创建release"></a>创建release</h5><p>​    当我们的 “develop” 分支的代码已经是一个成熟的 release 版本时，这意味着：第一，它包括所有新的功能和必要的修复；第二，它已经被彻底的测试过了。如果上述两点都满足，那就是时候开始生成一个新的 release 了：    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow release start 0.0.1</span><br><span class="line">Switched to a new branch <span class="string">'release/0.0.1'</span></span><br></pre></td></tr></table></figure>

<p>​    执行完这条命令之后,我们发现release 分支是使用版本号命名的。这个命名方案还有一个很好的附带功能，那就是当我们完成了release 后，git-flow 会适当地自动去标记那些 release 提交。</p>
<h5 id="完成release"><a href="#完成release" class="headerlink" title="完成release"></a>完成release</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow release finish 0.0.1</span><br><span class="line">Deleted branch release/0.0.1 (was 996bb46).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- Release branch <span class="string">'release/0.0.1'</span> has been merged into <span class="string">'master'</span></span><br><span class="line">- The release was tagged <span class="string">'0.0.1'</span></span><br><span class="line">- Release branch <span class="string">'release/0.0.1'</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure>

<p>这个命令会完成如下一系列的操作：</p>
<ol>
<li>首先，git-flow 会拉取远程仓库，以确保目前是最新的版本。</li>
<li>然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。</li>
<li>为便于识别和做历史参考，release 提交会被标记上这个 release 的名字</li>
<li>清理操作，版本分支会被删除，并且回到 “develop”。</li>
</ol>
<h4 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h4><p>​    很多时候，仅仅在几个小时或几天之后，当对 release 版本作做全面测试时，可能就会发现一些bug。<br>在这种情况下，git-flow 提供一个特定的 “hotfix” 工作流程（因为在这里不管使用 “功能” 分支流程，还是 “release” 分支流程都是不恰当的）。</p>
<h5 id="创建Hotfixes"><a href="#创建Hotfixes" class="headerlink" title="创建Hotfixes"></a>创建Hotfixes</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow hotfix start missing-link</span><br></pre></td></tr></table></figure>

<p>​    这个命令会创建一个名为 “hotfix/missing-link” 的分支。因为这是对产品代码进行修复，所以这个 hotfix 分支是基于 “master” 分支。<br>这也是和 release 分支最明显的区别，release 分支都是基于 “develop” 分支的。因为你不应该在一个还不完全稳定的开发分支上对产品代码进行地修复。</p>
<p>就像 release 一样，修复这个错误当然也会直接影响到项目的版本号！</p>
<h5 id="完成Hotfixes"><a href="#完成Hotfixes" class="headerlink" title="完成Hotfixes"></a>完成Hotfixes</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow hotfix finish missing-link</span><br></pre></td></tr></table></figure>

<p>这个过程非常类似于发布一个 release 版本：</p>
<ul>
<li>完成的改动会被合并到 “master” 中，同样也会合并到 “develop” 分支中，这样就可以确保这个错误不会再次出现在下一个 release 中。</li>
<li>这个 hotfix 程序将被标记起来以便于参考。</li>
<li>这个 hotfix 分支将被删除，然后切换到 “develop” 分支上去。</li>
</ul>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>​    首先，git-flow不会为git扩展新的功能，只是用来完成一些特定的工作流程。其次,定义一个固定的工作流程会使团队合作更加简单容易.最后,我们可以使用feature来开发功能,release来发布版本,最后可以通过hotfix来修改产品代码的bug.感觉理解的不太对,但又有点说不上来,等实际开发中用到应该就可以加深一点理解.</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>tp5.1结合layui实现多图上传</title>
    <url>/2020/07/23/layui%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>​            <strong>tp5.1结合layui实现多图上传,点击删除,点击放大功能.所谓多图上传,就是点击上传按钮时,在div中追加图片以及隐藏域,隐藏域用来存放图片路径,用于向后端传递数据.</strong></p>
<a id="more"></a>

<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>轮播图<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline upload"</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span> <span class="attr">id</span>=<span class="string">"test2"</span> &gt;</span>多图片上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-upload-list"</span> <span class="attr">id</span>=<span class="string">"demo2"</span> <span class="attr">style</span>=<span class="string">"width:1000px;"</span> &gt;</span></span><br><span class="line">            &#123;if condition="!empty($formData['carousel'])"&#125;</span><br><span class="line">            &#123;foreach $formData['carousel'] as $value&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item_img"</span> <span class="attr">style</span>=<span class="string">"display:inline; padding-left:10px;"</span> <span class="attr">title</span>=<span class="string">"点击放大"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;$value&#125;"</span>  <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">style</span>=<span class="string">"padding-top: 10px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"carousel[]"</span> <span class="attr">value</span>=<span class="string">"&#123;$value&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"layui-icon del"</span> &gt;</span><span class="symbol">&amp;#x1007;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            &#123;/foreach&#125;</span><br><span class="line">            &#123;/if&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="多图上传"><a href="#多图上传" class="headerlink" title="多图上传"></a>多图上传</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">layui.use([<span class="string">'upload'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = layui.jquery</span><br><span class="line">        , upload = layui.upload;</span><br><span class="line">    <span class="comment">//多图上传</span></span><br><span class="line">   upload.render(&#123;</span><br><span class="line">            elem: <span class="string">'#test2'</span></span><br><span class="line">            ,<span class="attr">url</span>: <span class="string">"&#123;$yuming&#125;"</span> + <span class="string">'?prefix=fengmian'</span><span class="comment">//改成自己的上传接口</span></span><br><span class="line">            ,<span class="attr">multiple</span>: <span class="literal">true</span></span><br><span class="line">            ,<span class="attr">before</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                layer.msg(<span class="string">'文件上传中...'</span>, &#123;<span class="attr">time</span>: <span class="number">3000</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ,<span class="attr">done</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.code == <span class="number">1</span>) &#123;</span><br><span class="line">                    $(<span class="string">'#demo2'</span>).append(<span class="string">'&lt;li class="item_img" style="display:inline; padding-left:10px;" title="点击放大" &gt;&lt;img src="'</span> + res.data.file + <span class="string">'" class="img" width="100" height="100" style="padding-top:10px;" &gt;&lt;input type="hidden" name="carousel[]" value="'</span> + res.data.file + <span class="string">'" /&gt;'</span>);</span><br><span class="line">                    $(<span class="string">'#demo2'</span>).append(<span class="string">'&lt;i class="layui-icon del"&gt;&amp;#x1007;&lt;/i&gt;'</span>);</span><br><span class="line">                    delImg(); <span class="comment">//删除图片</span></span><br><span class="line">                    EnlargeImg();<span class="comment">//放大图片</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//提示信息</span></span><br><span class="line">                    layer.msg(res.msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="点击图片放大"><a href="#点击图片放大" class="headerlink" title="点击图片放大"></a>点击图片放大</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EnlargeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//点击图片放大</span></span><br><span class="line">    $(<span class="string">'.img'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> imgSrc = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</span><br><span class="line">        layer.open(&#123;</span><br><span class="line">            type:<span class="number">1</span></span><br><span class="line">            ,<span class="attr">title</span>:<span class="literal">false</span></span><br><span class="line">            ,<span class="attr">closeBtn</span>:<span class="number">20</span></span><br><span class="line">            ,<span class="attr">shadeClose</span>:<span class="literal">true</span></span><br><span class="line">            ,<span class="attr">maxmin</span>: <span class="literal">true</span></span><br><span class="line">            ,<span class="attr">area</span>: [<span class="string">'1200px'</span>,<span class="string">'600px'</span>]</span><br><span class="line">            ,<span class="attr">content</span>:<span class="string">'&lt;img src=" '</span>+imgSrc+<span class="string">' " height="600" width="1200"&gt;'</span></span><br><span class="line">            <span class="comment">// ,scrollbar:false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">EnlargeImg();</span><br></pre></td></tr></table></figure>

<h3 id="删除图片"><a href="#删除图片" class="headerlink" title="删除图片"></a>删除图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="comment">//删除图片</span></span><br><span class="line">           $(<span class="string">'.del'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               $(<span class="keyword">this</span>).prev().remove();</span><br><span class="line">               $(<span class="keyword">this</span>).remove();</span><br><span class="line">               <span class="built_in">console</span>.log($(<span class="keyword">this</span>).prev());</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       delImg();</span><br></pre></td></tr></table></figure>

<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;request-&gt;isPost()) &#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;request-&gt;post();</span><br><span class="line">        $data[<span class="string">'carousel'</span>] = serialize($data[<span class="string">'carousel'</span>]); <span class="comment">//接收传过来的图片数据 进行序列化</span></span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;validate($data, <span class="string">'SystemVenus'</span>);</span><br><span class="line">        <span class="keyword">if</span>($result !== <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error($result);</span><br><span class="line">        &#125;</span><br><span class="line">        $model = <span class="keyword">new</span> VenusModel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($model-&gt;save($data)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">'添加成功'</span>,<span class="string">'system/venus/index'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error(<span class="string">'添加失败'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assign(<span class="string">'langlist'</span>, LangModel::where([])-&gt;order(<span class="string">'id asc'</span>)-&gt;select());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assign(<span class="string">'yuming'</span>, get_domain().<span class="string">'/qiniu.php'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch(<span class="string">'venusform'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h2><p><img src="https://i.loli.net/2020/07/23/dXPh3TVSYERzn2i.png" alt="1.png"></p>
<p><strong>放大效果</strong></p>
<p><img src="https://i.loli.net/2020/07/23/mQn4Dr7wOxRsJFZ.png" alt="1.png"></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础知识</title>
    <url>/2019/09/19/html/</url>
    <content><![CDATA[<h1 id="前端基础复习笔记-一"><a href="#前端基础复习笔记-一" class="headerlink" title="前端基础复习笔记(一)"></a>前端基础复习笔记(一)</h1><h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><h3 id="HTML之块标签"><a href="#HTML之块标签" class="headerlink" title="HTML之块标签"></a>HTML之块标签</h3><p><strong><em>块级元素:块级大多为结构性标记</em></strong></p>
<p><code>有&lt;h1&gt;到&lt;h6&gt;标题标签，&lt;div&gt;标签 ,&lt;p&gt;标签，列表标签&lt;ul&gt;,&lt;ol&gt;,&lt;hr&gt;水平线标签，&lt;table&gt;表格标签，&lt;form&gt;表单标签</code></p>
<p><strong>特点</strong>:块标签内展示的内容总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示.</p>
<a id="more"></a>

<h3 id="HTML之内联标签"><a href="#HTML之内联标签" class="headerlink" title="HTML之内联标签"></a>HTML之内联标签</h3><h4 id="内联标签"><a href="#内联标签" class="headerlink" title="内联标签"></a>内联标签</h4><p><strong>特点</strong>:在html中内联标签，和块标签相对应，它以“文本模式”显示，即一个挨着一个，都在同一行按从左至右的顺序显示，不单独占一行。</p>
<p>内联标签有<code>&lt;span&gt;标签，超链接&lt;a&gt;标签，加粗标签&lt;b&gt;标签,规定字体属性的标签&lt;font&gt;.&lt;font&gt;标签常用属性</code>有:color（文本颜色）、size（文本大小）、famliy(文本字体),等。还有换行标签:<code>&lt;br&gt;</code>换行标签可插入一个简单的换行符。 一般写在想要换行的那一行最后 .</p>
<p><code>&lt;img&gt;</code>图片标签，可以插入图片,写法:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">""</span> <span class="attribute">alt</span>=<span class="string">""</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>  <code>&lt;i&gt;斜体标签，&lt;del&gt;删除线,&lt;u&gt;下划线,&lt;input&gt;文本框,&lt;textarea&gt;多行文本,&lt;select&gt;下拉列表。</code></p>
<h3 id="HTML之表格标签"><a href="#HTML之表格标签" class="headerlink" title="HTML之表格标签"></a>HTML之表格标签</h3><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><p><strong>创建表格</strong>:<code>&lt;table&gt; 标签定义 HTML 表格 一个 HTML 表格包括 &lt;table&gt; 元素，一个或多个 &lt;tr&gt;、&lt;th&gt; 以及&lt;td&gt; 元素。 &lt;tr&gt; 元素定义表格行，&lt;th&gt; 元素定义表头，&lt;td&gt; 元素定义表格单元。</code></p>
<p><strong>定义一行一列表格:</strong></p>
<p><img src="https://i.loli.net/2019/06/06/5cf87e7c09c3a24631.png" alt="QQ截图20190606104603.png"></p>
<p><strong>定义二行三列表格:</strong></p>
<p><img src="https://i.loli.net/2019/06/06/5cf87ea5c783497121.png" alt="QQ截图20190606104654.png"></p>
<p><strong>标签属性</strong>:<code>&lt;table&gt;标签的属性有：border设定表格边框的宽度。cellpadding规定单元边沿与其内容之间的空白。cellspacing规定单元格之间的空白。width规定表格的宽度。</code></p>
<p><strong>合并单元格</strong>:在完成表格的创建后可以通过<code>colspan</code>和<code>rowspan</code>进行单元格合并。</p>
<p>colspan是横向合并 colspan属性用在td标签中，用来指定单元格横向跨越的列数</p>
<p>rowspan是纵向合并 rowspan属性用在td标签中,用来指定单元格纵向跨越的行数</p>
<p><img src="https://i.loli.net/2019/06/06/5cf87ffd4416091085.png" alt="QQ截图20190606105238.png"></p>
<h3 id="HTML之网页表单"><a href="#HTML之网页表单" class="headerlink" title="HTML之网页表单"></a>HTML之网页表单</h3><p><strong>如何创建表单</strong></p>
<p>表单的控件：</p>
<p><img src="https://i.loli.net/2019/06/04/5cf62416049eb31659.png" alt="QQ截图20190604142011.png"></p>
<p>表单按钮:</p>
<p><img src="https://i.loli.net/2019/06/04/5cf624955e18026169.png" alt="QQ截图20190604143701.png"></p>
<p>form标签来创建表单</p>
<p><img src="https://i.loli.net/2019/06/04/5cf625278eb9b13456.png" alt="QQ截图20190604155506.png"></p>
<p><strong>文本框</strong></p>
<p>这里使用的是input标签，当type属性值为“text”时可以显示文本内容，通常用户用户名等信息的填写</p>
<p>文本框显示提示字符，输入时消失:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">name</span>=<span class="string">''</span> <span class="attribute">placeholder</span>=<span class="string">"手机/邮箱/用户名"</span>&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/06/04/5cf66b72b963910255.png" alt="QQ截图20190604210011.png"></p>
<p><strong>密码框</strong></p>
<p>当用户输入的是密码时就要设置input标签的type属性值为“password”时就是实现密码框的功能</p>
<p><img src="https://i.loli.net/2019/06/04/5cf6268244c6d22341.png" alt="QQ截图20190604160617.png"></p>
<p><strong>单选按钮</strong></p>
<p>input标签的type属性值为“radio“</p>
<p><img src="https://i.loli.net/2019/06/04/5cf6270996bfa25297.png" alt="QQ截图20190604160834.png"></p>
<p>图中的name为分类 因为不写name的情况下，两个都可以选。而checked可以设置默认选项</p>
<p><strong>多选框</strong></p>
<p>有的时候我们会给用户选项来供用户选择，比如省市区的选择，那么这时就要设置input标签的type属性值为“checkbox”来实现多选功能，和单选一个，我们也需要设置name属性，如果有一个需要默认选中的话也要使用checked属性</p>
<p><img src="https://i.loli.net/2019/06/04/5cf627e30a0fb51662.png" alt="QQ截图20190604161208.png"></p>
<p><strong>下拉框</strong></p>
<p>如果有的时候不方便用户输入内容，比如省市区，用户写错了字会很麻烦，那么这时就要在select标签中使用option标签来实现下拉框的功能了，这样直接给用户选项让用户选择，就不必担心用户写的字会错，而且可以根据不同的省份自动显示不同的市，也方便了用户的操作</p>
<p><img src="https://i.loli.net/2019/06/04/5cf6287dc760090365.png" alt="QQ截图20190604161426.png"></p>
<p>可以使用selected=””来设置默认选项</p>
<p><strong>文本域</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;textarea&gt;</span><span class="section">&lt;/textarea&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们的内容过长，例如想写一篇文章保存到数据库，明显普通的文本输入框就无法使用了，或者体验不好，这时我们用到了一个新的标签:textarea 来完成长文本的操作</p>
<p><img src="https://i.loli.net/2019/06/04/5cf629269989224008.png" alt="QQ截图20190604161732.png"></p>
<p>文本域中的colspan作用是控制文本域的行数，也就是他的宽度。rowspan的作用是控制文本域的列数，也就是他的高度</p>
<p><strong>提交按钮</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="submit" <span class="keyword">value</span>="注册"&gt;</span><br></pre></td></tr></table></figure>

<p>当我们的表单内容都填写完成，如何告诉后台我所提交的数据都有什么呢？这时就需要添加一个提交按钮，而用到的同样是input标签，只不过type属性改为了“submit”</p>
<p><img src="https://i.loli.net/2019/06/04/5cf629feb377c99309.png" alt="QQ截图20190604162103.png"></p>
<p>value可以设置按钮的名字</p>
<p><strong>重置按钮</strong></p>
<p>当我们写了很多东西后发现写的不对，我想全部信息都重新写，这时应当使用表单中的重置按钮，也就是input标签的type属性设置为reset，这样当我们点击重置按钮的时候会自动清空当前表单的所有内容</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span>  <span class="keyword">type</span>="reset" <span class="keyword">value</span>="重置"&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/06/04/5cf62b1478a2256136.png" alt="QQ截图20190604162548.png"></p>
<p><strong>普通按钮</strong></p>
<p>当然，实际开发的时候不止提交按钮和重置按钮，有时候我们需要一个按钮来完成特殊功能，比如删除某一行内容，比如改变某区域颜色等等，这时候就用到了普通按钮，也就是设置input标签的type属性为button，具体实现什么样的效果只要通过js来设置就ok啦</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="button" <span class="keyword">value</span>="普通按钮"&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/06/04/5cf62b8fc294f25630.png" alt="QQ截图20190604162752.png"></p>
<h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><p>css的样式主要分为行内样式、内部样式和外部样式，它们的作用是一样的，只不过书写位置不一样而已。</p>
<p><strong>内部样式的书写位置</strong>:<code>写在&lt;style&gt;里</code></p>
<p><img src="https://i.loli.net/2019/06/06/5cf88219066ef69531.png" alt="QQ截图20190606110138.png"></p>
<p><strong>行内样式的书写位置</strong>:写在标签里面</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8826b4078a14655.png" alt="QQ截图20190606110259.png"></p>
<p><strong>外部样式的书写位置</strong>:<code>&lt;link&gt;</code>引入</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8826b4078a14655.png" alt="QQ截图20190606110259.png"></p>
<p><strong>绝对路径和相对路径的引入</strong>:</p>
<p>绝对路径:</p>
<p><img src="https://i.loli.net/2019/06/06/5cf883136a3c398866.png" alt="QQ截图20190606110545.png"></p>
<p>相对路径:</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8832e0d40666442.png" alt="QQ截图20190606110614.png"></p>
<p><strong>就近原则</strong>:多种样式综合使用，谁离着目标标签近，谁就先起作用.css样式的优先级是行内&gt;内部&gt;外部。不过当外部比内部离目标标签近时，外部高于内部。因为就近原则,htmlcss的代码解析时从上往下解析，外部引用会覆盖内部引用，从而优先级大于内部。</p>
<h3 id="css基本选择器和优先级"><a href="#css基本选择器和优先级" class="headerlink" title="css基本选择器和优先级"></a>css基本选择器和优先级</h3><p><strong>css选择器:</strong>css选择器可以为拥有指定属性的 HTML 元素设置样式，主要包含标签选择器器、类选择器、id选择器以及群组选择器等等.</p>
<p> <strong>标签选择器</strong>:</p>
<p><img src="https://i.loli.net/2019/06/06/5cf884bf0630446096.png" alt="QQ截图20190606111256.png"></p>
<p><strong>类选择器</strong>:<img src="https://i.loli.net/2019/06/06/5cf884efe82db92278.png" alt="QQ截图20190606111343.png"></p>
<p><strong>id选择器：<img src="https://i.loli.net/2019/06/06/5cf8853917b9f49907.png" alt="QQ截图20190606111457.png"></strong></p>
<p> <strong>群组选择器</strong>：<img src="https://i.loli.net/2019/06/06/5cf885ba372dc76339.png" alt="QQ截图20190606111646.png"></p>
<p><strong>css选择器的优先级</strong></p>
<p>css选择器的优先级从高到底排列是id选择器&gt;类选择器&gt;标签选择器</p>
<h3 id="css选择器的权重"><a href="#css选择器的权重" class="headerlink" title="css选择器的权重"></a>css选择器的权重</h3><p><strong>后代选择器:<img src="https://i.loli.net/2019/06/06/5cf88674c33c623248.png" alt="QQ截图20190606112013.png"></strong></p>
<p><strong>css选择器的权重计算:</strong>多种选择器同时作用于同一标签，权重该如何计算？id选择器的权重为100，类选择器的权重是10，标签选择器的权重是1。</p>
<p><strong>权重计算案例</strong>:<img src="https://i.loli.net/2019/06/06/5cf886cb9770d97825.png" alt="QQ截图20190606112138.png"></p>
<h3 id="css盒子大小和边框"><a href="#css盒子大小和边框" class="headerlink" title="css盒子大小和边框"></a>css盒子大小和边框</h3><p><strong>网页盒子页面显示:</strong><img src="https://i.loli.net/2019/06/06/5cf8876a4fa2822569.png" alt="QQ截图20190606112418.png"> <u>网页盒子默认没有大小</u></p>
<p><strong>网页盒子高度宽度和边框:<img src="https://i.loli.net/2019/06/06/5cf887e86840e21877.png" alt="QQ截图20190606112625.png"></strong></p>
<p><strong>边框属性设置</strong>:综合写法</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<p>分开写法:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>:<span class="number">1px</span>  solid blue;  <span class="attribute">border-bottom</span>:<span class="number">2px</span> dashed red; </span><br><span class="line"><span class="attribute">border-right</span>:<span class="number">3px</span> dotted red; <span class="attribute">border-left</span>:<span class="number">4px</span> solid blue;</span><br></pre></td></tr></table></figure>

<h3 id="css盒子位置调整"><a href="#css盒子位置调整" class="headerlink" title="css盒子位置调整"></a>css盒子位置调整</h3><p><strong>初识margin</strong>:margin也叫边距，是盒子与盒子之间的间距，有margin-top(上边距) margin-bottom(下边距) margin-left(左边距) margin-right(右边距)</p>
<p><strong>盒子上下外边距的调整</strong>:<img src="https://i.loli.net/2019/06/06/5cf8895b1f35617302.png" alt="QQ截图20190606113231.png"></p>
<p> <strong>盒子向下移动位置的调整</strong>:<img src="https://i.loli.net/2019/06/06/5cf88984e637636699.png" alt="QQ截图20190606113318.png"></p>
<p><strong>margin使用的问题:</strong>页面不显示的情况</p>
<p><img src="https://i.loli.net/2019/06/06/5cf889de6112437116.png" alt="QQ截图20190606113444.png"></p>
<p><strong>margin的写法</strong>:</p>
<ol>
<li>margin:10px; 上下左右外边距都是10px</li>
<li>margin:10px 20px; 上下边距10px，左右边距20px</li>
<li>margin:10px 20px 30px;上边距:10px 左右边距:20px 下边距:30px</li>
<li>margin:10px 10px 10px 10px; 上:10px 右:10px 下:10px 左:10px</li>
</ol>
<h3 id="盒子内容调整"><a href="#盒子内容调整" class="headerlink" title="盒子内容调整"></a>盒子内容调整</h3><p><strong>padding</strong>:padding叫做内间距，它可以调整盒子与内容之间的间距，它也有上下左右四个方向，所以有padding-top(上内间距) padding-bottom(下内间距) padding-left(左内间距) padding-right(右内间距)</p>
<p> <strong>padding-top的设置</strong>:<img src="https://i.loli.net/2019/06/06/5cf88acfe92df22451.png" alt="QQ截图20190606113846.png"></p>
<p><strong>padding-left的设置</strong>:<img src="https://i.loli.net/2019/06/06/5cf88b40aac5062250.png" alt="QQ截图20190606113927.png"></p>
<p> <strong>padding-right的设置</strong>:<img src="https://i.loli.net/2019/06/06/5cf88b6668cba55194.png" alt="QQ截图20190606113944.png"></p>
<p><strong>padding-bottom的设置</strong>:<img src="https://i.loli.net/2019/06/06/5cf88b958266a29928.png" alt="QQ截图20190606113957.png"></p>
<p><strong>padding写法</strong>:</p>
<p>padding:30px;上下左右间距是都是30px;</p>
<p>padding:30px 20px; 上下间距是30px ，左右间距是20px；</p>
<p>padding:30px 20px 50px ;上间距是30px，左右是20px，下间距是30px；</p>
<p>padding：30px 20px 20px 50px;顺序是上，右，下，左。</p>
<h3 id="css字体调整"><a href="#css字体调整" class="headerlink" title="css字体调整"></a>css字体调整</h3><p><strong>字体样式</strong>:用于在html中设置字体样式，包括大小、颜色、类型、粗细等</p>
<p><strong>字体大小</strong>:浏览器默认字体大小为16px；</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">font-size:<span class="number">20</span>px 修改字体大小</span><br></pre></td></tr></table></figure>

<p><strong>字体颜色:</strong></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="built_in">color</span>:<span class="built_in">red</span>;</span><br></pre></td></tr></table></figure>

<p><strong>字体类型</strong>:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>:<span class="string">'宋体'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>:我们想使用的字体类型需要我们的系统中有这个字体</p>
<p><strong>文本加粗</strong>:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">font-<span class="string">weight:</span>bold/font-<span class="string">weight:</span><span class="number">700</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/06/06/5cf88de2644e880754.png" alt="QQ截图20190606115152.png"></p>
<p><strong>文本修饰</strong>:</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">text</span>-decoration:line-<span class="keyword">through</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/06/06/5cf88e4db102b58943.png" alt="QQ截图20190606115342.png"></p>
<p><strong>a标签下划线去除</strong>:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">text</span>-decoration:<span class="keyword">none</span>;</span><br></pre></td></tr></table></figure>

<p><strong>文本在盒子中的位置</strong>:文本在盒子中默认的位置是左上角</p>
<p><strong>设置文本居中:</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">text</span>-<span class="keyword">align</span>:center;</span><br></pre></td></tr></table></figure>

<p><strong>设置文本上下居中</strong>:<img src="https://i.loli.net/2019/06/06/5cf88f8e916ee54457.png" alt="QQ截图20190606115903.png"></p>
<h3 id="css背景颜色"><a href="#css背景颜色" class="headerlink" title="css背景颜色"></a>css背景颜色</h3><p><strong>背景颜色</strong>:通过16进制色值或者RGB值和颜色单词等来设置div或者网页的背景</p>
<p><strong>使用颜色单词:</strong></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="built_in">background</span>:<span class="built_in">blue</span>;</span><br></pre></td></tr></table></figure>

<p><strong>使用16进制色值</strong>:</p>
<p>通过三组十六进制的数值来设置颜色：</p>
<p>可以理解为红色、绿色和蓝色三个灯泡，都最低，代表三个灯都关闭，就会变黑。都最高，就会变成白茫茫一片，即为白色</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8ab241bd7b23024.png" alt="QQ截图20190606135635.png"></p>
<p>当每组值相同，可以省略其中一个值，简写成:<img src="https://i.loli.net/2019/06/06/5cf8ab4e2117d31738.png" alt="QQ截图20190606135728.png"></p>
<p><strong>使用RGB色值</strong>:RGB值也是我们常用的设置色值的方式，通过三组（分别为红，绿，蓝）设置一个0-255的值来代表一个对应颜色的亮度，通过组合，生成不同的颜色：</p>
<p><img src="https://i.loli.net/2019/06/06/5cf8abab8b8eb36377.png" alt="QQ截图20190606135900.png"></p>
<h3 id="css背景图片"><a href="#css背景图片" class="headerlink" title="css背景图片"></a>css背景图片</h3><p><strong>默认设置背景图片</strong></p>
<p>默认情况下，设置的图片会在水平方向和垂直方向铺满整个盒子大小，不足的位置会重复背景图来铺满：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>:url(<span class="string">'1.jpg'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>让图片横向铺满该如何做</strong>:</p>
<p>通过给background-repeat属性设置repeat-x值来设置横向重复</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">background-<span class="keyword">repeat</span>:<span class="keyword">repeat</span>-<span class="symbol">x</span>;</span><br></pre></td></tr></table></figure>

<p><strong>让图片纵向铺满又该如何做:</strong></p>
<p>通过给background-repeat属性设置repeat-y值来设置纵向重复</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">background-<span class="keyword">repeat</span>:<span class="keyword">repeat</span>-<span class="symbol">y</span>;</span><br></pre></td></tr></table></figure>

<p><strong>只想要我原本的图片，不想让图片重复，这时候该怎么办:</strong></p>
<p>通过给background-repeat属性设置no-repeat值来设置不重复</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">background-<span class="keyword">repeat</span>:<span class="keyword">no</span>-<span class="keyword">repeat</span>;</span><br></pre></td></tr></table></figure>

<p><strong>设置背景图片位置</strong></p>
<p>用到了background-position属性</p>
<p>Background-position的值有两个，第一个代表图片在x轴上的位置 第二个代表图片在Y轴上的位置。如果两个值都为0，和图片默认位置是一样的，不会有什么变化</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">background-position:<span class="number">0</span>px <span class="number">0</span>px;</span><br></pre></td></tr></table></figure>

<p>X轴上可以向左移动也可以向右移动，Y轴上可以向上移动也可以向下移动。</p>
<p>规律：图片向右移动为正值，向下移动为正值； 图片向左移动为负值，向上移动为负值。</p>
<p><strong>我们图片想隐藏一部分内容，或者中只想显示图片的某一部分该如何做:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">background-position:<span class="number">-100</span>px <span class="number">0</span>px;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">background-position:<span class="number">0</span>px <span class="number">-100</span>px;</span><br></pre></td></tr></table></figure>

<p><strong>我们有需求想要让图片左右居中，上下也居中该怎么办:</strong></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">background</span>-<span class="built_in">position</span>:<span class="built_in">center</span> <span class="built_in">center</span>;</span><br></pre></td></tr></table></figure>

<p><strong>快捷设置某个位置的方法：</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="attribute">top</span>;</span><br></pre></td></tr></table></figure>

<h3 id="css相对定位"><a href="#css相对定位" class="headerlink" title="css相对定位"></a>css相对定位</h3><p><strong><em>设置为相对定位的元素框会偏移某个距离。元素仍然保持其未定位前的形状，它原本所占的空间仍保留。</em></strong></p>
<p><strong>对象不可层叠、不脱离文档流，参考自身静态位置通过top,bottom,left,right定位，并且可以通过z-index进行层次分级。</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>-relative</span><br></pre></td></tr></table></figure>

<h3 id="css绝对定位"><a href="#css绝对定位" class="headerlink" title="css绝对定位"></a>css绝对定位</h3><p><strong>absolute绝对定位：脱离文档流 通过top,bottom,left,right定位。选取其最近一个具有定位设置的父级对象进行绝对定位，如果对象的父级没有设置定位属性，absolute元素将以body坐标原点进行定位，可以通过z-index进行层次分级。</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>-absolute</span><br></pre></td></tr></table></figure>

<h3 id="css浮动"><a href="#css浮动" class="headerlink" title="css浮动"></a>css浮动</h3><p><strong>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止*</strong>。<strong>浮动会脱离标准文档流</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">float</span><span class="selector-pseudo">:left</span>; <span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">float</span>:none; <span class="attribute">float</span>:inherit;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/06/15/5d049b4ebcf1822264.png" alt="QQ截图20190615151513.png"></p>
<p><strong>浮动案例: 无序列表制作导航</strong></p>
<p>默认无需列表样式是纵向排列：</p>
<p><img src="https://i.loli.net/2019/06/15/5d049c3624ec882372.png" alt="QQ截图20190615151958.png"></p>
<p>去除无序列表和超链接下划线：</p>
<p><img src="https://i.loli.net/2019/06/15/5d049cc14f9ff76215.png" alt="QQ截图20190615152211.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>js字符串方法</title>
    <url>/2019/12/15/js%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="JavaScript-字符串方法"><a href="#JavaScript-字符串方法" class="headerlink" title="JavaScript 字符串方法"></a>JavaScript 字符串方法</h1><p>​        最近在准备考1+x证书,刷了一些题,很多题中考到了js字符串的方法,特此总结一下。</p>
<h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p><code>length</code> 属性返回字符串的长度</p>
<p><img src="https://i.loli.net/2019/12/15/FqIoiwrZCszB2Sg.png" alt="1.png"></p>
<a id="more"></a>

<h2 id="查找字符串中的字符串"><a href="#查找字符串中的字符串" class="headerlink" title="查找字符串中的字符串"></a>查找字符串中的字符串</h2><p><code>indexOf()</code> 方法返回字符串中指定文本首次出现的索引(位置)</p>
<p><img src="https://i.loli.net/2019/12/15/uDc9gLrANz7TOBi.png" alt="1.png"></p>
<p><code>lastIndexOf()</code> 方法返回指定文本在字符串中最后一次出现的索引</p>
<p><img src="https://i.loli.net/2019/12/15/pzfi7jXbVFuxsKN.png" alt="1.png"></p>
<p><strong>如果未找到文本,indexOf()和lastIndexOf()都返回-1</strong></p>
<p><strong>两种方法都可以传入第二个参数,用来指定检索的起始位置</strong></p>
<p><img src="https://i.loli.net/2019/12/15/M1iecPY6jFNzn8q.png" alt="1.png"></p>
<p><img src="https://i.loli.net/2019/12/15/O856aqNmjlVKBrL.png" alt="1.png"></p>
<p><strong>注意: <code>lastIndexOf()</code> 限制了检索位置为10 因此检索不到 返回-1</strong></p>
<p><strong>像下面这种情况 会从第30个字符开始检索 返回的仍然是从字符起点开始检索的位置  第二个参数只是会限制字符检索的长度 不会从后往前检索</strong></p>
<p><img src="https://i.loli.net/2019/12/15/2RxjcFp8vNb3tL6.png" alt="1.png"></p>
<h2 id="检索字符串中的字符串"><a href="#检索字符串中的字符串" class="headerlink" title="检索字符串中的字符串"></a>检索字符串中的字符串</h2><p>search()方法检索特定值的字符串,并返回匹配的位置。听上去和<code>indexOf()</code>方法是相等的,实际上,区别很大</p>
<p>区别在于:<code>search()</code> 方法无法设置第二个开始位置的参数。</p>
<p>​                <code>indexOf()</code> 方法无法设置更强大的搜索值（正则表达式）。</p>
<p><img src="https://i.loli.net/2019/12/15/tnYlapVNQshKW6q.png" alt="1.png"></p>
<p><strong>如图:指定参数无效 还是从头开始检索</strong></p>
<h2 id="提取部分字符串"><a href="#提取部分字符串" class="headerlink" title="提取部分字符串"></a>提取部分字符串</h2><p><strong>提取部分字符串有三种方法:</strong></p>
<ul>
<li>slice(start,end);</li>
<li>substring(start,end);</li>
<li>substr(start,length);</li>
</ul>
<h3 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h3><p><code>slice()</code>提取字符串的某个部分 并且在新字符串中返回被提取的部分。</p>
<p>俩个参数:起始索引,终止索引;</p>
<p><img src="https://i.loli.net/2019/12/15/TPiOglmw8UqoxyM.png" alt="1.png"></p>
<p><strong>从2开始包括2  到5结束 不包括5</strong></p>
<p><strong>参数为负数</strong></p>
<p><img src="https://i.loli.net/2019/12/16/jvN5mPYi2Za18FO.png" alt="1.png"></p>
<p><strong>省略第二个参数</strong></p>
<p><img src="https://i.loli.net/2019/12/16/PaWOjCt2iwlU9gq.png" alt="1.png"></p>
<p><strong>省略第二个参数 则会拿到剩余的字符</strong></p>
<p><strong>从结尾计数</strong></p>
<p><img src="https://i.loli.net/2019/12/16/MHVU6iDIxhaE74f.png" alt="1.png"></p>
<p>注意:参数为负数 不适用于<strong>ie8</strong>及其更早版本</p>
<h3 id="substring-方法"><a href="#substring-方法" class="headerlink" title="substring()方法"></a>substring()方法</h3><p><code>substring()</code>类似于<code>slice()</code></p>
<p><strong>区别:</strong><code>substring()</code> 不能接受负的索引</p>
<p><strong>传入负数索引是无效的 会从起点0开始截取</strong></p>
<p><img src="https://i.loli.net/2019/12/16/JXjt6iTpgGEVLM5.png" alt="1.png"></p>
<p>同<code>slice()</code>一样,如果省略第二个参数,则将截取字符串的剩余部分</p>
<h3 id="substr-方法"><a href="#substr-方法" class="headerlink" title="substr()方法"></a>substr()方法</h3><p><code>substr()</code> 也类似于s<code>lice()</code></p>
<p><strong>区别:</strong>第二个参数 规定被提取部分的长度,第二个参数不能传入负数,因为长度不能为负数</p>
<p>参数为负,没有打印结果 打印失败</p>
<p><img src="https://i.loli.net/2019/12/16/3bm1yri84NO6wWQ.png" alt="1.png"></p>
<p>参数为正 正常截取</p>
<p><img src="https://i.loli.net/2019/12/16/fXedCJqPYnVItgO.png" alt="1.png"></p>
<p>首个参数为负 第二个参数长度指定无效  负几 截取到几个字符 这里是负2 因此 截取到2个字符</p>
<p><img src="https://i.loli.net/2019/12/16/pZ4eFQBVz3lCS1u.png" alt="1.png"></p>
<p>同<code>slice()</code>一样,如果省略第二个参数,则将截取字符串的剩余部分</p>
<h2 id="替换字符串内容"><a href="#替换字符串内容" class="headerlink" title="替换字符串内容"></a>替换字符串内容</h2><p><code>replace()</code>方法用另一个值替换在字符串中指定的值</p>
<p><strong>参数1 为原字符串中的值   参数2为替换的值</strong></p>
<p><img src="https://i.loli.net/2019/12/16/KgDBEoNQWP2nayV.png" alt="1.png"></p>
<p><strong>返回的是一个新字符串 不会改变原有字符串</strong>   <strong>默认只替换首个匹配到的字符</strong></p>
<p><strong>默认情况下</strong> <code>replace()</code>对大小写敏感</p>
<p><img src="https://i.loli.net/2019/12/16/qhvmAzbojye1wdg.png" alt="1.png"></p>
<p><strong>使用正则表达式<code>/i</code>(大小写不敏感)  **   **注意:正则表达式不带引号</strong></p>
<p><img src="https://i.loli.net/2019/12/16/bIykXZmiGdHcLjC.png" alt="1.png"></p>
<p><strong>替换所有匹配</strong></p>
<p>使用正则表达式的<code>g</code>(用于全局搜索)</p>
<p><img src="https://i.loli.net/2019/12/16/wbYmTljq6PWaI5v.png" alt="1.png"></p>
<h2 id="转为大写和小写"><a href="#转为大写和小写" class="headerlink" title="转为大写和小写"></a>转为大写和小写</h2><p><code>toUpperCase()</code>把字符串转换为大写</p>
<p><img src="https://i.loli.net/2019/12/16/pTGg5rmSIiydfMu.png" alt="1.png"></p>
<p><code>toLowerCase()</code>把字符串转换为小写</p>
<p><img src="https://i.loli.net/2019/12/16/9vJKCjlLfrN6gpq.png" alt="1.png"></p>
<h2 id="连接两个或多个字符串"><a href="#连接两个或多个字符串" class="headerlink" title="连接两个或多个字符串"></a>连接两个或多个字符串</h2><p><code>concat()</code>可用于代替加运算符</p>
<p><img src="https://i.loli.net/2019/12/16/ReAq8Vmz5YdZlg3.png" alt="1.png"></p>
<p><strong>所有的字符串方法都会返回新字符串 不会修改原始字符串.</strong></p>
<p><strong>字符串是不可变的:字符串不能更改,只能替换</strong></p>
<h2 id="删除字符串两端的空白符"><a href="#删除字符串两端的空白符" class="headerlink" title="删除字符串两端的空白符"></a>删除字符串两端的空白符</h2><p><code>trim()</code>方法删除字符串两端的空白符</p>
<p><img src="https://i.loli.net/2019/12/16/IUALYqdPmCaV5lf.png" alt="1.png"></p>
<p>注意:ie8或更低版本不支持<code>trim()</code>方法 。</p>
<p><strong>如需支持ie8或更低版本 可以使用<code>replace()</code>  需搭配正则</strong></p>
<p><img src="https://i.loli.net/2019/12/16/2bSoaMQmPrNGE3t.png" alt="1.png"></p>
<h2 id="提取字符串字符"><a href="#提取字符串字符" class="headerlink" title="提取字符串字符"></a>提取字符串字符</h2><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><p><code>charAt()</code>方法返回字符串中指定下标(位置)的字符串</p>
<p><img src="https://i.loli.net/2019/12/16/T5tuoEPLiJnpX8c.png" alt="1.png"></p>
<h3 id="charCodeAt-方法"><a href="#charCodeAt-方法" class="headerlink" title="charCodeAt()方法"></a>charCodeAt()方法</h3><p><code>charCodeAt()</code>方法返回字符串中指定索引的 <code>unicode</code> 编码</p>
<p><img src="https://i.loli.net/2019/12/16/LSFfhq1oTZPIOnN.png" alt="1.png"></p>
<h2 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h2><p><code>split()</code>将字符串转换为数组</p>
<p><img src="https://i.loli.net/2019/12/16/mhp7xLJjGRItX6w.png" alt="1.png"></p>
<p>省略分隔符  被返回的数组将包含index[0]中的整个字符串</p>
<p>如分隔符是””,被返回的数组将是间隔单个字符的数组</p>
<p><img src="https://i.loli.net/2019/12/16/sum2DXzwy6KpHe3.png" alt="1.png"></p>
<p>​        </p>
<p>​        <strong>总结:</strong>革命尚未成功 同志仍需努力  细节决定成败</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>php字符串</title>
    <url>/2019/09/29/php%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="php字符串函数的总结"><a href="#php字符串函数的总结" class="headerlink" title="php字符串函数的总结"></a>php字符串函数的总结</h1><p><strong>php字符串函数还是很难记忆的,为了之后使用方便，记录一下。</strong></p>
<h2 id="explode-字符串分割"><a href="#explode-字符串分割" class="headerlink" title="explode(字符串分割)"></a>explode(字符串分割)</h2><p><strong>使用一个字符串分割另一个字符串  结果为数组</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">'a,b,c,d'</span>; </span><br><span class="line"><span class="variable">$res</span> = explode(<span class="string">','</span>,<span class="variable">$str</span>); </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">var_dump(<span class="variable">$res</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="implode（join）"><a href="#implode（join）" class="headerlink" title="implode（join）"></a>implode（join）</h2><p><strong>将一个一维数组的值转化为字符串</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = [<span class="string">'a'</span>=&gt;<span class="number">1</span>,<span class="string">'b'</span>=&gt;<span class="number">2</span>]; </span><br><span class="line">$res = implode(<span class="string">' '</span>,$arr); </span><br><span class="line"><span class="keyword">echo</span> $res;</span><br></pre></td></tr></table></figure>

<h2 id="htmlentities"><a href="#htmlentities" class="headerlink" title="htmlentities"></a>htmlentities</h2><p><strong>将字符转换为HTML转义字符</strong></p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">"A 'quote' is &lt;b&gt;bold&lt;/b&gt;"</span>;</span><br><span class="line">//html输出: A <span class="string">'quote'</span> <span class="literal">is</span> &amp;<span class="literal">lt</span>;b&amp;<span class="literal">gt</span>;bold&amp;<span class="literal">lt</span>;/b&amp;<span class="literal">gt</span>; </span><br><span class="line">echo htmlentities(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure>

<h2 id="htmlspecialchars-decode"><a href="#htmlspecialchars-decode" class="headerlink" title="htmlspecialchars_decode"></a>htmlspecialchars_decode</h2><p><strong>将特殊的HTML实体转换回普通字符</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$str = "<span class="tag">&lt;<span class="name">p</span>&gt;</span>this -<span class="symbol">&amp;gt;</span> <span class="symbol">&amp;quot;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>\n"; </span><br><span class="line">echo htmlspecialchars_decode($str); </span><br><span class="line">*//<span class="tag">&lt;<span class="name">p</span>&gt;</span>this -&gt; "<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h2><p><strong>将特殊字符转换为HTML实体</strong></p>
<h2 id="lcfirst"><a href="#lcfirst" class="headerlink" title="lcfirst"></a>lcfirst</h2><p><strong>使第一个字符串的第一个字符小写</strong></p>
<h2 id="ucfirst"><a href="#ucfirst" class="headerlink" title="ucfirst"></a>ucfirst</h2><p><strong>使字符串的第一个字符大写</strong></p>
<h2 id="strtolower"><a href="#strtolower" class="headerlink" title="strtolower"></a>strtolower</h2><p><strong>将字符串转化为小写</strong></p>
<h2 id="strtoupper"><a href="#strtoupper" class="headerlink" title="strtoupper"></a>strtoupper</h2><p><strong>将字符串转化为大写</strong></p>
<h2 id="ucwords"><a href="#ucwords" class="headerlink" title="ucwords"></a>ucwords</h2><p><strong>将字符串中的每个单词的首字母转换为大写</strong></p>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p><strong>trim() 函数移除字符串两侧的空白字符或其他预定义字符。</strong></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="comment">//移除字符</span></span><br><span class="line">$<span class="built_in">str</span> = <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="built_in">echo</span> $<span class="built_in">str</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> trim($<span class="built_in">str</span>,<span class="string">"Hed!"</span>);</span><br><span class="line"><span class="comment">//移除空白</span></span><br><span class="line">$<span class="built_in">str</span> = <span class="string">" Hello World! "</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"不使用 trim: "</span>.$<span class="built_in">str</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"使用 trim: "</span>.trim($<span class="built_in">str</span>);</span><br></pre></td></tr></table></figure>

<p><strong>ltrim() 移除字符串左侧的空白字符或其他预定义字符</strong></p>
<p><strong>rtrim() 移除字符串右侧侧的空白字符或其他预定义字符</strong></p>
<h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str"></a>parse_str</h2><p><strong>将字符串解析成多个变量</strong></p>
<p><code>parse_str(string,array);</code></p>
<p>有两个参数 string是必须要有的 规定要解析的字符串  </p>
<p>array可写可不写。规定存储变量的数组的名称。该参数指示变量将被存储到数组中。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">parse<span class="constructor">_str(<span class="string">"name-Bill&amp;age-60"</span>,$<span class="params">myArray</span>)</span>;</span><br><span class="line">print<span class="constructor">_r($<span class="params">myArray</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<p><img src="https://i.loli.net/2019/09/29/uzmTx4i6J7UBHoM.png" alt="1.png"></p>
<h2 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace"></a>str_replace</h2><p><strong>字符串替换(区分大小写)</strong></p>
<p><strong>str_ireplace()不区分大小写 其他与str_replace一致</strong></p>
<p><strong>注意：</strong></p>
<p>如果搜索的字符串是数组，那么它将返回数组。</p>
<p>如果搜索的字符串是数组，那么它将对数组中的每个元素进行查找和替换。</p>
<p>如果同时需要对数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余元素将用空字符串进行替换</p>
<p>如果查找的是数组，而替换的是字符串，那么替代字符串将对所有查找到的值起作用。</p>
<p><strong>语法：</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">str<span class="constructor">_replace(<span class="params">find</span>,<span class="params">replace</span>,<span class="params">string</span>,<span class="params">count</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>find:必需.规定要查找的值；</strong></p>
<p><strong>replace:必需。规定替换 <em>find</em> 中的值的值。</strong></p>
<p><strong>string:必需。规定被搜索的字符串。</strong></p>
<p><strong>count:可选。对替换数进行计数的变量。</strong></p>
<p><strong>实例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = array(<span class="string">"blue"</span>,<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"yellow"</span>);</span><br><span class="line">print_r(str_replace(<span class="string">"red"</span>,<span class="string">"pink"</span>,<span class="variable">$arr</span>,<span class="variable">$i</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"替换数：<span class="variable">$i</span>"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="str-shuffle"><a href="#str-shuffle" class="headerlink" title="str_shuffle"></a>str_shuffle</h2><p><strong>随机打乱字符串</strong></p>
<h2 id="str-split"><a href="#str-split" class="headerlink" title="str_split"></a>str_split</h2><p><strong>将字符串转化为数组</strong></p>
<p><strong>语法：</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">str<span class="constructor">_split(<span class="params">string</span>,<span class="params">length</span>)</span></span><br></pre></td></tr></table></figure>

<p><strong>string:必需.规定要分割的字符串</strong></p>
<p><strong>length:可选。规定每个数组元素的长度。默认是1.</strong></p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">print_r(<span class="name">str_split</span>(<span class="string">"Shanghai"</span>,<span class="number">3</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h2><p><strong>查询字符串首次出现</strong></p>
<p><strong>stristr</strong>  <strong>不区分大小写查找字符串首次出现</strong></p>
<p><strong>语法:</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">strstr</span><span class="params">(string,search,before_search)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>string:被搜索的字符串</strong></p>
<p><strong>search:规定要搜索的字符串</strong></p>
<p><strong><em>before_search</em>:可选 默认为false 如果设置为true 返回 <em>search</em> 参数第一次出现之前的字符串部分。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">echo <span class="title">strstr</span><span class="params">(<span class="string">"Hello world!"</span>,<span class="string">"world"</span>,<span class="literal">true</span>)</span></span>; <span class="comment">//输出Hello</span></span><br></pre></td></tr></table></figure>

<h2 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags"></a>strip_tags</h2><p><strong>从字符串中去除 HTML 和 PHP 标记</strong></p>
<p><strong>语法:</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">strip<span class="constructor">_tags(<span class="params">string</span>,<span class="params">allow</span>)</span></span><br></pre></td></tr></table></figure>

<p><strong>string: 必需.规定要检查的字符串</strong></p>
<p><strong>allow:可选.规定允许的标签 可以保留</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">echo strip_tags("Hello <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>world!<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>","<span class="tag">&lt;<span class="name">b</span>&gt;</span>");</span><br></pre></td></tr></table></figure>

<h2 id="strops"><a href="#strops" class="headerlink" title="strops"></a>strops</h2><p><strong>查询字符串首次出现的位置</strong></p>
<p><strong>语法:</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">strpos</span><span class="params">(string,find,start)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>string:要搜索的字符串</strong></p>
<p><strong>find:规定要查找的字符串</strong></p>
<p><strong>start:可选,规定在何处开始搜索</strong>。<strong>(字符串位置从0开始)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">echo <span class="title">strpos</span><span class="params">(<span class="string">"You love php, I love php too!"</span>,<span class="string">"php"</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>扩展：</strong></p>
<ol>
<li>stripos:查找字符串在另一字符串中第一次出现的位置（不区分大小写）</li>
<li>strripos:查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</li>
<li>strrpos: 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</li>
</ol>
<h2 id="str-pad"><a href="#str-pad" class="headerlink" title="str_pad"></a>str_pad</h2><p><strong>字符串填充</strong></p>
<p><strong>语法:</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">str<span class="constructor">_pad(<span class="params">string</span>,<span class="params">length</span>,<span class="params">pad_string</span>,<span class="params">pad_type</span>)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><em>string</em></th>
<th align="center">必需。规定要填充的字符串。</th>
</tr>
</thead>
<tbody><tr>
<td><em>length</em></td>
<td align="center">必需。规定新的字符串长度。如果该值小于字符串的原始长度，则不进行任何操作。</td>
</tr>
<tr>
<td><em>pad_string</em></td>
<td align="center">可选。规定供填充使用的字符串。默认是空白。</td>
</tr>
<tr>
<td><em>pad_type</em></td>
<td align="center">可选。规定填充字符串的哪边。可能的值：STR_PAD_BOTH - 填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。STR_PAD_LEFT - 填充字符串的左侧。STR_PAD_RIGHT - 填充字符串的右侧。默认</td>
</tr>
</tbody></table>
<p><strong>实例:</strong></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">$<span class="built_in">str</span> = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">echo</span> str_pad($<span class="built_in">str</span>,<span class="number">30</span>,<span class="string">"."</span>,STR_PAD_LEFT);<span class="comment">//左侧</span></span><br></pre></td></tr></table></figure>

<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">$<span class="built_in">str</span> = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">echo</span> str_pad($<span class="built_in">str</span>,<span class="number">30</span>,<span class="string">".:"</span>,STR_PAD_BOTH);<span class="comment">//右侧</span></span><br></pre></td></tr></table></figure>

<h2 id="str-repeat"><a href="#str-repeat" class="headerlink" title="str_repeat"></a>str_repeat</h2><p><strong>重复一个字符串</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">echo <span class="title">str_repeat</span><span class="params">(<span class="string">"Shanghai"</span>,<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h2><p><strong>获取字符串长度</strong> </p>
<h2 id="strpbrk"><a href="#strpbrk" class="headerlink" title="strpbrk"></a>strpbrk</h2><p><strong>在字符串中查找一组字符的任何一个字符，查到后返回后面的字符</strong></p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$<span class="literal">text</span> = <span class="symbol">'This</span> <span class="keyword">is</span> a Simple <span class="literal">text</span>.';</span><br><span class="line">// 输出 <span class="string">"is is a Simple text."</span>，因为 <span class="symbol">'i</span>' 先被匹配 </span><br><span class="line">echo strpbrk($<span class="literal">text</span>, <span class="symbol">'mi</span>');</span><br></pre></td></tr></table></figure>

<h2 id="strrev"><a href="#strrev" class="headerlink" title="strrev"></a>strrev</h2><p><strong>反转字符串</strong></p>
<h2 id="substr-count"><a href="#substr-count" class="headerlink" title="substr_count()"></a>substr_count()</h2><p><strong>计算字符串出现的次数</strong></p>
<p><code>$text = &#39;This is a test&#39;;</code> </p>
<p><code>echo substr_count($text, &#39;is&#39;); // 2</code></p>
<h2 id="wordwrap"><a href="#wordwrap" class="headerlink" title="wordwrap"></a>wordwrap</h2><p><strong>按照指定长度对字符串进行折行处理</strong></p>
<p><strong>语法:</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">wordwrap(<span class="built_in">string</span>,<span class="built_in">width</span>,<span class="keyword">break</span>,cut)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><em>string</em></th>
<th align="center">必需。规定要进行折行的字符串。</th>
</tr>
</thead>
<tbody><tr>
<td><em>width</em></td>
<td align="center">可选。规定最大行宽度。默认是 75。</td>
</tr>
<tr>
<td><em>break</em></td>
<td align="center">可选。规定作为分隔符使用的字符（字串断开字符）。默认是 “\n”。</td>
</tr>
<tr>
<td><em>cut</em></td>
<td align="center">可选。规定是否对大于指定宽度的单词进行折行：FALSE - 默认。No-wrapTRUE - 折行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">'wo ca lie , zhe shi shen me gui'</span>;</span><br><span class="line"><span class="variable">$nstr</span> = wordwrap(<span class="variable">$str</span>,5,<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$nstr</span>;</span><br></pre></td></tr></table></figure>

<h2 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h2><p><strong>substr() 函数返回字符串的一部分。</strong></p>
<p><strong>语法:</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">substr(<span class="keyword">string</span>,<span class="built_in">start</span>,<span class="built_in">length</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><em>string</em></th>
<th align="center">必需。规定要返回其中一部分的字符串。</th>
</tr>
</thead>
<tbody><tr>
<td><em>start</em></td>
<td align="center">必需。规定在字符串的何处开始。正数 - 在字符串的指定位置开始负数 - 在从字符串结尾开始的指定位置开始0 - 在字符串中的第一个字符处开始</td>
</tr>
<tr>
<td><em>length</em></td>
<td align="center">可选。规定被返回字符串的长度。默认是直到字符串的结尾。正数 - 从 <em>start</em> 参数所在的位置返回的长度负数 - 从字符串末端返回的长度</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="string">'hello world hhh'</span>;</span><br><span class="line"><span class="variable">$srt</span>=substr(<span class="variable">$str</span>,0,6);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$srt</span>;</span><br></pre></td></tr></table></figure>

<h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p><strong>加密函数</strong></p>
<p><strong>以 32 字符十六进制数字形式返回散列值。</strong> </p>
<h2 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h2><p><strong>计算字符串的 sha1 散列值，默认40 字符长度的十六进制数字</strong></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel生成二维码</title>
    <url>/2019/12/11/laravel%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<h1 id="laravel生成二维码"><a href="#laravel生成二维码" class="headerlink" title="laravel生成二维码"></a>laravel生成二维码</h1><p>前段时间 涉及了laravel 以及接口 有个需求就是实现二维码的引入  网上方法很多 这里记录一下我感觉最方便 最好用的</p>
<p><img src="https://i.loli.net/2019/12/11/iIaJg3locQnpxMO.png" alt="1.png"></p>
<a id="more"></a>

<h2 id="下载qrCode类库"><a href="#下载qrCode类库" class="headerlink" title="下载qrCode类库"></a>下载qrCode类库</h2><p>在官网<a href="http://phpqrcode.sourceforge.net/中Download（下载）qrcode包，解压后里面有个phpqrcode.php复制出来放到laravel中" target="_blank" rel="noopener">http://phpqrcode.sourceforge.net/中Download（下载）qrcode包，解压后里面有个phpqrcode.php复制出来放到laravel中</a></p>
<h3 id="laravel引入第三方类库"><a href="#laravel引入第三方类库" class="headerlink" title="laravel引入第三方类库"></a>laravel引入第三方类库</h3><p><strong>把phpqrcode.php文件复制到laravel项目的app目录下的类库目录，我这里是（Lib文件夹）</strong></p>
<p><strong>然后 找到laravel项目根目录下的 composer.json文件 进行修改</strong></p>
<p><img src="https://i.loli.net/2019/12/11/fRMwxuXE5tQgWNZ.png" alt="1.png"></p>
<p><strong>在项目根目录下执行命令</strong></p>
<p><img src="https://i.loli.net/2019/12/11/AMjcueOC2V9Kk4J.png" alt="2.png"></p>
<p><strong>命令执行成功之后 在控制器引入</strong></p>
<p><img src="https://i.loli.net/2019/12/11/rfRA69iUVh8m5YO.png" alt="1.png"></p>
<p><strong>到这里你就引入成功了 已经可以使用二维码库了</strong></p>
<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p><strong>我这里写了一个接口 来测试二维码的生成是否成功</strong></p>
<p><img src="https://i.loli.net/2019/12/11/7jefT6vpSQwP1MG.png" alt="1.png"></p>
<h3 id="使用postman测试接口"><a href="#使用postman测试接口" class="headerlink" title="使用postman测试接口"></a><strong>使用postman测试接口</strong></h3><p><strong>传入的参数</strong></p>
<p><img src="https://i.loli.net/2019/12/11/hufAYs4ErGnPQoa.png" alt="1.png"></p>
<p><strong>返回结果：</strong></p>
<p><img src="https://i.loli.net/2019/12/11/YdRDr9lEvO5bn1g.png" alt="2.png"></p>
<p><strong>点击生成的路径可以看到二维码</strong>:</p>
<p><img src="https://i.loli.net/2019/12/11/b1UEOFVfSlHqXAG.png" alt="2.png"></p>
<p><strong>在文件夹下也同样生成了:</strong></p>
<p><img src="https://i.loli.net/2019/12/11/LyX3Ojf9P8FHoJp.png" alt="1.png"></p>
<p><strong>现在 就可以拿出手机扫描二维码了 大功告成 ！ ！！</strong></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据表基本操作</title>
    <url>/2019/05/14/mysql/</url>
    <content><![CDATA[<h1 id="mysql表的连接与查询"><a href="#mysql表的连接与查询" class="headerlink" title="mysql表的连接与查询"></a>mysql表的连接与查询</h1><p><img src="https://i.loli.net/2019/05/14/5cdaba299ea2a20142.jpg" alt="timg (2).jpg"></p>
<p>mysql表的连接有笛卡尔积连接，内连接，外连接，子连接查询几种。</p>
<a id="more"></a>

<h2 id="笛卡尔积连接"><a href="#笛卡尔积连接" class="headerlink" title="笛卡尔积连接"></a>笛卡尔积连接</h2><p>笛卡尔积连接又称为交叉连接。将两张表的记录进行一个相乘的操作查询出来的结果就是笛卡尔积查询,如果左表有n条记录,右表有m条记录,笛卡尔积查询出有n*m条记录,其中往往包含了很多错误的数据,所以这种查询方式并不常用。</p>
<p>语法：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名一，表名二 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>介绍：（典型的联接运算，使用像 = 或 &lt;&gt; 之类的比较运算符）。包括相等联接和自然联接。<br>内联接使用比较运算符根据每个表共有的列的值匹配两个表中的行。例如，检索 students和courses表中学生标识号相同的所有行。 </p>
<p>关键字：inner join on</p>
<p>语法：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a_table a <span class="keyword">inner</span> <span class="keyword">join</span> b_table  b <span class="keyword">on</span> a.a_id=b.b_id;</span><br></pre></td></tr></table></figure>

<p>说明：组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集（阴影）部分。</p>
<p><img src="https://i.loli.net/2019/05/09/5cd38f7866a0f.png" alt="QQ截图20190509102440.png"></p>
<h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><p>说明：值大于于不等于之时 可以使用between语句来限制条件</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> 列名 BETWEEN <span class="params">...</span> <span class="literal">AND</span> <span class="params">...</span></span><br></pre></td></tr></table></figure>

<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>说明：自连接就是说，在同一个表中，看做是两个表，可以看成一张表的两个副本之间的连接。在自连接中，必须为表指定两个别名，使之在逻辑上成为两个表。</p>
<p>例子：</p>
<p><img src="https://i.loli.net/2019/05/15/5cdb64ee2012a27117.png" alt="QQ截图20190515090117.png"></p>
<h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><p>关键字：left join on</p>
<p>语法：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  * <span class="keyword">FROM</span> a_table a <span class="keyword">left</span> <span class="keyword">join</span> b_table b <span class="keyword">ON</span> a.a_id = b.b_id;</span><br></pre></td></tr></table></figure>

<p>说明： left join 是left outer join的简写，它的全称是左外连接，是外连接中的一种。 左(外)连接，左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</p>
<p>例子：<img src="https://i.loli.net/2019/05/15/5cdb6b14a101235149.png" alt="QQ截图20190515092736.png"></p>
<h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><p>关键字：right join on</p>
<p>语法：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  * <span class="keyword">FROM</span> a_table a <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> b_table b <span class="keyword">on</span> a.a_id = b.b_id;</span><br></pre></td></tr></table></figure>

<p>说明：right join是right outer join的简写，它的全称是右外连接，是外连接中的一种。与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</p>
<p>例子：<img src="https://i.loli.net/2019/05/15/5cdb6b8139e7453598.png" alt="QQ截图20190515092930.png"></p>
<h2 id="子连接查询"><a href="#子连接查询" class="headerlink" title="子连接查询"></a>子连接查询</h2><h3 id="嵌套子查询"><a href="#嵌套子查询" class="headerlink" title="嵌套子查询"></a>嵌套子查询</h3><p>定义：一个内层查询语句(select-from-where)块可以嵌套在另外一个外层查询块的where子句中，其中外层查询也称为父查询，主查询。内层查询也称子查询，从查询。子查询一般不使用order by子句，只能对最终查询结果进行排序。在一个SELECT 语句的WHERE 子句或HAVING 子句中嵌套另一个SELECT 语句的查询称为嵌套查询，又称子查询。</p>
<p>工作方式：嵌套查询的工作方式是：先处理内查询，由内向外处理，外层查询利用内层查询的结果嵌套查询不仅仅可以用于父查询select语句使用。还可以用于insert、update、delete语句或其他子查询中。</p>
<p>分类：</p>
<p><img src="https://i.loli.net/2019/05/15/5cdb6d92ceee223613.png" alt="QQ截图20190513204348.png"></p>
<h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><p>说明：子查询得到的结果是一行一列 是指子查询返回的是单一值的标量，如一个数字或一个字符串，也是子查询中最简单的返回形式。 可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧 </p>
<p>例子： 标题号为1的</p>
<p><img src="https://i.loli.net/2019/05/15/5cdb9d011218a61517.png" alt="QQ截图20190515130020.png"></p>
<h3 id="列子查询-多行子查询"><a href="#列子查询-多行子查询" class="headerlink" title="列子查询(多行子查询)"></a>列子查询(多行子查询)</h3><p>说明:指子查询返回的结果集是 N 行一列，该结果通常来自对表的某个字段查询返回。 可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧 可以使用 IN、ANY、SOME 和 ALL 操作符，不能直接使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些比较标量结果的操作符。 </p>
<p>多行操作符：</p>
<p><img src="https://i.loli.net/2019/05/15/5cdb99744bd9973377.png" alt="QQ截图20190513212436.png"></p>
<p>注意：any操作符可以替换为聚集函数min()   all操作符可以替换为聚集函数max()</p>
<p>例子：语文数学都及格的</p>
<p><img src="https://i.loli.net/2019/05/15/5cdb9d05b626690348.png" alt="QQ截图20190515130038.png"></p>
<p>例子：使用聚集函数</p>
<p><img src="https://i.loli.net/2019/05/15/5cdb9f6792fcb11591.png" alt="QQ截图20190515131042.png"></p>
<p>这个是等同于any操作符的 </p>
<p> <img src="https://i.loli.net/2019/05/15/5cdb9f9b7f5ba55528.png" alt="QQ截图20190515131013.png"></p>
<h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p>说明：子查询得到的结果是多列一行(多行多列)  用的较少 需要满足在where后面括号里的删选条件要等同于子查询语句才能使用。</p>
<p>例子：</p>
<p><img src="https://i.loli.net/2019/05/15/5cdba12b2251f41060.png" alt="QQ截图20190515131816.png"></p>
<h3 id="Exists子查询"><a href="#Exists子查询" class="headerlink" title="Exists子查询"></a>Exists子查询</h3><p>Exists和not exists子查询：</p>
<p>exists语法：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">exists</span> (子查询)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>Exists用来检测数据库对象是否存在</li>
<li>Exists关键字后面的参数是任意的子查询</li>
<li>子查询有返回结果： EXISTS子查询结果为TRUE</li>
<li>子查询无返回结果： EXISTS子查询结果为FALSE, 外层查询不执行</li>
</ul>
<p>not exists：</p>
<p>和exists实现相反操作</p>
<p>例子：查询所有选修了c01号课程的学生信息：</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/05/15/5cdba273ec0f594757.png" alt="QQ截图20190515132354.png"></h3><h3 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h3><p>说明：因为select的查询结果是元组的集合，所以可以对select的结果进行集合操作</p>
<p>操作符：union</p>
<p>注意事项：</p>
<ol>
<li><p>通过union连接的SQL它们分别单独取出的列数必须相同；</p>
</li>
<li><p>不要求合并的表列名称相同时，以第一个sql 表列名为准；</p>
</li>
<li><p>被union 连接的sql 子句，单个子句中不用写order by ，因为不会有排序的效果。但可以对最终的结果集进行排序； </p>
</li>
<li><p>(select id,name from A order by id) union all (select id,name from B order by id); //没有排序效果</p>
</li>
<li><p>每个查询表达式应具有相同的数据类型，或者可以自动将他们转化为相同的数据类型</p>
<p>例子：<img src="https://i.loli.net/2019/05/15/5cdba697e952d33305.png" alt="QQ截图20190515134132.png"></p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://i.loli.net/2019/05/15/5cdbaa5ab33c167889.png" alt="QQ截图20190515135734.png"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础命令</title>
    <url>/2020/04/10/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/04/13/vHaVfq1IUDYOx6n.jpg" alt="xl-2017-linux-1.jpg"></p>
<a id="more"></a>

<h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>linux 一切皆文件</p>
<p><img src="https://i.loli.net/2020/04/10/wp8lrcYZ9fhEjsq.png" alt="11.png"></p>
<h2 id="关机-amp-重启命令"><a href="#关机-amp-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>shutdown  -h now  立刻关机</p>
<p>shutdown  -h 1      1分钟后关机</p>
<p>shutdown  -r  now  重新启动</p>
<p>halt                         关机</p>
<p>reboot                     重新启动</p>
<p>sync                        把内存的数据同步到磁盘</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</strong></p>
<h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可</p>
<p>以利用普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.</p>
<p> 在提示符下输入 logout 即可注销用户</p>
<h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><p>logout 注销指令在图形运行级别无效，在 运行级别 3下有效.</p>
<h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p><code>语法: useradd 用户名</code></p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>当创建用户成功后，会自动的创建和用户同名的家目录</p>
<p>也可以通过 <code>useradd -d 指定目录 新的用户名</code>，给新创建的用户指定家目录</p>
<h3 id="指定-修改密码"><a href="#指定-修改密码" class="headerlink" title="指定/修改密码"></a>指定/修改密码</h3><p>语法: passwd 用户名</p>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>语法:userdel 用户名</p>
<p>userdel -r 用户名       删除用户家目录以及用户</p>
<h2 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h2><h2 id="语法-id-用户名"><a href="#语法-id-用户名" class="headerlink" title="语法: id  用户名"></a><code>语法: id  用户名</code></h2><p><strong>用户不存在时 返回无此用户</strong></p>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在操作Linux中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如root</p>
<p><code>语法：su -切换的用户名</code></p>
<h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p>
<p>当需要返回到原来用户时，使用exit指令</p>
<h2 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户/登录用户"></a>查看当前用户/登录用户</h2><p><code>语法: whoami</code></p>
<h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>类似于角色，系统可以对有共性的多个用户进行统一的管理</p>
<h3 id="新增组"><a href="#新增组" class="headerlink" title="新增组"></a>新增组</h3><p><code>指令:groupadd 组名</code></p>
<h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><p><code>指令:groupdel 组名</code></p>
<h3 id="增加用户时加上组"><a href="#增加用户时加上组" class="headerlink" title="增加用户时加上组"></a>增加用户时加上组</h3><p><code>指令:useradd -g 用户组 用户名</code></p>
<h3 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h3><p><code>指令:usermod -g 用户组 用户名</code></p>
<h3 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a><strong>用户和组的相关文件</strong></h3><p><strong>/etc/passwd</strong> <strong>文件</strong></p>
<p><strong>用户（user）的配置文件，记录用户的各种信息</strong></p>
<p><strong>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</strong></p>
<p><strong>/etc/shadow</strong> <strong>文件</strong></p>
<p><strong>口令的配置文件</strong></p>
<p><strong>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</strong></p>
<p><strong>/etc/group</strong> <strong>文件</strong></p>
<p><strong>组(group)的配置文件，记录Linux包含的组的信息</strong></p>
<p><strong>每行含义：组名:口令:组标识号:组内用户列表</strong></p>
<h2 id="linux运行级别"><a href="#linux运行级别" class="headerlink" title="linux运行级别"></a>linux运行级别</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a><strong>基本介绍</strong></h3><p>运行级别说明：</p>
<p>0 ：关机</p>
<p>1 ：单用户【找回丢失密码】 </p>
<p>2：多用户状态没有网络服务</p>
<p>3：多用户状态有网络服务</p>
<p>4：系统未使用保留给用户</p>
<p>5：图形界面</p>
<p>6：系统重启</p>
<p>常用运行级别是3和5 ，要修改默认的运行级别可改文件</p>
<p>/etc/inittab的id:5:initdefault:这一行中的数字</p>
<p><code>命令：init [012356]  直接切换用户级别</code></p>
<h2 id="linux帮助指令"><a href="#linux帮助指令" class="headerlink" title="linux帮助指令"></a>linux帮助指令</h2><h3 id="man-获得帮助信息"><a href="#man-获得帮助信息" class="headerlink" title="man 获得帮助信息"></a><strong>man</strong> <strong>获得帮助信息</strong></h3><p><code>基本语法   man [命令或配置文件]（功能描述：获得帮助信息）</code></p>
<h3 id="help指令"><a href="#help指令" class="headerlink" title="help指令"></a>help指令</h3><p><code>基本语法   help 命令 （功能描述：获得shell内置命令的帮助信息）</code> </p>
<p><strong>当然 像我这样的英语渣渣还是百度 谷歌最靠谱</strong></p>
<h2 id="linux文件目录操作"><a href="#linux文件目录操作" class="headerlink" title="linux文件目录操作"></a>linux文件目录操作</h2><h3 id="pwd指令"><a href="#pwd指令" class="headerlink" title="pwd指令"></a>pwd指令</h3><p><code>基本语法      pwd   (功能描述：显示当前工作目录的绝对路径)</code> </p>
<h3 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a>ls指令</h3><p><code>基本语法   ls  [选项]    [目录或是文件]</code> </p>
<p>常用选项</p>
<p>-a ：显示当前目录所有的文件和目录，包括隐藏的。</p>
<p>-l ：以列表的方式显示信息 显示详细信息</p>
<h3 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a>cd指令</h3><p><code>基本语法  cd [参数]   (功能描述：切换到指定目录)</code> </p>
<p><strong>常用参数</strong></p>
<p>绝对路径和相对路径</p>
<p>cd ~ 或者cd ：回到自己的家目录</p>
<p>cd .. 回到当前目录的上一级目录</p>
<h3 id="mkdir指令"><a href="#mkdir指令" class="headerlink" title="mkdir指令"></a>mkdir指令</h3><p><strong>mkdir指令用于创建目录</strong></p>
<p><code>基本语法   mkdir [选项] 要创建的目录</code></p>
<p><strong>常用选项</strong></p>
<p>-p ：创建多级目录</p>
<h3 id="rmdir指令"><a href="#rmdir指令" class="headerlink" title="rmdir指令"></a>rmdir指令</h3><p><strong>rmdir指令删除空目录</strong></p>
<p><code>基本语法   rmdir [选项] 要删除的空目录</code> </p>
<p><strong>细节</strong></p>
<p>rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p>
<p>提示：如果需要删除非空目录，需要使用 rm -rf  要删除的目录</p>
<h3 id="touch指令"><a href="#touch指令" class="headerlink" title="touch指令"></a>touch指令</h3><p><strong>touch指令创建空文件</strong></p>
<p><code>基本语法  touch 文件名称</code></p>
<h3 id="cp指令"><a href="#cp指令" class="headerlink" title="cp指令"></a>cp指令</h3><p><strong>cp 指令拷贝文件到指定目录</strong></p>
<p><code>基本语法   cp [选项] source dest   [复制的文件或目录 指定的目录]</code></p>
<p><strong>常用选项</strong></p>
<p>-r ：递归复制整个文件夹 </p>
<p>细节</p>
<p>强制覆盖不提示的方法：\cp</p>
<h3 id="rm指令"><a href="#rm指令" class="headerlink" title="rm指令"></a>rm指令</h3><p><strong>rm 指令移除文件或目录</strong> </p>
<p>基本语法</p>
<p><code>rm [选项] 要删除的文件或目录</code></p>
<p><strong>常用选项</strong></p>
<p><code>-r ：递归删除整个文件夹</code> </p>
<p><code>-f ： 强制删除不提示</code></p>
<h3 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a>mv指令</h3><p><strong>mv 移动文件与目录或重命名</strong> </p>
<p><code>mv oldNameFile newNameFile (功能描述：重命名)</code></p>
<p><code>mv /temp/movefile /targetFolder (功能描述：移动文件)</code> </p>
<h3 id="cat指令"><a href="#cat指令" class="headerlink" title="cat指令"></a>cat指令</h3><p><strong>cat 查看文件内容</strong> </p>
<p><code>基本语法  cat [选项] 要查看的文件</code></p>
<p><strong>常用选项</strong></p>
<p><code>-n ：显示行号</code></p>
<h3 id="more指令"><a href="#more指令" class="headerlink" title="more指令"></a>more指令</h3><p><strong>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。</strong></p>
<p><code>基本语法  more 要查看的文件</code></p>
<p><strong>操作说明</strong></p>
<p><img src="https://i.loli.net/2020/04/10/4ACSOsuIfm8dPYl.png" alt="11.png"></p>
<h3 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a>less指令</h3><p><strong>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支 持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</strong></p>
<p><code>基本语法  less 要查看的文件</code></p>
<p><strong>操作说明</strong></p>
<p><img src="https://i.loli.net/2020/04/10/9JOgESveBHbm2Qi.png" alt="11.png"></p>
<h3 id="echo指令"><a href="#echo指令" class="headerlink" title="echo指令"></a>echo指令</h3><p><strong>echo输出内容到控制台。</strong> </p>
<p><code>基本语法   echo [选项] [输出内容]</code> </p>
<h3 id="head指令"><a href="#head指令" class="headerlink" title="head指令"></a>head指令</h3><p><strong>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</strong> </p>
<p><code>基本语法   head 文件     (功能描述：查看文件头10行内容)</code></p>
<p><code>head -n 5 文件     (功能描述：查看文件头5行内容，5可以是任意行数)</code> </p>
<h3 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a>tail指令</h3><p><strong>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的前10行内容</strong></p>
<p><strong>基本语法</strong></p>
<p> <code>tail 文件 （功能描述：查看文件头10行内容）</code></p>
<p><code>tail -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数）</code></p>
<p><code>tail -f 文件 （功能描述：实时追踪该文档的所有更新）</code></p>
<h3 id="‘-gt-’指令和-‘-gt-gt-’指令"><a href="#‘-gt-’指令和-‘-gt-gt-’指令" class="headerlink" title="‘&gt;’指令和 ‘&gt;&gt;’指令"></a>‘&gt;’指令和 ‘&gt;&gt;’指令</h3><p><strong>&gt; 输出重定向和 &gt;&gt; 追加</strong> </p>
<p><strong>基本语法</strong></p>
<p> <code>ls -l &gt;文件  （功能描述：列表的内容写入文件a.txt中（覆盖写））</code></p>
<p> <code>ls -al &gt;&gt;文件  （功能描述：列表的内容追加到文件aa.txt的末尾）</code></p>
<p><code>cat 文件1 &gt; 文件2  （功能描述：将文件1的内容覆盖到文件2）</code></p>
<p><code>echo &quot;内容&quot;&gt;&gt; 文件</code> </p>
<h3 id="ln指令"><a href="#ln指令" class="headerlink" title="ln指令"></a>ln指令</h3><p><strong>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</strong></p>
<p><strong>基本语法</strong></p>
<p><code>ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</code></p>
<p><strong>实例</strong></p>
<p> 在/home 目录下创建一个软连接 linkToRoot，连接到 /root 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ ~]# cd /home</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# ln -s /root linkToroot</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# ll</span><br><span class="line">total 4</span><br><span class="line">lrwxrwxrwx 1 root root    5 Apr 10 16:54 linkToroot -&gt; /root</span><br><span class="line">drwx------ 2 www  www  4096 Mar 11 18:10 www</span><br></pre></td></tr></table></figure>

<p><strong>细节</strong></p>
<p>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ ~]# cd /home/linkToroot</span><br><span class="line">[root@iZf1urhaqia9qzZ linkToroot]# pwd</span><br><span class="line">/home/linkToroot</span><br></pre></td></tr></table></figure>

<h3 id="history指令"><a href="#history指令" class="headerlink" title="history指令"></a>history指令</h3><p><strong>查看已经执行过的历史命令,也可以执行历史指令</strong></p>
<p><strong>基本语法</strong></p>
<p><code>history （功能描述：查看已经执行过历史命令）</code></p>
<p><strong>显示所有的历史命令</strong></p>
<p><img src="https://i.loli.net/2020/04/10/Bky8pds7q6HDKaS.png" alt="11.png"></p>
<p><strong>显示最近使用过的10个指令</strong></p>
<p><img src="https://i.loli.net/2020/04/10/EQVi8ezBUw6t7ph.png" alt="11.png"></p>
<p><strong>执行历史编号为1020的指令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# !1020</span><br><span class="line">ll</span><br><span class="line">total 4</span><br><span class="line">drwx------ 2 www www 4096 Mar 11 18:10 www</span><br></pre></td></tr></table></figure>

<h2 id="linux时间日期指令"><a href="#linux时间日期指令" class="headerlink" title="linux时间日期指令"></a>linux时间日期指令</h2><h3 id="date指令–显示当前日期"><a href="#date指令–显示当前日期" class="headerlink" title="date指令–显示当前日期"></a>date指令–显示当前日期</h3><p><strong>基本语法</strong></p>
<ul>
<li>​    date  （功能描述：显示当前时间）</li>
<li>​    date +%Y （功能描述：显示当前年份）</li>
<li>​    date +%m （功能描述：显示当前月份）</li>
<li>​    date +%d （功能描述：显示当前是哪一天）</li>
<li>​    date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</li>
</ul>
<h3 id="date指令–设置日期"><a href="#date指令–设置日期" class="headerlink" title="date指令–设置日期"></a>date指令–设置日期</h3><p><strong>基本语法</strong></p>
<p><code>date -s 字符串时间</code></p>
<h3 id="cal指令"><a href="#cal指令" class="headerlink" title="cal指令"></a>cal指令</h3><p><strong>查看日历指令</strong></p>
<p><strong>基本语法</strong></p>
<p><code>cal [选项]  （功能描述：不加选项，显示本月日历)</code></p>
<p><code>cal 2021 （显示2021全部日历）</code></p>
<h2 id="linux搜索查找指令"><a href="#linux搜索查找指令" class="headerlink" title="linux搜索查找指令"></a>linux搜索查找指令</h2><h3 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h3><p><strong>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端</strong></p>
<p><strong>基本语法</strong></p>
<p><code>find [搜索范围] [选项]</code> </p>
<p><strong>选项说明</strong> </p>
<p><img src="https://i.loli.net/2020/04/10/KkQTD8mn6gUZ2sp.png" alt="11.png"></p>
<p> <strong>按文件名：根据名称查找/root 目录下的.sh文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# find /root -name *.sh</span><br><span class="line">/root/install.sh</span><br><span class="line">/root/libsodium-stable/build-aux/ltmain.sh</span><br><span class="line">/root/libsodium-stable/autogen.sh</span><br><span class="line">/root/libsodium-stable/test/constcheck.sh</span><br></pre></td></tr></table></figure>

<p><strong>按拥有者：查找/opt目录下，用户名称为root的文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ opt]# find /opt -user root</span><br><span class="line">/opt</span><br></pre></td></tr></table></figure>

<p><strong>查找整个linux系统下大于200m的文件（+n 大于 -n小于 n等于）</strong></p>
<p><code>find / -size +20M</code></p>
<h3 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a>locate指令</h3><p><strong>locaate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径</strong></p>
<p><strong>的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。</strong></p>
<p><strong>为了保证查询结果的准确度，管理员必须定期更新locate时刻</strong></p>
<p><strong>基本语法</strong></p>
<p><code>locate 搜索文件</code> </p>
<p><strong>特别说明</strong></p>
<p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate</p>
<p>数据库</p>
<h3 id="grep指令和-管道符号"><a href="#grep指令和-管道符号" class="headerlink" title="grep指令和 管道符号 |"></a>grep指令和 管道符号 |</h3><p><strong>grep 过滤查找 ， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</strong> </p>
<p>基本语法</p>
<p><code>grep [选项] 查找内容 源文件</code></p>
<p>常用选项</p>
<p><strong>-n  显示匹配行及行号。</strong></p>
<p><strong>-i   忽略字母大小写</strong></p>
<p>在test.txt 文件中，查找”yes”  所在行，并且显示行号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ ~]# cat test.txt | grep -ni yes</span><br><span class="line">1:yes</span><br><span class="line">2:yes</span><br><span class="line">3:Yes</span><br><span class="line">[root@iZf1urhaqia9qzZ ~]# cat test.txt | grep -n yes</span><br><span class="line">1:yes</span><br><span class="line">2:yes</span><br><span class="line">[root@iZf1urhaqia9qzZ ~]# grep -n yes test.txt</span><br><span class="line">1:yes</span><br><span class="line">2:yes</span><br></pre></td></tr></table></figure>

<h2 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h2><h3 id="vi和vim的基本介绍"><a href="#vi和vim的基本介绍" class="headerlink" title="vi和vim的基本介绍"></a><strong>vi和vim的基本介绍</strong></h3><p>所有的Linux 系统都会内建vi 文本编辑器。</p>
<p>Vim 具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别</p>
<p>语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别</p>
<p>丰富，在程序员中被广泛使用。</p>
<h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式:"></a><strong>正常模式</strong>:</h3><p>以vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，你可以使用</p>
<p>『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，</p>
<p>也可以使用『复制、贴上』来处理你的文件数据。</p>
<h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式:"></a><strong>插入模式</strong>:</h3><p>按下i, I, o, O, a, A, r, R等任何一个字母之后才会进入编辑模式, 一般来说按i即可.</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a><strong>命令行模式</strong></h3><p>在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开vim 、显示行号等的</p>
<p>动作则是在此模式中达成的！</p>
<h3 id="vim模式的相互切换"><a href="#vim模式的相互切换" class="headerlink" title="vim模式的相互切换"></a>vim模式的相互切换</h3><p><img src="https://i.loli.net/2020/04/10/xqZGsHQEUMY7cTL.png" alt="11.png"></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="vim查找文本"><a href="#vim查找文本" class="headerlink" title="vim查找文本"></a>vim查找文本</h4><p><img src="https://i.loli.net/2020/04/10/glQbahYsRWCAqIM.png" alt="11.png"></p>
<h4 id="vim替换文本"><a href="#vim替换文本" class="headerlink" title="vim替换文本"></a>vim替换文本</h4><p><img src="https://i.loli.net/2020/04/10/n4mLYyDMg7R6Ulx.png" alt="22.png"></p>
<h3 id="vim删除文本"><a href="#vim删除文本" class="headerlink" title="vim删除文本"></a>vim删除文本</h3><p><img src="https://i.loli.net/2020/04/10/n62TBpgavO4qhXK.png" alt="11.png"></p>
<h4 id="vim复制和粘贴文本"><a href="#vim复制和粘贴文本" class="headerlink" title="vim复制和粘贴文本"></a>vim复制和粘贴文本</h4><p><img src="https://i.loli.net/2020/04/10/C6hXrc3LaTlf5N4.png" alt="11.png"></p>
<h4 id="vim保存退出文本"><a href="#vim保存退出文本" class="headerlink" title="vim保存退出文本"></a>vim保存退出文本</h4><p><img src="https://i.loli.net/2020/04/10/6P2qERTeladrUMi.png" alt="11.png"></p>
<h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><h3 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip/gunzip  指令"></a>gzip/gunzip  指令</h3><p>gzip 用于压缩文件，gunzip 用于解压的</p>
<p><strong>基本语法</strong></p>
<p><code>gzip 文件  （功能描述：压缩文件，只能将文件压缩为*.gz文件）</code></p>
<p><code>gunzip 文件.gz  （功能描述：解压缩文件命令）</code></p>
<h3 id="zip-unzip-指令"><a href="#zip-unzip-指令" class="headerlink" title="zip/unzip 指令"></a><strong>zip/unzip</strong> 指令</h3><p>zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的</p>
<p><strong>基本语法</strong></p>
<p><code>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）</code></p>
<p><code>unzip [选项] XXX.zip （功能描述：解压缩文件）</code> </p>
<p><strong>zip常用选项</strong></p>
<p><code>-r：递归压缩，即压缩目录</code></p>
<p><strong>unzip的常用选项</strong></p>
<p><code>-d&lt;目录&gt; ：指定解压后文件的存放目录</code></p>
<h3 id="tar-指令"><a href="#tar-指令" class="headerlink" title="tar 指令"></a><strong>tar</strong> 指令</h3><p>tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件</p>
<p><strong>基本语法</strong></p>
<p><code>tar [选项] XXX.tar.gz 打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz)</code> </p>
<p><img src="https://i.loli.net/2020/04/10/iBeVZxCRWFP93l6.png" alt="11.png"></p>
<p><strong>实例:压缩多个文件，将 /home/a.txt 和 /home/b.txt 压缩成 a.tar.gz</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# tar -zcvf a.tar.gz a.txt b.txt</span><br><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root  118 Apr 10 18:13 a.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root    0 Apr 10 18:13 a.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Apr 10 18:13 b.txt</span><br><span class="line">drwx------ 2 www  www  4096 Mar 11 18:10 www</span><br></pre></td></tr></table></figure>

<p> <strong>将/home 的文件夹 压缩成 myhome.tar.gz</strong></p>
<p><code>tar -zcvf myhome.tar.gz /home</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root  118 Apr 10 18:13 a.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root    0 Apr 10 18:13 a.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Apr 10 18:13 b.txt</span><br><span class="line">-rw-r--r-- 1 root root  739 Apr 10 18:15 myhome.tar.gz</span><br><span class="line">drwx------ 2 www  www  4096 Mar 11 18:10 www</span><br></pre></td></tr></table></figure>

<p><strong>将myhome.tar.gz解压到root目录下</strong></p>
<p><code>tar -zxvf myhome.tar.gz -C /root</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# ll /root</span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x  3 root root  4096 Apr 10 18:13 home</span><br><span class="line">-rw-r--r--  1 root root 20078 Mar  4 16:48 install.sh</span><br><span class="line">drwxr-xr-x 12 root www   4096 Mar 12 10:33 libsodium-stable</span><br><span class="line">drwxr-xr-x  3 root root  4096 Apr  9 15:37 php</span><br><span class="line">-rw-r--r--  1 root root    61 Apr 10 18:01 test.txt</span><br></pre></td></tr></table></figure>

<h2 id="Linux组基本介绍"><a href="#Linux组基本介绍" class="headerlink" title="Linux组基本介绍"></a>Linux组基本介绍</h2><p><strong>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件 有所有者、所在组、其它组的概念</strong></p>
<h3 id="所有者"><a href="#所有者" class="headerlink" title="所有者"></a>所有者</h3><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者</p>
<p><strong>查看文件的所有者</strong></p>
<p><code>指令:ls -ahl</code>  <code>ll</code></p>
<p><strong>修改文件所有者</strong></p>
<p><code>指令：chown 用户名 文件名</code></p>
<h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><p><code>指令 groupadd 组名</code></p>
<p><strong>应用实例</strong></p>
<p>创建一个组, ,monster </p>
<p>创建一个用户 fox ，并放入到 monster组中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# groupadd monster</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# useradd -g monster fox</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root     118 Apr 10 18:13 a.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:13 a.txt</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:13 b.txt</span><br><span class="line">drwx------ 2 fox  monster 4096 Apr 10 18:39 fox</span><br><span class="line">-rw-r--r-- 1 root root     739 Apr 10 18:15 myhome.tar.gz</span><br><span class="line">drwx------ 2 www  www     4096 Mar 11 18:10 www</span><br></pre></td></tr></table></figure>

<h3 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件/目录 所在组"></a>文件/目录 所在组</h3><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组</p>
<h3 id="修改文件所在的组"><a href="#修改文件所在的组" class="headerlink" title="修改文件所在的组"></a>修改文件所在的组</h3><p><code>chgrp 组名 文件名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ home]# ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root     118 Apr 10 18:13 a.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:13 a.txt</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:13 b.txt</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:43 c.txt</span><br><span class="line">drwx------ 2 fox  monster 4096 Apr 10 18:39 fox</span><br><span class="line">-rw-r--r-- 1 root root     739 Apr 10 18:15 myhome.tar.gz</span><br><span class="line">drwx------ 2 www  www     4096 Mar 11 18:10 www</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# chgrp monster c.txt</span><br><span class="line">[root@iZf1urhaqia9qzZ home]# ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root     118 Apr 10 18:13 a.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:13 a.txt</span><br><span class="line">-rw-r--r-- 1 root root       0 Apr 10 18:13 b.txt</span><br><span class="line">-rw-r--r-- 1 root monster    0 Apr 10 18:43 c.txt</span><br><span class="line">drwx------ 2 fox  monster 4096 Apr 10 18:39 fox</span><br><span class="line">-rw-r--r-- 1 root root     739 Apr 10 18:15 myhome.tar.gz</span><br><span class="line">drwx------ 2 www  www     4096 Mar 11 18:10 www</span><br></pre></td></tr></table></figure>

<h3 id="其它组"><a href="#其它组" class="headerlink" title="其它组"></a><strong>其它组</strong></h3><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p>
<h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a><strong>改变用户所在组</strong></h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组。</p>
<p><strong>改变用户所在组</strong></p>
<p>​     usermod –g 组名 用户名</p>
<p>​     usermod –d 目录名 用户名 改变该用户登陆的初始目录</p>
<h2 id="linux权限的基本介绍"><a href="#linux权限的基本介绍" class="headerlink" title="linux权限的基本介绍"></a>linux权限的基本介绍</h2><p><code>ls -l 中显示的内容如下</code></p>
<p><code>drwxr-xr-x  3 root root  4096 Apr 10 18:13 home</code></p>
<p><strong>0-9位说明</strong></p>
<ul>
<li>第0位确定文件类型(d, - , l , c , b)</li>
<li>第1-3位确定所有者（该文件的所有者）拥有该文件的权限。—User</li>
<li>第4-6位确定所属组（同用户组的用户）拥有该文件的权限，—Group</li>
<li>第7-9位确定其他用户拥有该文件的权限 —Other</li>
</ul>
<h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><h4 id="rwx作用到文件"><a href="#rwx作用到文件" class="headerlink" title="rwx作用到文件"></a>rwx作用到文件</h4><ol>
<li>[ r ]代表可读(read): 可以读取,查看</li>
<li>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是</li>
<li>对该文件所在的目录有写权限，才能删除该文件.</li>
<li>[ x ]代表可执行(execute):可以被执行</li>
</ol>
<h4 id="rwx作用到目录"><a href="#rwx作用到目录" class="headerlink" title="rwx作用到目录"></a>rwx作用到目录</h4><ol>
<li>[ r ]代表可读(read): 可以读取，ls查看目录内容</li>
<li>[ w ]代表可写(write): 可以修改,目录内创建+删除+重命名目录</li>
<li>[ x ]代表可执行(execute):可以进入该目录</li>
</ol>
<h3 id="文件及目录权限实际案例"><a href="#文件及目录权限实际案例" class="headerlink" title="文件及目录权限实际案例"></a><strong>文件及目录权限实际案例</strong></h3><p><code>ls -l 中显示的内容如下</code></p>
<p><code>drwxrw-r--  3 root root  4096 Apr 10 18:13 home</code></p>
<p><strong>10个字符确定不同用户能对文件干什么</strong></p>
<p>第一个字符代表文件类型： 文件 (-),目录(d),链接(l)</p>
<p>其余字符每3个一组(rwx) 读(r) 写(w) 执行(x)</p>
<p>第一组rwx : 文件拥有者的权限是读、写和执行</p>
<p>第二组rw- : 与文件拥有者同一组的用户的权限是读、写但不能执行</p>
<p>第三组r– : 不与文件拥有者同组的其他用户的权限是读不能写和执行</p>
<p><strong>可用数字表示为: r=4,w=2,x=1 因此rwx=4+2+1=7</strong> </p>
<h4 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h4><p>通过chmod指令，可以修改文件或者目录的权限</p>
<h5 id="第一种方式：-，-，-变更权限"><a href="#第一种方式：-，-，-变更权限" class="headerlink" title="第一种方式：+ ，-，= 变更权限"></a>第一种方式：+ ，-，= 变更权限</h5><p>u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和)</p>
<p>chmod u=rwx,g=rx,o=x 文件目录名</p>
<p>chmod o+w 文件目录名</p>
<p>chmod a-x 文件目录名</p>
<h5 id="第二种方式：通过数字变更权限"><a href="#第二种方式：通过数字变更权限" class="headerlink" title="第二种方式：通过数字变更权限"></a>第二种方式：通过数字变更权限</h5><p>r=4 w=2 x=1 rwx=4+2+1=7    0就啥子都做不了</p>
<p><code>chmod u=rwx,g=rx,o=x 文件目录名</code></p>
<p><code>相当于 chmod 751 文件目录名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZf1urhaqia9qzZ ~]# chmod 700 home</span><br><span class="line">[root@iZf1urhaqia9qzZ ~]# ll</span><br><span class="line">total 36</span><br><span class="line">drwx------  3 root root  4096 Apr 10 18:13 home</span><br></pre></td></tr></table></figure>

<h3 id="修改文件所有者-chown"><a href="#修改文件所有者-chown" class="headerlink" title="修改文件所有者-chown"></a>修改文件所有者-chown</h3><p><strong>基本介绍</strong></p>
<p><code>chown newowner file 改变文件的所有者</code></p>
<p><code>chown newowner:newgroup file 改变文件的所有者和所有组</code></p>
<p><code>-R 如果是目录 则使其下所有子文件或目录递归生效</code></p>
<h3 id="修改文件所在组-chgrp"><a href="#修改文件所在组-chgrp" class="headerlink" title="修改文件所在组-chgrp"></a>修改文件所在组-chgrp</h3><p><strong>基本介绍</strong></p>
<p><code>chgrp newgroup file 改变文件的所有组</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>php循环</title>
    <url>/2019/09/24/php%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="php循环经典练习题"><a href="#php循环经典练习题" class="headerlink" title="php循环经典练习题"></a>php循环经典练习题</h1><p><strong>循环在每个语言里都必不可少,之前学习python,js都接触过,现在学习php又重新接触,为了加深理解,写一篇博客水一下.</strong></p>
<h2 id="php循环打印图形"><a href="#php循环打印图形" class="headerlink" title="php循环打印图形"></a>php循环打印图形</h2><h3 id="直角三角形"><a href="#直角三角形" class="headerlink" title="直角三角形"></a>直角三角形</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直角三角形</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=<span class="number">5</span>;$i++)&#123;</span><br><span class="line"><span class="comment">//    外层循环控制换行</span></span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=$i;$j++)&#123;</span><br><span class="line"><span class="comment">//        内层循环打印</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><img src="https://i.loli.net/2020/03/30/ML1SkrWNyO4xPmG.png" alt="11.png"></p>
<h3 id="金字塔"><a href="#金字塔" class="headerlink" title="金字塔"></a>金字塔</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=<span class="number">6</span>;$i++)&#123;</span><br><span class="line"><span class="comment">//    外层循环控制换行</span></span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">6</span>-$i;$j++)&#123;</span><br><span class="line"><span class="comment">//        输出空格</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=<span class="number">2</span>*$i<span class="number">-1</span>;$k++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/30/9nqZSzCTpfh4emN.png" alt="11.png"></p>
<h3 id="倒金字塔"><a href="#倒金字塔" class="headerlink" title="倒金字塔"></a>倒金字塔</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//倒金字塔</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">6</span>;$i&gt;=<span class="number">1</span>;$i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">6</span>-$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=<span class="number">2</span>*$i<span class="number">-1</span>;$k++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/30/VlYfHrUs8wZ9EtK.png" alt="11.png"></p>
<h3 id="菱形"><a href="#菱形" class="headerlink" title="菱形"></a>菱形</h3><p>正金字塔和倒金字塔连起来就是菱形 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菱形</span></span><br><span class="line"><span class="comment">//正金字塔</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=<span class="number">6</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">6</span>-$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=<span class="number">2</span>*$i<span class="number">-1</span>;$k++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒金字塔</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">6</span>;$i&gt;=<span class="number">1</span>;$i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">6</span>-$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=<span class="number">2</span>*$i<span class="number">-1</span>;$k++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/30/8q75ktajQhUb63P.png" alt="11.png"></p>
<h3 id="空心菱形"><a href="#空心菱形" class="headerlink" title="空心菱形"></a>空心菱形</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空心菱形</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=<span class="number">6</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">6</span>-$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=<span class="number">2</span>*$i<span class="number">-1</span>;$k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>($k==<span class="number">1</span> || $k==<span class="number">2</span>*$i<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">6</span>;$i&gt;=<span class="number">1</span>;$i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">6</span>-$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=<span class="number">2</span>*$i<span class="number">-1</span>;$k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($k==<span class="number">2</span>*$i<span class="number">-1</span> || $k==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"*"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&amp;nbsp;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/30/F8lIvMT9USQ3RiZ.png" alt="11.png"></p>
<h2 id="php循环练习"><a href="#php循环练习" class="headerlink" title="php循环练习"></a>php循环练习</h2><h3 id="求1000以内的水仙花数"><a href="#求1000以内的水仙花数" class="headerlink" title="求1000以内的水仙花数"></a>求1000以内的水仙花数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求水仙花数</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">100</span>;$i&lt;<span class="number">1000</span>;$i++)&#123;</span><br><span class="line">    $ge=$i%<span class="number">10</span>;</span><br><span class="line">    $shi=floor($i/<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">    $bai=floor($i/<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>($ge*$ge*$ge+$shi*$shi*$shi+$bai*$bai*$bai==$i)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&#123;$i&#125;是水仙花数"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/30/UFHAvLghWbZJiI5.png" alt="11.png"></p>
<h3 id="求一到一百之间不含数字4的自然数-并且计算有多少个"><a href="#求一到一百之间不含数字4的自然数-并且计算有多少个" class="headerlink" title="求一到一百之间不含数字4的自然数  并且计算有多少个"></a>求一到一百之间不含数字4的自然数  并且计算有多少个</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">200</span>; $i++) &#123;</span><br><span class="line">    $ge = $i % <span class="number">10</span>;</span><br><span class="line">    $shi = $i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> ($ge == <span class="number">4</span> || $shi == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $sum++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$sum&#125;个"</span>; <span class="comment">//162</span></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">$num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">200</span>; $i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strpos($i, <span class="string">'4'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        $num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $num; <span class="comment">//162</span></span><br></pre></td></tr></table></figure>

<h3 id="输出一到一百之间所有的质数"><a href="#输出一到一百之间所有的质数" class="headerlink" title="输出一到一百之间所有的质数"></a>输出一到一百之间所有的质数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">2</span>;$i&lt;=<span class="number">100</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">2</span>;$j&lt;=$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($i%$j==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($i==$j)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $i.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;=<span class="number">9</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=$i;$j++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$j*$i="</span>.$i*$j.<span class="string">"&amp;nbsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="百鸡问题"><a href="#百鸡问题" class="headerlink" title="百鸡问题"></a>百鸡问题</h3><p><strong>100块钱买一百只鸡 公鸡5块钱一只 母鸡3块钱一只 小鸡一块钱三只  100块钱必须花完  问：公鸡 母鸡 小鸡各多少只</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;<span class="number">100</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">1</span>;$j&lt;=<span class="number">100</span>;$j++)&#123;</span><br><span class="line">        $k=<span class="number">100</span>-$i-$j;</span><br><span class="line">        <span class="keyword">if</span>($i*<span class="number">5</span>+$j*<span class="number">3</span>+$k/<span class="number">3</span>==<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"公鸡"</span>.$i;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"母鸡"</span>.$j;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"小鸡"</span>.$k;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>学习循环还是很锻炼思维的 尤其是我这种菜比 加油吧 路还长！！！！！！</strong></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>pdo</title>
    <url>/2019/12/22/pdo/</url>
    <content><![CDATA[<p>​        最近回顾了一下pdo , 还是有必要记录一下的, 毕竟自己学一个忘一个…….</p>
<h1 id="PDO连接数据库-增删改查"><a href="#PDO连接数据库-增删改查" class="headerlink" title="PDO连接数据库(增删改查)"></a>PDO连接数据库(增删改查)</h1><h2 id="查询多条数据"><a href="#查询多条数据" class="headerlink" title="查询多条数据"></a>查询多条数据</h2><p><code>fethcAll()</code></p>
<p><img src="https://i.loli.net/2019/12/22/gqn2TPy7BoM4pNO.png" alt="1.png"></p>
<a id="more"></a>

<p><strong>注意:执行查询操作使用<code>query()</code></strong>    </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">fetchAll</span><span class="params">(PDO::FETCH_ASSOC)</span></span>    将查询到的结果集转换为关联数组</span><br></pre></td></tr></table></figure>

<p><code>fetchAll()</code> 可以有不同的参数 比如常用的:</p>
<p><code>FETCH_ASSOC</code>:代表转为关联数组</p>
<p><code>FETCH_NUM</code>:代表转为索引数组</p>
<p><code>FETCH_BOTH:</code>代表关联和索引这两者形式都有</p>
<p><code>FETCH_OBJ</code>:对象的形式</p>
<h2 id="查询单条数据"><a href="#查询单条数据" class="headerlink" title="查询单条数据"></a>查询单条数据</h2><p><code>fetch()</code></p>
<p><img src="https://i.loli.net/2019/12/22/3HvyxzNoJuO8ieA.png" alt="1.png"></p>
<p><strong>查询数据本质上都是一样的, 查询多条只需要注意sql语句的书写 以及结果集转换数据的写法即可</strong></p>
<h2 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h2><p><code>fetchColumn()</code></p>
<p><img src="https://i.loli.net/2019/12/22/N9PSyOlVr3WE7CF.png" alt="1.png"></p>
<p>注意:查询指定条数的指定字段 返回的是一个字符串 使用<code>fetchColumn()</code></p>
<h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><p><strong>增删改只需要改变sql语句的内容即可</strong>   <strong>与查询不同的是:增删改要调用exec()方法对sql语句进行处理</strong></p>
<h3 id="增加一条数据"><a href="#增加一条数据" class="headerlink" title="增加一条数据"></a>增加一条数据</h3><p><img src="https://i.loli.net/2019/12/22/9LoJMXeImtNq3O1.png" alt="1.png"></p>
<h3 id="更新一条数据"><a href="#更新一条数据" class="headerlink" title="更新一条数据"></a>更新一条数据</h3><p><img src="https://i.loli.net/2019/12/22/N5oCW7kgHpAqJbu.png" alt="1.png"></p>
<h3 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h3><p><img src="https://i.loli.net/2019/12/22/tDoSRuZVziTFpX7.png" alt="1.png"></p>
<h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>开启事务: <code>beginTransaction()</code>  </p>
<p>事务提交: <code>commit()</code></p>
<p>事务回滚: <code>rollBack()</code></p>
<p><img src="https://i.loli.net/2019/12/22/LZ5MFike6nrYCQK.png" alt="1.png"></p>
<p><strong>事务处理的情况下 sql语句要么都执行 要么都不执行</strong></p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>单例模式：</strong>singleton  是一种类的设计只会最多产生一个对象的设计思想</p>
<ul>
<li><p>单例模式的类只能在一次运行中产生一个对象</p>
</li>
<li><p>单例模式为了解决如何只产生一个对象,需要使用以下解决方案，简称三私一公</p>
<p><strong>私有化构造方法:不让在外部产生多个对象</strong></p>
<p><strong>私有化克隆方法：不允许对象被克隆产生新对象</strong></p>
<p><strong>私有化静态属性:保存已经产生的对象</strong></p>
<p><strong>公有化静态方法:运行进入类内部产生对象</strong></p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/12/22/lgBsKRY1dmLAvNT.png" alt="1.png"></p>
<p><strong>指向了同一个对象 单例模式构造成功</strong></p>
<p><img src="https://i.loli.net/2019/12/22/XlIZSG8PYohJcmM.png" alt="1.png"></p>
<p><code>instanceof</code>是类型运算符 判断某个变量是否是某个类的对象实例</p>
<p><strong>总结:</strong></p>
<p>单例模式设计的类最多只能得到一个对象</p>
<p>单例模式只是解决当前类对象的唯一性，要实现其他功能需求，可以在类中增加相应的其他类成员</p>
<p>单例模式的目的是为了保护资源的唯一性</p>
<p>单例模式的设计规范就是’三私一公’</p>
<ul>
<li>私有化构造方法：禁止在类外部无限实例化对象</li>
<li>私有化克隆方法：禁止对象无限克隆对象</li>
<li>私有化静态属性：保存类内部实例化得到的对象</li>
<li>公有化静态方法：允许外部通过调用类内部方法获取对象</li>
</ul>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>tp5图片上传</title>
    <url>/2020/03/18/tp5%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="tp5实现异步图片上传"><a href="#tp5实现异步图片上传" class="headerlink" title="tp5实现异步图片上传"></a>tp5实现异步图片上传</h1><p><img src="https://i.loli.net/2020/03/18/nMBdVXLa6fYyelu.jpg" alt="111.jpg"></p>
<a id="more"></a>

<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p><strong>bootstrp的一个fileinput插件来通过ajax的方式实现图片的上传</strong></p>
<p><a href="https://segmentfault.com/a/1190000018477200" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018477200</a></p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>下载之后  解压放到tp5项目public目录 </p>
<h3 id="引入依赖文件"><a href="#引入依赖文件" class="headerlink" title="引入依赖文件"></a>引入依赖文件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt; </span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"__STATIC__/bootstrap-fileinput-master/css/fileinput.css"</span>&gt; </span><br><span class="line">&lt;script src=<span class="string">"__STATIC__/bootstrap-fileinput-master/js/fileinput.js"</span>&gt;&lt;/script&gt; </span><br><span class="line">&lt;script src=<span class="string">"__STATIC__/bootstrap-fileinput-master/js/locales/zh.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="页面加入控件"><a href="#页面加入控件" class="headerlink" title="页面加入控件"></a>页面加入控件</h3><p>隐藏域用来保存上传成功后的图片地址和缩略图地址  注意给form添加文件上传的属性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div class="Operate_cont clearfix"&gt;</span><br><span class="line">    &lt;label class="form-label"&gt;上传图片：&lt;/label&gt;</span><br><span class="line">    &lt;div class="formControls "&gt;</span><br><span class="line">        &lt;input type="file" id="imgUpload" class="file-loading"&gt;//不需要添加name属性  插件自动生成</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"image"</span> value=<span class="string">""</span> id=<span class="string">"image"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"image_thumb"</span> value=<span class="string">""</span> id=<span class="string">"image_thumb"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="js代码进行配置"><a href="#js代码进行配置" class="headerlink" title="js代码进行配置"></a>js代码进行配置</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#imgUpload"</span>).fileinput(&#123;</span><br><span class="line">    language: <span class="string">'zh'</span>,</span><br><span class="line">    uploadUrl:<span class="string">"&#123;:url('product/uploadImg')&#125;"</span>,</span><br><span class="line">    autoReplace:<span class="keyword">true</span>,</span><br><span class="line">    maxFileCount:<span class="number">1</span>,</span><br><span class="line">    allowedFileExtensions: [<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">"gif"</span>],<span class="comment">//接收的文件后缀</span></span><br><span class="line">    browseClass: <span class="string">"btn btn-primary"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="监听后台返回的信息"><a href="#监听后台返回的信息" class="headerlink" title="监听后台返回的信息"></a>监听后台返回的信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#imgUpload"</span>).on(<span class="string">'fileuploaded'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event,data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> path=data.response.path;<span class="comment">//获取上传成功以后的图片地址</span></span><br><span class="line">    <span class="keyword">var</span> thumb_path=data.response.thumb;<span class="comment">//获取缩略图的地址</span></span><br><span class="line">    $(<span class="string">"#image"</span>).val(path);<span class="comment">//把图片地址保存到隐藏域中</span></span><br><span class="line">    $(<span class="string">"#image_thumb"</span>).val(thumb_path);<span class="comment">//把缩略图地址保存到隐藏域中</span></span><br><span class="line">    console.log(path);</span><br><span class="line">    console.log(thumb_path);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    图片上传</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $file =<span class="keyword">$this</span>-&gt;request-&gt;file(<span class="string">'file_data'</span>);<span class="comment">//获取上传的图片资源</span></span><br><span class="line"><span class="comment">//  保存原图路径</span></span><br><span class="line">        $path=ROOT_PATH . <span class="string">'public'</span> . DS . <span class="string">'uploads'</span>.DS.<span class="string">'product'</span>;</span><br><span class="line"><span class="comment">//  缩略图保存路径</span></span><br><span class="line">        $thumb_path=ROOT_PATH . <span class="string">'public'</span> . DS . <span class="string">'uploads'</span>.DS.<span class="string">'product'</span>.DS.<span class="string">'thumb'</span>.DS.<span class="string">'thumb_'</span>.$info-&gt;getFilename();</span><br><span class="line">        $info = $file-&gt;move($path);  <span class="comment">//移动图片</span></span><br><span class="line">        <span class="keyword">if</span>($info)&#123;</span><br><span class="line">            $path=ROOT_PATH . <span class="string">'public'</span> . DS . <span class="string">'uploads'</span>.DS.<span class="string">'product'</span>.DS.$info-&gt;getSaveName();<span class="comment">//拿到移动后的图片</span></span><br><span class="line">            $image=Image::open($path); </span><br><span class="line">            $image-&gt;thumb(<span class="number">150</span>,<span class="number">150</span>,Image::THUMB_SCALING)-&gt;save($thumb_path);<span class="comment">//生成缩略图</span></span><br><span class="line">            <span class="comment">//tp5文档的写法是直接拿到$file中的临时路径进行裁剪生成缩略图的,我使用时一直出现问题,所以最好还是拼接一个移动后的图片,进行缩略图的裁剪</span></span><br><span class="line"><span class="comment">//            halt($info-&gt;getSaveName());</span></span><br><span class="line">            <span class="keyword">return</span> json([</span><br><span class="line">                <span class="string">'status'</span>=&gt;<span class="number">1</span>,</span><br><span class="line">                <span class="string">'path'</span>=&gt;$info-&gt;getSaveName(),</span><br><span class="line">                <span class="string">'thumb'</span>=&gt;<span class="string">'thumb'</span>.DS.<span class="string">'thumb_'</span>.$info-&gt;getFilename()</span><br><span class="line">            ]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 上传失败获取错误信息</span></span><br><span class="line">            <span class="keyword">return</span> json([</span><br><span class="line">                <span class="string">'status'</span>=&gt;<span class="number">0</span>,</span><br><span class="line">                <span class="string">'error'</span>=&gt;$file-&gt;getError()</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>tp5全选删除</title>
    <url>/2020/03/07/tp5%E5%85%A8%E9%80%89%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<h1 id="tp5实现后台模块全选删除"><a href="#tp5实现后台模块全选删除" class="headerlink" title="tp5实现后台模块全选删除"></a>tp5实现后台模块全选删除</h1><p>技术栈:ajax layer.js tp5 </p>
<p><img src="https://i.loli.net/2020/03/07/rvZGAK5p6OtzUxg.jpg" alt="1575019926362.png"></p>
<p>一个让你想到即可做到的web弹窗/层  解决方案      <a href="http://layer.layui.com/" target="_blank" rel="noopener">http://layer.layui.com/</a></p>
<a id="more"></a>

<h2 id="实现复选框全选"><a href="#实现复选框全选" class="headerlink" title="实现复选框全选"></a>实现复选框全选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"all"</span>  <span class="attr">style</span>=<span class="string">"!important; opacity: 1.2;position: static;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form class&#x3D;&quot;piliangshanchan&quot;&gt;  &#x2F;&#x2F;为了实现ajax 序列化表单的值</span><br><span class="line">&lt;td class&#x3D;&quot;text-center&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;&#123;$value.id&#125;&quot;</span><br><span class="line">                               name&#x3D;&quot;id[]&quot; id&#x3D;&quot;checkbox&quot;</span><br><span class="line">                               class&#x3D;&quot;cheidbox&quot;</span><br><span class="line">                               style&#x3D;&quot;!important; opacity: 1.2;position: static;&quot;&gt;</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;submit&quot; tooltip&#x3D;&quot;删除管理员&quot; class&#x3D;&quot;btn btn-danger btn-sm shi&quot;</span><br><span class="line">        onclick&#x3D;&quot;delAll()&quot;&gt;&lt;i class&#x3D;&quot;fa fa-trash-o&quot;&gt;&lt;&#x2F;i&gt; 批量删除</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全选</span></span><br><span class="line">$(<span class="string">'#all'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">        $(<span class="string">':checkbox'</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">':checkbox'</span>).prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反选</span></span><br><span class="line">$(<span class="string">".cheidbox"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len=$(<span class="string">".cheidbox"</span>).length;  <span class="comment">//获取所有小复选框的个数</span></span><br><span class="line">    <span class="keyword">var</span> len2=$(<span class="string">"input.cheidbox:checked"</span>).length;  <span class="comment">//获取选中的小复选框个数</span></span><br><span class="line">    <span class="keyword">if</span>(len==len2)&#123;</span><br><span class="line">        $(<span class="string">'#all'</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">'#all'</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="发送ajax请求"><a href="#发送ajax请求" class="headerlink" title="发送ajax请求"></a>发送ajax请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除提交</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    layer.confirm(<span class="string">'确认要删除吗？'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">'.cheidbox'</span>).is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">"&#123;:url('admin/delAll')&#125;"</span>,</span><br><span class="line">                data: $(<span class="string">'.piliangshanchan'</span>).serialize(), <span class="comment">//给后台发送序列化表单值得结果</span></span><br><span class="line">                dataType: <span class="string">"json"</span>,</span><br><span class="line">                type: <span class="string">'post'</span>,</span><br><span class="line">                <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// console.log(res);</span></span><br><span class="line">                    <span class="keyword">if</span> (res.status == <span class="number">1</span>) &#123;</span><br><span class="line">                        layer.alert(res.message + <span class="string">"，共删除"</span> + res.num + <span class="string">"数据"</span>, &#123;<span class="attr">icon</span>: <span class="number">6</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">window</span>.location.reload();  <span class="comment">//页面刷新</span></span><br><span class="line">                            <span class="comment">// layer.close(index) - 关闭特定层</span></span><br><span class="line">                            <span class="comment">// 获得iframe索引</span></span><br><span class="line">                            <span class="keyword">var</span> index = parent.layer.getFrameIndex(<span class="built_in">window</span>.name);</span><br><span class="line">                            <span class="comment">//关闭当前frame</span></span><br><span class="line">                            parent.layer.close(index);</span><br><span class="line"></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        layer.alert(res.message, &#123;<span class="attr">icon</span>:<span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">window</span>.location.reload();</span><br><span class="line">                            <span class="comment">// 获得frame索引</span></span><br><span class="line">                            <span class="keyword">var</span> index = parent.layer.getFrameIndex(<span class="built_in">window</span>.name);</span><br><span class="line">                            <span class="comment">//关闭当前frame</span></span><br><span class="line">                            parent.layer.close(index);</span><br><span class="line"></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layer.msg(<span class="string">'请选择~~'</span>, &#123;<span class="attr">icon</span>: <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后台控制器"><a href="#后台控制器" class="headerlink" title="后台控制器"></a>后台控制器</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data = <span class="keyword">$this</span>-&gt;request-&gt;param();  <span class="comment">//获取当前请求参数的值  拿到ajax发送的值</span></span><br><span class="line">    $allid = $data[<span class="string">'id'</span>];</span><br><span class="line">    $res=AdminModel::destroy($allid);</span><br><span class="line">    $num=count($allid)</span><br><span class="line">    <span class="keyword">if</span>($res)&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'status'</span>=&gt;<span class="number">1</span>,<span class="string">'message'</span>=&gt;<span class="string">'删除成功'</span>,<span class="string">'num'</span>=&gt;$num];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'status'</span>=&gt;<span class="number">0</span>,<span class="string">'message'</span>=&gt;<span class="string">'删除失败'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php正则表达式</title>
    <url>/2019/09/18/php%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h1 id="php正则表达式"><a href="#php正则表达式" class="headerlink" title="php正则表达式"></a>php正则表达式</h1><p>  好久没写博客,最近过的太水，正好暑假报了暑假班学习了php基础，自我感觉效果还可以，但是正则表达式感觉没有掌握，水一篇加强一下记忆。</p>
<p><img src="https://i.loli.net/2019/09/18/XBpuQnGwiVfr5lc.jpg" alt="php.jpg"></p>
<a id="more"></a>

<h2 id="一-概念"><a href="#一-概念" class="headerlink" title="一 概念"></a>一 概念</h2><p>  正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<h2 id="二-作用"><a href="#二-作用" class="headerlink" title="二  作用"></a>二  作用</h2><p><strong>实际应用当中主要用于以下几个方面</strong></p>
<ol>
<li>注册页面判断用户输入的内容是否符合验证规则</li>
<li>从整体字符串中看是否包含指定的字符串</li>
<li>找到符合规则的字符串进行替换</li>
</ol>
<h2 id="三-语法规则"><a href="#三-语法规则" class="headerlink" title="三 语法规则"></a>三 语法规则</h2><h3 id="3-1-定义规则"><a href="#3-1-定义规则" class="headerlink" title="3.1 定义规则"></a>3.1 定义规则</h3><p><code>$reg=&#39;/自己定义规则符号/&#39;；</code></p>
<h3 id="3-2-符号简介"><a href="#3-2-符号简介" class="headerlink" title="3.2 符号简介"></a>3.2 符号简介</h3><p>正则表达式手册：<a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">http://tool.oschina.net/uploads/apidocs/jquery/regexp.html</a></p>
<p><strong>正则表达式可以有普通符号和元字符组成</strong></p>
<p><strong>普通字符:</strong> </p>
<p>概念:  大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字。</p>
<p>也就是说普通字符只能够匹配字符串中与它们相同的字符。如:<strong>‘/a/’代表你就要匹配字符a</strong></p>
<p><strong>‘/a7/’代表你就要匹配字符a7</strong></p>
<p><strong>元子符:</strong>正则表达式中规定了一系列的特殊字符，这些字符不是按照字符的直接量进行匹配的，而是具有特殊的语义。如: ^ $ . * + ? = ! : | \ / ( ) [ ] { }</p>
<p><strong>行定位符(^与$)</strong></p>
<p>行定位符是用来描述字符串的边界。 <code>“$”</code>表示行结尾 <code>“^”</code>表示行开始如<code>&quot;^de&quot;</code>，表示以de开头的字符串 <code>&quot;de$&quot;</code>,表示以de结尾的字符串。</p>
<p><strong>选择字符</strong>(|)</p>
<p>选择字符表示或的意思。如Aa|aA，表示Aa或者是aA的意思。注意使用”[]”与”|”的区别，在于”[]”只能匹配单个字符，而”|”可以匹配任意长度的字符串。在使用”[]”的时候，往往配合连接字符”-“一起使用，如[a-d],代表a或b或c或d。</p>
<p><strong>排除字符</strong></p>
<p>正则表达式提供了”^”来表示排除不符合的字符，^一般放在[]中。如[^1-5]该字符不是1~5之间的数字。</p>
<p><strong>限定符</strong></p>
<p><img src="https://i.loli.net/2019/09/18/8U4h6jaPDWQidXF.png" alt="1.png"></p>
<p><strong>点号操作符</strong></p>
<p>匹配任意一个字符（不包含换行符）</p>
<p><strong>转义字符</strong>()</p>
<p>表达式中的反斜杠有多重意义，如转义、指定预定义的字符集、定义断言、显示不打印的字符。</p>
<p>转义字符主要是将一些特殊字符转为普通字符。而这些常用特殊字符有”.”，”?”、”\”等。</p>
<p><strong>预定义的字符集</strong></p>
<ol>
<li><img src="https://i.loli.net/2019/09/18/PkiIH1dwXB2ba8E.png" alt="2.png"></li>
</ol>
<p><strong>括号字符()</strong></p>
<p>在正则表达式中小括号的作用主要有:</p>
<ol>
<li>改变限定符如（|、* 、^)的作用范围  如(my|your)baby，如果没有”()”，|将匹配的是要么是my，要么是yourbaby,有了小括号，匹配的就是mybaby或yourbaby。</li>
<li>进行分组，便于反向引用</li>
</ol>
<h3 id="3-3正则匹配的方法"><a href="#3-3正则匹配的方法" class="headerlink" title="3.3正则匹配的方法"></a>3.3正则匹配的方法</h3><p><code>preg_match($reg,$str,[$arr]);</code></p>
<p><strong>$reg是自己定义的正则表达式</strong></p>
<p><strong>$str是自己要查询的字符串</strong></p>
<p><strong>$arr是匹配到的结果</strong></p>
<h4 id="3-3-1preg-match-用法详解"><a href="#3-3-1preg-match-用法详解" class="headerlink" title="3.3.1preg_match()用法详解"></a>3.3.1preg_match()用法详解</h4><p><strong>preg_match()只要找到一次符合正则表达式的结果就终止了，不会再往下匹配</strong></p>
<p><strong>preg_match_all()是匹配一次成功以后不会终止，会一直匹配到完</strong></p>
<h2 id="四-高级应用"><a href="#四-高级应用" class="headerlink" title="四 高级应用"></a>四 高级应用</h2><h3 id="4-1贪婪模式"><a href="#4-1贪婪模式" class="headerlink" title="4.1贪婪模式"></a>4.1贪婪模式</h3><p><strong>正则表达式里会尽可能多的匹配的元素</strong></p>
<p><img src="https://i.loli.net/2019/09/18/j49gUFY7EXa6t1s.png" alt="3.png"></p>
<h3 id="4-2禁止贪婪模式"><a href="#4-2禁止贪婪模式" class="headerlink" title="4.2禁止贪婪模式"></a>4.2禁止贪婪模式</h3><p><img src="https://i.loli.net/2019/09/18/lukpOxcei2dNwYs.png" alt="5.png"></p>
<p><img src="https://i.loli.net/2019/09/18/q3ugJWaIZUzcKF6.png" alt="6.png"></p>
<h3 id="4-3反向引用"><a href="#4-3反向引用" class="headerlink" title="4.3反向引用"></a>4.3反向引用</h3><p><strong>在匹配到某个字符串之后，后续还需要使用该字符串。这就是反向引用。</strong></p>
<ol>
<li><p>捕获：将需要的字符串保存起来，便于后续引用，可以理解为保存到内存中，同时对它进行一个编号，使用小括号即可。它会从1开始编号，依次是2,3,4..。</p>
</li>
<li><p>2、引用：只需要使用 \编号 即可， \1  \2 \3   (第一个”&quot;表示转义)</p>
</li>
<li><p>括号编号的顺序不一定是书写的顺序，应该是执行的顺序。如果括号是平行，从左到右，如果括号是包含关系，先内后外。</p>
</li>
</ol>
<h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五 总结"></a>五 总结</h2><p>  自我感觉过了一遍基本没什么效果，接触正则太少，还是需要多写多练，在菜鸟的路上越走越远。</p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>tp5使用PhpSpreadsheet扩展导出数据到excel</title>
    <url>/2020/05/09/tp5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%88%B0excel/</url>
    <content><![CDATA[<p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701192916.jpg" alt=""></p>
<a id="more"></a>

<p>​    <strong>PhpSpreadsheet是一个纯PHP类库，它提供了一组类，允许您从不同的电子表格文件格式（如Excel和LibreOffice Calc）读取和写入。</strong></p>
<p>​    <strong>刚上班没几天,遇到一个需求,后台导出数据到excel表中,这个操作之前听过,没有用过,在网上找了半天,找了个轮子,拿过来用,有时间研究一下文档.</strong></p>
<h2 id="composer安装PhpSpreadsheet组件"><a href="#composer安装PhpSpreadsheet组件" class="headerlink" title="composer安装PhpSpreadsheet组件"></a>composer安装PhpSpreadsheet组件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ composer require phpoffice/phpspreadsheet</span><br></pre></td></tr></table></figure>

<p>安装完成之后,vendor文件夹下生成一个phpoffice文件</p>
<p><img src="https://i.loli.net/2020/05/10/c7Kkea8JFOnH3gu.png" alt="12.png"></p>
<h2 id="tp5导出"><a href="#tp5导出" class="headerlink" title="tp5导出"></a>tp5导出</h2><p><strong>首先在控制器中引入类库</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Spreadsheet</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Writer</span>\<span class="title">Xlsx</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Reader</span>\<span class="title">Xls</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">IOFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Cell</span>\<span class="title">Coordinate</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Worksheet</span>\<span class="title">PageSetup</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Cell</span>\<span class="title">DataType</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Style</span>\<span class="title">Fill</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Style</span>\<span class="title">Color</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Style</span>\<span class="title">Alignment</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Style</span>\<span class="title">Border</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Style</span>\<span class="title">NumberFormat</span>;</span><br><span class="line"><span class="comment">//实际项目中根据情况引入相应的类库</span></span><br></pre></td></tr></table></figure>

<p><strong>在视图中定义</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;:url('admin/daochu')&#125;"</span> <span class="attr">class</span>=<span class="string">"layui-btn layui-btn-normal layui-btn-x"</span>&gt;</span>导出数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在控制器中,定义导出数据的方法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出数据到excel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">daochu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $spreadsheet = <span class="keyword">new</span> Spreadsheet(); </span><br><span class="line">    $worksheet = $spreadsheet-&gt;getActiveSheet();</span><br><span class="line">    <span class="comment">//设置工作表标题名称</span></span><br><span class="line">    $worksheet-&gt;setTitle(<span class="string">'总分数表'</span>);</span><br><span class="line">    <span class="comment">//表头</span></span><br><span class="line">    <span class="comment">//设置单元格内容</span></span><br><span class="line">    $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'测试'</span>);</span><br><span class="line">    $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'序号'</span>);</span><br><span class="line">    $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">2</span>, <span class="number">2</span>, <span class="string">'姓名'</span>);</span><br><span class="line">    $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">3</span>, <span class="number">2</span>, <span class="string">'年级'</span>);</span><br><span class="line">    $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">4</span>, <span class="number">2</span>, <span class="string">'总分数'</span>);</span><br><span class="line">    <span class="comment">//合并单元格</span></span><br><span class="line">    $worksheet-&gt;mergeCells(<span class="string">'A1:E1'</span>);</span><br><span class="line">    </span><br><span class="line">    $styleArray = [</span><br><span class="line">        <span class="string">'font'</span> =&gt; [</span><br><span class="line">            <span class="string">'bold'</span> =&gt; <span class="keyword">true</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'alignment'</span> =&gt; [</span><br><span class="line">            <span class="string">'horizontal'</span> =&gt; Alignment::HORIZONTAL_CENTER,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">//设置单元格样式</span></span><br><span class="line">    $worksheet-&gt;getStyle(<span class="string">'A1'</span>)-&gt;applyFromArray($styleArray)-&gt;getFont()-&gt;setSize(<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">    $worksheet-&gt;getStyle(<span class="string">'A2:E2'</span>)-&gt;applyFromArray($styleArray)-&gt;getFont()-&gt;setSize(<span class="number">14</span>);</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    $jzInfo=Db::query(<span class="string">"select a.id,sum(score) sumscore,b.name,b.class from score  a inner join student b on a.stu_id=b.id group by stu_id order by sumscore asc"</span>);</span><br><span class="line"></span><br><span class="line">    $len = count($jzInfo);</span><br><span class="line">    $j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class="line">        $j = $i + <span class="number">3</span>; <span class="comment">//从表格第3行开始</span></span><br><span class="line">        $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">1</span>, $j, $jzInfo[$i][<span class="string">'id'</span>]);</span><br><span class="line">        $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">2</span>, $j, $jzInfo[$i][<span class="string">'name'</span>]);</span><br><span class="line">        $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">3</span>, $j, $jzInfo[$i][<span class="string">'class'</span>]);</span><br><span class="line">        $worksheet-&gt;setCellValueByColumnAndRow(<span class="number">4</span>, $j, $jzInfo[$i][<span class="string">'sumscore'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $styleArrayBody = [</span><br><span class="line">        <span class="string">'borders'</span> =&gt; [</span><br><span class="line">            <span class="string">'allBorders'</span> =&gt; [</span><br><span class="line">                <span class="string">'borderStyle'</span> =&gt; Border::BORDER_THIN,</span><br><span class="line">                <span class="string">'color'</span> =&gt; [<span class="string">'argb'</span> =&gt; <span class="string">'666666'</span>],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'alignment'</span> =&gt; [</span><br><span class="line">            <span class="string">'horizontal'</span> =&gt; Alignment::HORIZONTAL_CENTER,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">    $total_jzInfo = $len + <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//添加所有边框/居中</span></span><br><span class="line">    $worksheet-&gt;getStyle(<span class="string">'A1:C'</span>.$total_jzInfo)-&gt;applyFromArray($styleArrayBody);</span><br><span class="line">    $filename = <span class="string">'测试表.xlsx'</span>;</span><br><span class="line">    header(<span class="string">'Content-Type: application/vnd.ms-excel'</span>);</span><br><span class="line">    header(<span class="string">'Content-Disposition: attachment;filename="'</span>.$filename.<span class="string">'"'</span>);</span><br><span class="line">    header(<span class="string">'Cache-Control: max-age=0'</span>);<span class="comment">//禁止缓存</span></span><br><span class="line">    $writer = IOFactory::createWriter($spreadsheet, <span class="string">'Xlsx'</span>);</span><br><span class="line">    $writer-&gt;save(<span class="string">'php://output'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导出数据成功"><a href="#导出数据成功" class="headerlink" title="导出数据成功"></a>导出数据成功</h2><p><img src="https://gitee.com/a111111111111111111111111111/picture_bed/raw/master/img/20200701193421.jpg" alt=""></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小游戏-飞机大战代码分析</title>
    <url>/2021/12/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F-%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>​        最近要开发一个微信小游戏,本人在这方面是一窍不通,先找了微信小游戏官方的一个demo,学习一下.</p>
<p><img src="https://cdn.pixabay.com/photo/2017/11/27/21/31/computer-2982270_960_720.jpg" alt=""></p>
<a id="more"></a>

<h2 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h2><p>README.md中有详细的介绍,我们来看一下.</p>
<p><img src="https://s2.loli.net/2021/12/19/hHYZlJEINLz45Cf.png" alt=""></p>
<p>这里其实漏掉了一个game.js.  game.js是小游戏的入口文件. 他实例化了Main()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//game.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./js/libs/weapp-adapter'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./js/libs/symbol'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">'./js/main'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Main()</span><br></pre></td></tr></table></figure>

<p>接下来,我们来分析飞机大战的主要文件.</p>
<h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><p>​    main是游戏主函数.是这个游戏的核心.在分析main.js之前,我们先来了解一些基础知识.</p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li>帧:在<a href="https://zh.wikipedia.org/wiki/视频" target="_blank" rel="noopener">视频</a>领域，<a href="https://zh.wikipedia.org/wiki/电影" target="_blank" rel="noopener">电影</a>、<a href="https://zh.wikipedia.org/wiki/电视" target="_blank" rel="noopener">电视</a>、<a href="https://zh.wikipedia.org/wiki/数字视频" target="_blank" rel="noopener">数字视频</a>等可视为随时间连续变换的许多张画面，其中<strong>帧</strong>是指每一张画面。</li>
<li>帧数:帧数(Frames)，为帧生成数量的简称。由于口语习惯上的原因，我们通常将帧数与<a href="https://baike.baidu.com/item/帧率/1052590" target="_blank" rel="noopener">帧率</a>混淆。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象，因此高的帧率可以得到更流畅、更逼真的动画。其实,我们所看的动画,就是所谓的动态画面,电影,电视,动漫,就是一幅幅画面按照顺序叠加起来的,像50帧就是一秒50帧,代表一秒钟会有50张画面.</li>
<li>精灵：是游戏中的一个基本概念，指的是在游戏中的一个基本物体或动画或贴图，如NPC或者敌人，在本游戏中有子弹，敌机和玩家</li>
<li>回调函数：在特定事件发生后，由事件方进行调用的函数</li>
<li>画布：顾名思义就是使用了画东西的地方，其实就是用于渲染相关内容的位置</li>
</ul>
<p>​    接下来,我们看一下main.js中各个方法,代码中夹杂了我自己写的一些注释,帮助我们更好的理解.</p>
<h3 id="contructor-和restart"><a href="#contructor-和restart" class="headerlink" title="contructor()和restart()"></a>contructor()和restart()</h3><p>​    contructior()是一个构造函数,用于创建main对象的,他里面调用了restart方法,我们着重看一下restart方法.</p>
<p>restart主要负责生产一个界面,初始化各类信息.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">restart() &#123;</span><br><span class="line">   databus.reset(); <span class="comment">//全局状态管理器</span></span><br><span class="line">   canvas.removeEventListener(</span><br><span class="line">     <span class="comment">// 方法用于移除由 addEventListener() 方法添加的事件句柄</span></span><br><span class="line">     <span class="string">"touchstart"</span>,</span><br><span class="line">     <span class="keyword">this</span>.touchHandler</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.bg = <span class="keyword">new</span> BackGround(ctx); <span class="comment">//初始化背景</span></span><br><span class="line">   <span class="keyword">this</span>.player = <span class="keyword">new</span> Player(ctx); <span class="comment">//初始化玩家</span></span><br><span class="line">   <span class="keyword">this</span>.gameinfo = <span class="keyword">new</span> GameInfo(); <span class="comment">//初始化游戏信息</span></span><br><span class="line">   <span class="keyword">this</span>.music = <span class="keyword">new</span> Music(); <span class="comment">//初始化音乐</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.bindLoop = <span class="keyword">this</span>.loop.bind(<span class="keyword">this</span>); <span class="comment">//绑定事件循环</span></span><br><span class="line">   <span class="keyword">this</span>.hasEventBind = <span class="literal">false</span>; <span class="comment">//初始化状态</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 清除上一局的动画</span></span><br><span class="line">   <span class="built_in">window</span>.cancelAnimationFrame(<span class="keyword">this</span>.aniId);</span><br><span class="line">   <span class="comment">//取消一个先前通过调用window.requestAnimationFrame()方法添加到计划中的动画帧请求。</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.aniId = <span class="built_in">window</span>.requestAnimationFrame(</span><br><span class="line">     <span class="comment">//告诉浏览器——你希望执行一个动画</span></span><br><span class="line">     <span class="keyword">this</span>.bindLoop,</span><br><span class="line">     canvas</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="enemyGenerate"><a href="#enemyGenerate" class="headerlink" title="enemyGenerate()"></a>enemyGenerate()</h3><p>​    enemyGenerate()作用就是生成敌机</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随着帧数变化的敌机生成逻辑</span></span><br><span class="line"><span class="comment"> * 帧数取模定义成生成的频率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">enemyGenerate() &#123;</span><br><span class="line">  <span class="comment">//databus.frame作用相当于每次刷新的计数器，当我们使用它时会做出判断，</span></span><br><span class="line">  <span class="comment">//当刷新次数为30的整数倍时（30余0），就会生成一个新的敌机对象并将其初始化，</span></span><br><span class="line">  <span class="comment">//其中init的参数为该敌机的速度，生成后加入databus对象的存储数组中</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (databus.frame % <span class="number">30</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> enemy = databus.pool.getItemByClass(<span class="string">"enemy"</span>, Enemy);</span><br><span class="line">    enemy.init(<span class="number">8</span>);</span><br><span class="line">    databus.enemys.push(enemy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局碰撞检测</span></span><br><span class="line">collisionDetection() &#123;</span><br><span class="line">  <span class="comment">// const that = this</span></span><br><span class="line">  <span class="comment">//首先对于每一个子弹，要判断子弹是否与敌机相撞，如果相撞的话则就会隐藏敌人的飞机和子弹，我们明白，</span></span><br><span class="line">  <span class="comment">//子弹撞击到飞机说明子弹和飞机都爆炸摧毁了，</span></span><br><span class="line">  <span class="comment">//但这不代表在逻辑中将对象删除，而是在画面中它消失了，这时就是判断visible是否为true，如果为true的就不画到画布上，</span></span><br><span class="line">  <span class="comment">//而统一更新回收入pool 对每一架敌机，判断是否与用户相撞，若相撞，则在databus中设置游戏结束。</span></span><br><span class="line"></span><br><span class="line">  databus.bullets.forEach(<span class="function">(<span class="params">bullet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, il = databus.enemys.length; i &lt; il; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> enemy = databus.enemys[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!enemy.isPlaying &amp;&amp; enemy.isCollideWith(bullet)) &#123;</span><br><span class="line">        enemy.playAnimation();</span><br><span class="line">        <span class="keyword">this</span>.music.playExplosion();</span><br><span class="line"></span><br><span class="line">        bullet.visible = <span class="literal">false</span>;</span><br><span class="line">        databus.score += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, il = databus.enemys.length; i &lt; il; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> enemy = databus.enemys[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.player.isCollideWith(enemy)) &#123;</span><br><span class="line">      databus.gameOver = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="touchEventHandler"><a href="#touchEventHandler" class="headerlink" title="touchEventHandler()"></a>touchEventHandler()</h3><p>  游戏结束后判断是否重新开始</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 游戏结束后的触摸事件处理逻辑</span></span><br><span class="line">touchEventHandler(e) &#123;</span><br><span class="line">  <span class="comment">//获取触摸的坐标，在gameinfo中获取重新开始上下左右xy坐标，比对触摸位置是否在按钮内部，若在则调用restart函数重新启动函数。</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> x = e.touches[<span class="number">0</span>].clientX;</span><br><span class="line">  <span class="keyword">const</span> y = e.touches[<span class="number">0</span>].clientY;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> area = <span class="keyword">this</span>.gameinfo.btnArea;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    x &gt;= area.startX &amp;&amp;</span><br><span class="line">    x &lt;= area.endX &amp;&amp;</span><br><span class="line">    y &gt;= area.startY &amp;&amp;</span><br><span class="line">    y &lt;= area.endY</span><br><span class="line">  )</span><br><span class="line">    <span class="keyword">this</span>.restart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h3><p>render()是用于渲染场景，用于每次修改内容后重新渲染场景内容（每一帧调用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * canvas重绘函数</span></span><br><span class="line"><span class="comment">   * 每一帧重新绘制所有的需要展示的元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height); <span class="comment">// 把像素设置为透明以达到一个圆形区域的目的</span></span><br><span class="line">    <span class="comment">//在一个椭圆区域内设置所有像素都是透明的（rgba(0,0,0,0)）。这个范围椭圆的左上角在 (x, y)，宽度和高度分别由 width和height确定</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.bg.render(ctx); <span class="comment">//调用背景类的渲染函数 渲染背景</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接接databus中的bullets和enemys数组，并且将这个合成数组中的每一项画到画布上，</span></span><br><span class="line">    <span class="comment">// 画到画布上的操作是以利用函数drawToCanvas，而该函数实现于Spirite类中</span></span><br><span class="line">    <span class="comment">//spirit即精灵，是游戏设计中的一个概念，相当于游戏中一个最基本的物体或者一个概念</span></span><br><span class="line">    databus.bullets.concat(databus.enemys).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item.drawToCanvas(ctx);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将player画到画布上，同样的，player也继承于Spirit类，将所有动画类的未播放的内容进行播放</span></span><br><span class="line">    <span class="keyword">this</span>.player.drawToCanvas(ctx);</span><br><span class="line"></span><br><span class="line">    databus.animations.forEach(<span class="function">(<span class="params">ani</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (ani.isPlaying) &#123;</span><br><span class="line">        ani.aniRender(ctx);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Animation类继承Spirit，而所有物体均继承于Animation类，</span></span><br><span class="line">    <span class="comment">//不过由于所有物体都均仅有一帧图像，因此无需进行播放，在databus类中有一个专门存放动画的数组，</span></span><br><span class="line">    <span class="comment">//任何继承于Animation类的对象都会在初始化构造时被放入该数组当中，调用gameinfo的函数更新图像左上角的分数内容判断，</span></span><br><span class="line">    <span class="comment">//若游戏结束 若未绑定事件，将touchHandler事件添加绑定， 将事件加入监听中。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.gameinfo.renderGameScore(ctx, databus.score);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 游戏结束停止帧循环</span></span><br><span class="line">    <span class="keyword">if</span> (databus.gameOver) &#123;</span><br><span class="line">      <span class="keyword">this</span>.gameinfo.renderGameOver(ctx, databus.score);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.hasEventBind) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hasEventBind = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.touchHandler = <span class="keyword">this</span>.touchEventHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">        canvas.addEventListener(<span class="string">"touchstart"</span>, <span class="keyword">this</span>.touchHandler); <span class="comment">//addEventListener方法用于向指定元素添加事件句柄</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 游戏逻辑更新主函数</span></span><br><span class="line"><span class="comment">//update()是逻辑更新主函数，若游戏已经结束，不执行该代码，</span></span><br><span class="line"><span class="comment">//直接放回结束，更新背景参数，对所有bullets和enemys对象进行更新，</span></span><br><span class="line"><span class="comment">//调用enemyGenerate() 生成敌人（根据前面描述，需要判断是否满足刚好经过30帧） 进行全局碰撞检测，并进行处理，</span></span><br><span class="line"><span class="comment">//判断是否经过20帧，每经过20帧，调用player生成一个新的bullet（子弹），并且调用射击音乐 loop()。</span></span><br><span class="line">update() &#123;</span><br><span class="line">  <span class="keyword">if</span> (databus.gameOver) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.bg.update();</span><br><span class="line"></span><br><span class="line">  databus.bullets.concat(databus.enemys).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.update();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.enemyGenerate();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.collisionDetection();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (databus.frame % <span class="number">20</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.player.shoot();</span><br><span class="line">    <span class="keyword">this</span>.music.playShoot();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="loop"><a href="#loop" class="headerlink" title="loop()"></a>loop()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现游戏帧循环</span></span><br><span class="line"><span class="comment">//实现游戏帧循环，每次循环将帧计数器加一，更新逻辑，渲染逻辑更新后的场景，</span></span><br><span class="line"><span class="comment">//使用window.requestAnimationFrame进行调用，为下一帧界面渲染做准备。</span></span><br><span class="line">loop() &#123;</span><br><span class="line">  databus.frame++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.update();</span><br><span class="line">  <span class="keyword">this</span>.render();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.aniId = <span class="built_in">window</span>.requestAnimationFrame(</span><br><span class="line">    <span class="comment">//告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画</span></span><br><span class="line">    <span class="keyword">this</span>.bindLoop,</span><br><span class="line">    canvas</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这就是main.js的主要内容,接下来我们看一下databus.js</p>
<h2 id="databus-js"><a href="#databus-js" class="headerlink" title="databus.js"></a>databus.js</h2><p>​    databus.js是一个全局状态管理器.databus的作用是检测全局状态，回收敌机和子弹，那么什么是回收？什么是对象池？</p>
<pre><code>首先我们要知道敌机或是子弹这种频繁出现的东西，虽然都是基于同一个对象，但每一个物体在使用的时候都需要单独开辟空间，如果使用后不回收的话就会非常浪费空间，而这时我们就会用到池，这个池简单来说就是一个容器，用来存放子弹或敌机对象，当我们需要一个子弹或是一个敌机时，就从池中取，位置速度重新初始化一下就可以了。不需要了，再放回池中。</code></pre><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h3><p>我们来看一下 constructor()做了什么.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * constructor构造器，如果instance不为空已经存在，那么就返回instance，这是实现单例模式，</span></span><br><span class="line"><span class="comment">  * 保证不管多少次new都只能产生一个对象，如果不为空，将instance设置为自身，并进行下列初始化操作，</span></span><br><span class="line"><span class="comment">  * 创建一个对象池pool，对象池技术是通过将生成的对象暂时保存于池中，需要对象时先在池中查看是否有多余对象，</span></span><br><span class="line"><span class="comment">  * 若不足再生成对象，而在销毁对象时不进行真正销毁，而是加入对象池中，重置所有内容，设置为空。</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">constructor</span>() &#123;</span><br><span class="line">   <span class="comment">//instance用于承载该文件中惟一的databus类，实现单例模式，</span></span><br><span class="line">   <span class="comment">//单例模式是一种设计模式，保证全局仅有一个该类的对象，这样能在该demo中保证全局数据的一致性。</span></span><br><span class="line">   <span class="keyword">if</span> (instance) <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">   instance = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.pool = <span class="keyword">new</span> Pool()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.reset()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reset() &#123;  <span class="comment">//重置所有内容</span></span><br><span class="line">    <span class="keyword">this</span>.frame = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.bullets = []</span><br><span class="line">    <span class="keyword">this</span>.enemys = []</span><br><span class="line">    <span class="keyword">this</span>.animations = []</span><br><span class="line">    <span class="keyword">this</span>.gameOver = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="removeEnemey"><a href="#removeEnemey" class="headerlink" title="removeEnemey()"></a>removeEnemey()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回收敌机，进入对象池</span></span><br><span class="line"><span class="comment"> * 此后不进入帧循环</span></span><br><span class="line"><span class="comment"> * 移除某个敌方对象（敌机）。从enemys数组中获取第一个元素，</span></span><br><span class="line"><span class="comment"> * shift方法是js中移除第一个元素并返回的方法，设置其不可见，移入名为enemy的池中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">removeEnemey(enemy) &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = <span class="keyword">this</span>.enemys.shift()  </span><br><span class="line"></span><br><span class="line">  temp.visible = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pool.recover(<span class="string">'enemy'</span>, enemy)  <span class="comment">//将对象回收到对象池</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>removeBullets()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 回收子弹，进入对象池</span></span><br><span class="line"><span class="comment">  * 此后不进入帧循环</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> removeBullets(bullet) &#123;</span><br><span class="line">   <span class="keyword">const</span> temp = <span class="keyword">this</span>.bullets.shift()</span><br><span class="line"></span><br><span class="line">   temp.visible = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.pool.recover(<span class="string">'bullet'</span>, bullet)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​    现在,我们一起来看一下敌机类(enemy.js)</p>
<h2 id="enemy-js"><a href="#enemy-js" class="headerlink" title="enemy.js"></a>enemy.js</h2><p>​    enemy用于生成敌机。它继承了Animation类,引入了databus,实例化了databus</p>
<h3 id="rnd"><a href="#rnd" class="headerlink" title="rnd()"></a>rnd()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Symbol([description])  es6新增 作为对象属性的唯一标识符，防止对象属性冲突发生。 Symbol()返回值是唯一的 </span></span><br><span class="line"> <span class="comment">//Symbol("foo") === Symbol("foo"); // false   唯一的</span></span><br><span class="line"> <span class="comment">//symbol 基本数据类型</span></span><br><span class="line"> <span class="comment">//description,可选的，字符串类型。对符号的描述，可用于调试但不是访问符号服务。</span></span><br><span class="line"><span class="keyword">const</span> __ = &#123;</span><br><span class="line">  speed: <span class="built_in">Symbol</span>(<span class="string">"speed"</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> databus = <span class="keyword">new</span> DataBus();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rnd</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//Math.random() 用于提供[0,1)区间的浮点数</span></span><br><span class="line">  <span class="comment">//Math.floor() 返回小于等于该数字最大的整数</span></span><br><span class="line">  <span class="comment">//该函数的作用是返回一个start到end区间（end不取）返回内的一个随机数</span></span><br><span class="line">  <span class="comment">//用于生成敌机的位置</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (end - start) + start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="constructor"><a href="#constructor" class="headerlink" title="constructor()"></a>constructor()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">//根据提供的常量初始化敌机对象</span></span><br><span class="line">    <span class="comment">//并且初始化爆炸动画，该函数在之后实现</span></span><br><span class="line">    <span class="keyword">super</span>(ENEMY_IMG_SRC, ENEMY_WIDTH, ENEMY_HEIGHT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initExplosionAnimation();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化敌机速度</span></span><br><span class="line">  init(speed) &#123;</span><br><span class="line">    <span class="comment">//获取随机生成x坐标作为起始x位置</span></span><br><span class="line">    <span class="keyword">this</span>.x = rnd(<span class="number">0</span>, <span class="built_in">window</span>.innerWidth - ENEMY_WIDTH); <span class="comment">// innerWidth返回以像素为单位的内部宽度</span></span><br><span class="line">    <span class="comment">//获取其本身的高度取负值作为起始y坐标（一开始整个敌机还未进入屏幕，慢慢一点一点进入）</span></span><br><span class="line">    <span class="comment">//js中坐标原点为屏幕左上角，以原点向左为x正方向，原点向下为y正方向，</span></span><br><span class="line">    <span class="keyword">this</span>.y = -<span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[__.speed] = speed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.visible = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="initExplosionAnimation"><a href="#initExplosionAnimation" class="headerlink" title="initExplosionAnimation()"></a>initExplosionAnimation()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预定义爆炸的帧动画</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个数组</span></span><br><span class="line"><span class="comment"> * 设定爆炸的每一帧动画的具体位置，以及数量</span></span><br><span class="line"><span class="comment"> * 创建一个frames数组，将图片按顺序读取并加入数组中</span></span><br><span class="line"><span class="comment"> * 将该数组作为Animation类中定义的方法initFrames的参数初始化爆炸动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">initExplosionAnimation() &#123;</span><br><span class="line">  <span class="keyword">const</span> frames = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> EXPLO_IMG_PREFIX = <span class="string">"images/explosion"</span>;</span><br><span class="line">  <span class="keyword">const</span> EXPLO_FRAME_COUNT = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; EXPLO_FRAME_COUNT; i++) &#123;</span><br><span class="line">    frames.push(<span class="string">`<span class="subst">$&#123;EXPLO_IMG_PREFIX + (i + <span class="number">1</span>)&#125;</span>.png`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.initFrames(frames);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="update-1"><a href="#update-1" class="headerlink" title="update()"></a>update()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每一帧更新子弹位置</span></span><br><span class="line"><span class="comment">//逻辑更新函数，更新物体的参数，基本每个具体物体都具有该函数</span></span><br><span class="line"><span class="comment">//按速度没回合加上一定的y坐标（由于敌机是往下走的，因此加上）</span></span><br><span class="line"><span class="comment">// 若发现对象移动出屏幕，则将其回收</span></span><br><span class="line">update() &#123;</span><br><span class="line">  <span class="keyword">this</span>.y += <span class="keyword">this</span>[__.speed];</span><br><span class="line">  <span class="comment">// 对象回收</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.y &gt; <span class="built_in">window</span>.innerHeight + <span class="keyword">this</span>.height) databus.removeEnemey(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来瞅瞅我们的子弹类(bullet.js)</p>
<h2 id="bullet-js"><a href="#bullet-js" class="headerlink" title="bullet.js"></a>bullet.js</h2><p>​    bullet继承了sprite(精灵类),实例化了databus(). bullet.js代码比较少，我直接贴上来,来分析一下.重点看update方法.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Sprite <span class="keyword">from</span> <span class="string">"../base/sprite"</span>;</span><br><span class="line"><span class="keyword">import</span> DataBus <span class="keyword">from</span> <span class="string">"../databus"</span>;</span><br><span class="line"><span class="comment">//定义一些常量</span></span><br><span class="line"><span class="keyword">const</span> BULLET_IMG_SRC = <span class="string">"images/bullet.png"</span>;</span><br><span class="line"><span class="keyword">const</span> BULLET_WIDTH = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> BULLET_HEIGHT = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __ = &#123;</span><br><span class="line">  speed: <span class="built_in">Symbol</span>(<span class="string">"speed"</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> databus = <span class="keyword">new</span> DataBus();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Sprite</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(BULLET_IMG_SRC, BULLET_WIDTH, BULLET_HEIGHT);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化坐标位置和速度</span></span><br><span class="line">  init(x, y, speed) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[__.speed] = speed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.visible = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 每一帧更新子弹位置</span></span><br><span class="line">  <span class="comment">//为y坐标向上增加速度的大小，即应该减去速度的数值</span></span><br><span class="line">  <span class="comment">// 将整个子弹超出屏幕外的（因此是小于-this.height而不是0)移入对象池中</span></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.y -= <span class="keyword">this</span>[__.speed];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超出屏幕外回收自身</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.y &lt; -<span class="keyword">this</span>.height) databus.removeBullets(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下我们的玩家类(index.js)</p>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>​    player 同样继承了sprite,实例化了databus.敌机,子弹,玩家,都用到了databus中的一些属性或方法.</p>
<h3 id="constructor-1"><a href="#constructor-1" class="headerlink" title="constructor()"></a>constructor()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(PLAYER_IMG_SRC, PLAYER_WIDTH, PLAYER_HEIGHT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 玩家默认处于屏幕底部居中位置</span></span><br><span class="line">    <span class="keyword">this</span>.x = screenWidth / <span class="number">2</span> - <span class="keyword">this</span>.width / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = screenHeight - <span class="keyword">this</span>.height - <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于在手指移动的时候标识手指是否已经在飞机上了</span></span><br><span class="line">    <span class="keyword">this</span>.touched = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.bullets = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化事件监听</span></span><br><span class="line">    <span class="keyword">this</span>.initEvent(); <span class="comment">//事件监听相当于是在等待事件的发生，一旦发生就会随之执行的函数</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="checkIsFingerOnAir"><a href="#checkIsFingerOnAir" class="headerlink" title="checkIsFingerOnAir()"></a>checkIsFingerOnAir()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当手指触摸屏幕的时候</span></span><br><span class="line"><span class="comment"> * 判断手指是否在飞机上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>x: 手指的X轴坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>y: 手指的Y轴坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Boolean&#125;</span></span>: 用于标识手指是否在飞机上的布尔值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">checkIsFingerOnAir(x, y) &#123;</span><br><span class="line">  <span class="keyword">const</span> deviation = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !!(</span><br><span class="line">    x &gt;= <span class="keyword">this</span>.x - deviation &amp;&amp;</span><br><span class="line">    y &gt;= <span class="keyword">this</span>.y - deviation &amp;&amp;</span><br><span class="line">    x &lt;= <span class="keyword">this</span>.x + <span class="keyword">this</span>.width + deviation &amp;&amp;</span><br><span class="line">    y &lt;= <span class="keyword">this</span>.y + <span class="keyword">this</span>.height + deviation</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setAirPosAcrossFingerPosZ"><a href="#setAirPosAcrossFingerPosZ" class="headerlink" title="setAirPosAcrossFingerPosZ()"></a>setAirPosAcrossFingerPosZ()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据手指的位置设置飞机的位置</span></span><br><span class="line"><span class="comment"> * 保证手指处于飞机中间</span></span><br><span class="line"><span class="comment"> * 同时限定飞机的活动范围限制在屏幕中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setAirPosAcrossFingerPosZ(x, y) &#123;</span><br><span class="line">  <span class="keyword">let</span> disX = x - <span class="keyword">this</span>.width / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> disY = y - <span class="keyword">this</span>.height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (disX &lt; <span class="number">0</span>) disX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (disX &gt; screenWidth - <span class="keyword">this</span>.width) disX = screenWidth - <span class="keyword">this</span>.width;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (disY &lt;= <span class="number">0</span>) disY = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (disY &gt; screenHeight - <span class="keyword">this</span>.height)</span><br><span class="line">    disY = screenHeight - <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.x = disX;</span><br><span class="line">  <span class="keyword">this</span>.y = disY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initEvent"><a href="#initEvent" class="headerlink" title="initEvent()"></a>initEvent()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 玩家响应手指的触摸事件</span></span><br><span class="line"><span class="comment">  * 改变战机的位置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> initEvent() &#123;</span><br><span class="line">   <span class="comment">//绑定touchstart事件， 即开始触碰事件，并传入一个匿名函数作为回调函数，作为触发该事件时的回调</span></span><br><span class="line">   canvas.addEventListener(<span class="string">"touchstart"</span>, (e) =&gt; &#123;</span><br><span class="line">     e.preventDefault(); <span class="comment">//取消事件本身的默认动作的函数</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> x = e.touches[<span class="number">0</span>].clientX;</span><br><span class="line">     <span class="keyword">const</span> y = e.touches[<span class="number">0</span>].clientY;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//若触碰时触碰的是飞机则将飞机被触碰设置为真并且将飞机中心移动到手指中心</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.checkIsFingerOnAir(x, y)) &#123;</span><br><span class="line">       <span class="keyword">this</span>.touched = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.setAirPosAcrossFingerPosZ(x, y);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//绑定touchmove事件，即触碰移动</span></span><br><span class="line">   canvas.addEventListener(<span class="string">"touchmove"</span>, (e) =&gt; &#123;</span><br><span class="line">     e.preventDefault();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> x = e.touches[<span class="number">0</span>].clientX;</span><br><span class="line">     <span class="keyword">const</span> y = e.touches[<span class="number">0</span>].clientY;</span><br><span class="line">     <span class="comment">//若触碰飞机情况为真，则将飞机移动到相应位置</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.touched) <span class="keyword">this</span>.setAirPosAcrossFingerPosZ(x, y);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//绑定touchend事件，即触碰结束</span></span><br><span class="line">   canvas.addEventListener(<span class="string">"touchend"</span>, (e) =&gt; &#123;</span><br><span class="line">     e.preventDefault();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">this</span>.touched = <span class="literal">false</span>;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="shoot"><a href="#shoot" class="headerlink" title="shoot()"></a>shoot()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 玩家射击操作</span></span><br><span class="line"><span class="comment">   * 射击时机由外部决定</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  shoot() &#123;</span><br><span class="line">    <span class="comment">//从对象池中取一个子弹</span></span><br><span class="line">    <span class="comment">// 根据玩家位置初始化子弹位置</span></span><br><span class="line">    <span class="keyword">const</span> bullet = databus.pool.getItemByClass(<span class="string">"bullet"</span>, Bullet);</span><br><span class="line"></span><br><span class="line">    bullet.init(<span class="keyword">this</span>.x + <span class="keyword">this</span>.width / <span class="number">2</span> - bullet.width / <span class="number">2</span>, <span class="keyword">this</span>.y - <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    databus.bullets.push(bullet);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>接下来,看一下很重要的动画类(Animation)</p>
<h2 id="Animation-js"><a href="#Animation-js" class="headerlink" title="Animation.js"></a>Animation.js</h2><p>​    animation.js就是所有动画所在的文件,他继承了spirit类,我们来看看他具体做了什么.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Sprite <span class="keyword">from</span> <span class="string">'./sprite'</span></span><br><span class="line"><span class="keyword">import</span> DataBus <span class="keyword">from</span> <span class="string">'../databus'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> databus = <span class="keyword">new</span> DataBus()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __ = &#123;</span><br><span class="line">  <span class="comment">//Symbol([description])  es6新增 作为对象属性的唯一标识符，防止对象属性冲突发生。 Symbol()返回值是唯一的 </span></span><br><span class="line">  <span class="comment">//Symbol("foo") === Symbol("foo"); // false   唯一的</span></span><br><span class="line">  <span class="comment">//symbol 基本数据类型</span></span><br><span class="line">  <span class="comment">//description,可选的，字符串类型。对符号的描述，可用于调试但不是访问符号服务。</span></span><br><span class="line"></span><br><span class="line">  timer: <span class="built_in">Symbol</span>(<span class="string">'timer'</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易的帧动画类实现</span></span><br><span class="line"><span class="comment"> * animation.js就是所有动画所在的文件</span></span><br><span class="line"><span class="comment"> * 引入Spirit类和DataBus类，生成一个databus对象，确定一个Symbol对象</span></span><br><span class="line"><span class="comment"> * 继承Spirit类</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="constructor-2"><a href="#constructor-2" class="headerlink" title="constructor()"></a>constructor()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//constructor 作用是先用图片路径和宽度高度初始化超类spirit类</span></span><br><span class="line">  <span class="keyword">constructor</span>(imgSrc, width, height) &#123;</span><br><span class="line">    <span class="keyword">super</span>(imgSrc, width, height)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前动画是否播放中</span></span><br><span class="line">    <span class="keyword">this</span>.isPlaying = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画是否需要循环播放</span></span><br><span class="line">    <span class="keyword">this</span>.loop = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每一帧的时间间隔</span></span><br><span class="line">    <span class="keyword">this</span>.interval = <span class="number">1000</span> / <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 帧定时器</span></span><br><span class="line">    <span class="keyword">this</span>[__.timer] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前播放的帧</span></span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总帧数</span></span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 帧图片集合</span></span><br><span class="line">    <span class="keyword">this</span>.imgList = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推入到全局动画池里面</span></span><br><span class="line"><span class="comment">     * 便于全局绘图的时候遍历和绘制当前动画帧</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    databus.animations.push(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="initFrames"><a href="#initFrames" class="headerlink" title="initFrames()"></a>initFrames()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化帧动画的所有帧</span></span><br><span class="line"><span class="comment"> * 为了简单，只支持一个帧动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">initFrames(imgList) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(imgList);</span><br><span class="line">  </span><br><span class="line">  imgList.forEach(<span class="function">(<span class="params">imgSrc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">    img.src = imgSrc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.imgList.push(img)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.count = imgList.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="aniRender"><a href="#aniRender" class="headerlink" title="aniRender()"></a>aniRender()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将播放中的帧绘制到canvas上</span></span><br><span class="line"> aniRender(ctx) &#123;</span><br><span class="line">   <span class="comment">//调用drawImage画上动画在该时刻应该有的图像</span></span><br><span class="line">   ctx.drawImage(</span><br><span class="line">     <span class="keyword">this</span>.imgList[<span class="keyword">this</span>.index],</span><br><span class="line">     <span class="keyword">this</span>.x,</span><br><span class="line">     <span class="keyword">this</span>.y,</span><br><span class="line">     <span class="keyword">this</span>.width * <span class="number">1.2</span>,</span><br><span class="line">     <span class="keyword">this</span>.height * <span class="number">1.2</span></span><br><span class="line">   )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="playAnimation"><a href="#playAnimation" class="headerlink" title="playAnimation()"></a>playAnimation()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放预定的帧动画</span></span><br><span class="line"><span class="comment">//将精灵图的可见设为false，在本例子中有一个敌机被击毁，发生了敌机爆炸，展示爆炸的动画，设置正在播放，</span></span><br><span class="line"><span class="comment">//将是否循环的情况设置为初始设置的，初始设置为不循环，判断是否有动画切换间隔和帧数，有的话设置定时器，使用函数setInterval。</span></span><br><span class="line"><span class="comment">//setInterval函数，第一个参数是回调函数，是在这个过程中不断调用的函数，第二个参数是间隔，</span></span><br><span class="line"><span class="comment">//整个函数的含义就是在该间隔内不断调用传入的回调函数，</span></span><br><span class="line"><span class="comment">//猜测是一般情况来说主函数中的图像切换频率大于该间隔，这样才能体现动画的变化</span></span><br><span class="line">playAnimation(index = <span class="number">0</span>, loop = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">// 动画播放的时候精灵图不再展示，播放帧动画的具体帧</span></span><br><span class="line">  <span class="keyword">this</span>.visible = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.isPlaying = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">this</span>.loop = loop</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.index = index</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.interval &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">this</span>[__.timer] = setInterval(</span><br><span class="line">      <span class="keyword">this</span>.frameLoop.bind(<span class="keyword">this</span>),</span><br><span class="line">      <span class="keyword">this</span>.interval</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 停止帧动画播放</span></span><br><span class="line">  <span class="comment">//将播放设置为false，清除原本设置的定时器。</span></span><br><span class="line">  stop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isPlaying = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[__.timer]) clearInterval(<span class="keyword">this</span>[__.timer])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="frameLoop"><a href="#frameLoop" class="headerlink" title="frameLoop()"></a>frameLoop()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 帧遍历</span></span><br><span class="line"> <span class="comment">//帧计数变量index加加，</span></span><br><span class="line"> <span class="comment">//若帧数大于图片数-1，由于计数从0开始，如果要求循环，将index置0，否则将index--，即设置为最后一张图片，并且调用stop()函数暂停。</span></span><br><span class="line"> frameLoop() &#123;</span><br><span class="line">   <span class="keyword">this</span>.index++</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.index &gt; <span class="keyword">this</span>.count - <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.loop) &#123;</span><br><span class="line">       <span class="keyword">this</span>.index = <span class="number">0</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.index--</span><br><span class="line">       <span class="keyword">this</span>.stop()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​    回顾一下,这几个文件都继承或引入了sprite，那我们就来看看这个精灵类,它具体做了哪些事情.</p>
<h2 id="sprite-js"><a href="#sprite-js" class="headerlink" title="sprite.js"></a>sprite.js</h2><p>   代码不多,我直接贴上来,代码中同样夹杂了我自己的一些注释.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏基础的精灵类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Sprite</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(imgSrc = '', width = 0, height = 0, x = 0, y = 0) &#123;  <span class="comment">//生成一个精灵 x,y指图片的左上角坐标</span></span><br><span class="line">    <span class="keyword">this</span>.img = <span class="keyword">new</span> Image()</span><br><span class="line">    <span class="keyword">this</span>.img.src = imgSrc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.width = width</span><br><span class="line">    <span class="keyword">this</span>.height = height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.visible = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将精灵图绘制在canvas上</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  drawToCanvas(ctx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.visible) <span class="keyword">return</span>  <span class="comment">//不可见 则画不到画布上</span></span><br><span class="line"></span><br><span class="line">    ctx.drawImage(</span><br><span class="line">      <span class="keyword">this</span>.img,</span><br><span class="line">      <span class="keyword">this</span>.x,</span><br><span class="line">      <span class="keyword">this</span>.y,</span><br><span class="line">      <span class="keyword">this</span>.width,</span><br><span class="line">      <span class="keyword">this</span>.height</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 简单的碰撞检测定义：</span></span><br><span class="line"><span class="comment">   * 另一个精灵的中心点处于本精灵所在的矩形内即可</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param<span class="type">&#123;Sprite&#125;</span> </span>sp: Sptite的实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  isCollideWith(sp) &#123;</span><br><span class="line">    <span class="comment">//根据传入物体的左上角的坐标和大小计算中心坐标</span></span><br><span class="line">    <span class="keyword">const</span> spX = sp.x + sp.width / <span class="number">2</span> </span><br><span class="line">    <span class="keyword">const</span> spY = sp.y + sp.height / <span class="number">2</span></span><br><span class="line">    <span class="comment">//如果两个物体中任意一个不可见 则无需计算</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.visible || !sp.visible) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断传入物体的中心坐标 是否在该物体的方框之内</span></span><br><span class="line">    <span class="keyword">return</span> !!(spX &gt;= <span class="keyword">this</span>.x</span><br><span class="line">              &amp;&amp; spX &lt;= <span class="keyword">this</span>.x + <span class="keyword">this</span>.width</span><br><span class="line">              &amp;&amp; spY &gt;= <span class="keyword">this</span>.y</span><br><span class="line">              &amp;&amp; spY &lt;= <span class="keyword">this</span>.y + <span class="keyword">this</span>.height)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    最后,我们来看一下,pool.js(对象池的简易实现)</p>
<h2 id="pool-js"><a href="#pool-js" class="headerlink" title="pool.js"></a>pool.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于防止魔术字符串出现的常量列表</span></span><br><span class="line"><span class="comment">//symbol类型为类似于字符串的类型，不能使用new命令，也不能添加属性，在这里声明了一个对象名称为poolDic，用于保存多个对象池的一个字典。</span></span><br><span class="line"><span class="keyword">const</span> __ = &#123;</span><br><span class="line">  poolDic: <span class="built_in">Symbol</span>(<span class="string">'poolDic'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易的对象池实现</span></span><br><span class="line"><span class="comment"> * 用于对象的存贮和重复使用</span></span><br><span class="line"><span class="comment"> * 可以有效减少对象创建开销和避免频繁的垃圾回收</span></span><br><span class="line"><span class="comment"> * 提高游戏性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>[__.poolDic] = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据对象标识符</span></span><br><span class="line"><span class="comment">   * 获取对应的对象池</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getPoolBySign(name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[__.poolDic][name] || (<span class="keyword">this</span>[__.poolDic][name] = [])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据传入的对象标识符，查询对象池</span></span><br><span class="line"><span class="comment">   * 对象池为空创建新的类，否则从对象池中取</span></span><br><span class="line"><span class="comment">   * 获取对象，获取相应对象池，判断对象池是否为空，若不为空，返回第一个元素，并从对象池中移除，若为空，则用传入的类名生成新的一个对象。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getItemByClass(name, className) &#123;</span><br><span class="line">    <span class="keyword">const</span> pool = <span class="keyword">this</span>.getPoolBySign(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = (pool.length</span><br><span class="line">      ? pool.shift()</span><br><span class="line">      : <span class="keyword">new</span> className())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将对象回收到对象池</span></span><br><span class="line"><span class="comment">   * 方便后续继续使用</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  recover(name, instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getPoolBySign(name).push(instance)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    整个demo看下来,首先,小游戏就是一个canvas画布.这个游戏,主体就是敌机,子弹和玩家三类 实际上，他们都是一个单独的精灵,在代码中也继承了精灵类,最终才能绘制在canvas上.敌机类不太一样,因为他有一个爆炸效果,所以继承了动画类,做了一个爆炸的帧动画.我们的main游戏主函数,他是主体,它初始化了背景，玩家，游戏信息,音乐等信息,定义了全局的碰撞检测,实现了游戏的帧循环.而databus则是管理全局的状态,包括敌机，子弹，玩家，动画，分数等。对子弹和敌机做了回收操作.</p>
<p>​    整体调试了几遍代码,在网上也看了相关的分析,算是初步了解了微信小游戏,但对这个demo的理解还是不够深,对一些操作也有点疑问,对微信小游戏感知还是比较模糊.不过，箭在弦上,不得不发了.祝我好运!!!!</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>tp5.1的依赖注入和容器</title>
    <url>/2020/06/25/tp5.1%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%92%8C%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>​        <strong>最近在使用tp5.1做公司的业务,增删改查部分和tp5.0的区别不大,在阅读文档时,看到了依赖注入和容器,这两个词听上去很高大上,之前也没有涉及过,于是,学习了一波。首先,我们要明确依赖注入和容器没有必然的关系。</strong> <strong>所谓的依赖注入,就是将对象类型的数据 以参数的方式传到方法的参数列表 解决了向类中的方法传递对象的问题。而容器就是一个类,容器类,他是用来对类进行管理,可以理解为数组,一个key对应一个value,tp5.1中,这个key叫做标识,通过一个key对应一个类名/闭包函数/类实例/接口,我们可以把一个类绑定到容器中,然后进行使用,从而调用类的方法.</strong></p>
<a id="more"></a>

<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><strong>依赖</strong>:<strong>依赖是一种关系，A类中实例化了B类，那么A类的使用就需要用到B类，就叫做：B类是A类的依赖，也就是A类依赖于B类。</strong></p>
<p><strong>依赖注入的对象参数支持多个，并且和顺序无关。</strong></p>
<p><strong>支持使用依赖注入的场景包括（但不限于）：</strong></p>
<ul>
<li>控制器架构方法；</li>
<li>控制器操作方法；</li>
<li>数据库和模型事件方法；</li>
<li>路由的闭包定义；</li>
<li>行为类的方法；</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMethod</span><span class="params">(\app\common\Temp $temp)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"><span class="comment">//            \app\common\Temp $temp 等价于  无需在类中实例化依赖类</span></span><br><span class="line"><span class="comment">//                $temp = new \app\common\Temp;</span></span><br><span class="line">                $temp-&gt;setName(<span class="string">'php'</span>);</span><br><span class="line">                <span class="keyword">return</span> $temp-&gt;getName();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">common</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Temp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> app\common</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">'giao'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'方法是:'</span>.<span class="keyword">__METHOD__</span>.<span class="string">'属性是:'</span>.<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><strong>容器的原理:单例模式 工厂模式 注册树模式</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $test; <span class="comment">//私有的静态成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($siteName)</span>   //类实例化时自动调用构造函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;siteName = $siteName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;  <span class="comment">//覆盖克隆方法 禁止克隆</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($siteName=<span class="string">'php'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">self</span>::$test)) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$test = <span class="keyword">new</span> test($siteName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂模式来生成本类的单一实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//创建指定类的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test::getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象注册树</span></span><br><span class="line"><span class="comment"> * 注册: set() 把对象挂到树上</span></span><br><span class="line"><span class="comment"> * 获取: get() 把对象取下来用</span></span><br><span class="line"><span class="comment"> * 注销: _unset() 把对象吃掉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//创建对象池: 数组</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> $objects = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成对象并上树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($alias,$object)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">self</span>::$objects[$alias] = $object;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从树上取下对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">self</span>::$objects[$alias];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把树上的对象吃掉</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">unset</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">self</span>::$objects[$alias]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Register::set(<span class="string">'site'</span>,Factory::create());</span><br><span class="line">$obj = Register::get(<span class="string">'site'</span>);</span><br><span class="line">var_dump($obj);</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;siteName;</span><br></pre></td></tr></table></figure>

<p>​     <strong>tp5.1中容器类的工作由think\Container类完成，如果理解了上面的代码,阅读源码还是很好理解的,使用过程中也可以更容易找到错误.</strong></p>
<h3 id="容器的绑定和使用"><a href="#容器的绑定和使用" class="headerlink" title="容器的绑定和使用"></a>容器的绑定和使用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定一个类到容器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bindClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//把一个类放到容器中 相当于注册到容器中</span></span><br><span class="line">           Container::set(<span class="string">'temp'</span>,<span class="string">'\app\common\Temp'</span>);</span><br><span class="line">           <span class="comment">//助手函数的使用 helper.php</span></span><br><span class="line"><span class="comment">//            bind('temp','\app\common\Temp');</span></span><br><span class="line"><span class="comment">//            $temp=app('temp',['name'=&gt;'cxk_gigo']);</span></span><br><span class="line">    </span><br><span class="line">            $temp=Container::get(<span class="string">'temp'</span>,[<span class="string">'name'</span>=&gt;<span class="string">'gigo_gigo'</span>]);</span><br><span class="line">            <span class="keyword">return</span> $temp-&gt;getName();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//绑定一个闭包到函数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bindClosure</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//把一个闭包放到容器中</span></span><br><span class="line">            Container::set(<span class="string">'demo'</span>,<span class="function"><span class="keyword">function</span><span class="params">($domain)</span></span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">'mydal博客的域名是'</span>.$domain;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Container::get(<span class="string">'demo'</span>,[<span class="string">'domain'</span>=&gt;<span class="string">'mydal.cn'</span>]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>​            <strong>自己对于依赖注入和容器的理解还是很浅显,以后工作中在更多场景使用之后,应该可以加强理解,本篇博客只是一个记录。</strong></p>
]]></content>
      <categories>
        <category>php从入门到放弃</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli4 配置开发,测试,生产环境(打包上传到oss)</title>
    <url>/2021/12/16/vue-cli4-%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91-%E6%B5%8B%E8%AF%95-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>​    在工作中,一般我们会有三个环境,开发,测试,生产。我们想要实现通过不同的命令，打包调用不同环境的API,来完成这三个环境的部署.</p>
<p><img src="https://s2.loli.net/2021/12/16/GhLUjlQf468MDNm.jpg" alt=""></p>
<a id="more"></a>

<h2 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h2><p>我们在项目根目录新建env.dev,env.prod,env.test这三个文件.配置如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//env.dev</span></span><br><span class="line">NODE_ENV = <span class="string">'development'</span></span><br><span class="line">VUE_APP_MODE = <span class="string">'development'</span>  <span class="comment">//模式 </span></span><br><span class="line">VUE_APP_BASEURL = <span class="string">'http://192.168.xxx.xxx:8088'</span> <span class="comment">//本地开发服务器地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//env.test</span></span><br><span class="line">NODE_ENV = <span class="string">'production'</span></span><br><span class="line">VUE_APP_MODE = <span class="string">'test'</span></span><br><span class="line">VUE_APP_BASEURL = <span class="string">'//test-xxxxx.com'</span> <span class="comment">//测试环境服务器地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//env.prod</span></span><br><span class="line">NODE_ENV = <span class="string">'production'</span></span><br><span class="line">VUE_APP_MODE = <span class="string">'production'</span></span><br><span class="line">VUE_APP_BASEURL = <span class="string">'//xxx.xxxx.com'</span><span class="comment">//生产环境服务器地址</span></span><br></pre></td></tr></table></figure>

<h2 id="修改package-json"><a href="#修改package-json" class="headerlink" title="修改package.json"></a>修改package.json</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加打包命令</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "serve": "vue-cli-service serve --mode dev",</span><br><span class="line">    "test": "vue-cli-service serve --mode test",</span><br><span class="line">    "build:test": "vue-cli-service build --mode test", //测试 </span><br><span class="line">    "build:prod": "vue-cli-service build --mode prod", //生产</span><br><span class="line">    "lint": "vue-cli-service lint"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开发环境</span></span><br><span class="line">yarn serve</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试环境</span></span><br><span class="line">yarn build:<span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#生产环境</span></span><br><span class="line">yarn build:prod</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#打印当前处于哪个环境</span><br><span class="line"><span class="built_in">console</span>.log(process.env)</span><br></pre></td></tr></table></figure>

<h2 id="打包生产环境上传到oss"><a href="#打包生产环境上传到oss" class="headerlink" title="打包生产环境上传到oss"></a>打包生产环境上传到oss</h2><h4 id="安装webpack-aliyun-oss-plugin包"><a href="#安装webpack-aliyun-oss-plugin包" class="headerlink" title="安装webpack-aliyun-oss-plugin包"></a>安装webpack-aliyun-oss-plugin包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add webpack-aliyun-oss-plugin --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="修改vue-config"><a href="#修改vue-config" class="headerlink" title="修改vue.config"></a>修改vue.config</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebpackAliyunOss = <span class="built_in">require</span>(<span class="string">"webpack-aliyun-oss"</span>); <span class="comment">// 引入webpack-aliyun-oss</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/train-backend'</span>: &#123;</span><br><span class="line">        target: process.env.VUE_APP_BASEURL,</span><br><span class="line">        <span class="comment">// 允许跨域</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  publicPath:<span class="string">'https://xxxxx.xxx.com/xxx/www/xxx/'</span> <span class="comment">//服务器绝对路径</span></span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(process.env.VUE_APP_MODE === <span class="string">'production'</span>)&#123; <span class="comment">//当生产环境时进行上传</span></span><br><span class="line">        <span class="keyword">let</span> webpackAliyunOss = [</span><br><span class="line">          <span class="keyword">new</span> WebpackAliyunOss(&#123;</span><br><span class="line">            <span class="keyword">from</span>: [<span class="string">'./dist/**'</span>,], <span class="comment">// 上传那个文件或文件夹  可以是字符串或数组 我这边默认dist全部上传</span></span><br><span class="line">            dist: <span class="string">"/xxxx/www/xxxx/"</span>,  <span class="comment">// 需要上传到oss上的给定文件目录</span></span><br><span class="line">            region: <span class="string">'oss-cn-beijing'</span>, <span class="comment">// 区域 我这边是北京 视情况而定</span></span><br><span class="line">            accessKeyId: <span class="string">''</span>, <span class="comment">//oss的keyid</span></span><br><span class="line">            accessKeySecret: <span class="string">''</span>,<span class="comment">//oss的keysecret</span></span><br><span class="line">            bucket: <span class="string">''</span>,<span class="comment">//bucket的名称 自己定</span></span><br><span class="line">            overwrite: <span class="literal">true</span>,</span><br><span class="line">            setOssPath: <span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// some operations to filePath</span></span><br><span class="line">              <span class="keyword">let</span> index = filePath.lastIndexOf(<span class="string">"dist"</span>);</span><br><span class="line">              <span class="keyword">let</span> Path = filePath.substring(index + <span class="number">4</span>, filePath.length);</span><br><span class="line">              <span class="keyword">return</span> Path.replace(<span class="regexp">/\\/g</span>, <span class="string">"/"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            setHeaders: <span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">"Cache-Control"</span>: <span class="string">"max-age=31536000"</span></span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        ];</span><br><span class="line">        config.plugins = [...config.plugins, ...webpackAliyunOss ];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>想要每次推送到<code>oss</code>都覆盖原先的文件, 将WebpackAliyunOss的<code>overwrite</code>设置为<code>true</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.config = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">		test: <span class="literal">false</span>,				<span class="comment">// 测试</span></span><br><span class="line">		dist: <span class="string">''</span>,					<span class="comment">// oss目录</span></span><br><span class="line">		buildRoot: <span class="string">'.'</span>,				<span class="comment">// 构建目录名</span></span><br><span class="line">		deleteOrigin: <span class="literal">false</span>,		<span class="comment">// 是否删除源文件</span></span><br><span class="line">		timeout: <span class="number">30</span> * <span class="number">1000</span>,			<span class="comment">// 超时时间</span></span><br><span class="line">		parallel: <span class="number">5</span>,				<span class="comment">// 并发数</span></span><br><span class="line">		setOssPath: <span class="literal">null</span>,			<span class="comment">// 手动设置每个文件的上传路径</span></span><br><span class="line">		setHeaders: <span class="literal">null</span>,			<span class="comment">// 设置头部</span></span><br><span class="line">		overwrite: <span class="literal">true</span>,			<span class="comment">// 覆盖oss同名文件</span></span><br><span class="line">		bail: <span class="literal">false</span>,				<span class="comment">// 出错中断上传</span></span><br><span class="line">		logToLocal: <span class="literal">false</span>			<span class="comment">// 出错信息写入本地文件</span></span><br><span class="line">	&#125;, options);</span><br></pre></td></tr></table></figure>

<h2 id="打包测试环境和生产环境到oss"><a href="#打包测试环境和生产环境到oss" class="headerlink" title="打包测试环境和生产环境到oss"></a>打包测试环境和生产环境到oss</h2><p><strong>对publicPath添加判断,代码如下：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">publicPath: process.env.VUE_APP_MODE === <span class="string">'production'</span>? <span class="string">'https://xxx.com/xxx/www/xxx/'</span>:(process.env.VUE_APP_MODE===<span class="string">'test'</span>?<span class="string">'https://xxx.com/xxx/www-test/xxxx/'</span>:<span class="string">'./'</span>),</span><br></pre></td></tr></table></figure>

<p><strong>再次修改vue.config</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(process.env.VUE_APP_MODE === <span class="string">'production'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> webpackAliyunOss = [</span><br><span class="line">          <span class="keyword">new</span> WebpackAliyunOss(&#123;</span><br><span class="line">            <span class="keyword">from</span>: [<span class="string">'./dist/**'</span>,], <span class="comment">// 上传那个文件或文件夹  可以是字符串或数组 我这边默认dist全部上传</span></span><br><span class="line">            dist: <span class="string">"/xxxx/www/xxxx/"</span>,  <span class="comment">// 需要上传到oss上的给定文件目录</span></span><br><span class="line">            region: <span class="string">'oss-cn-beijing'</span>, <span class="comment">// 区域 我这边是北京 视情况而定</span></span><br><span class="line">            accessKeyId: <span class="string">''</span>, <span class="comment">//oss的keyid</span></span><br><span class="line">            accessKeySecret: <span class="string">''</span>,<span class="comment">//oss的keysecret</span></span><br><span class="line">            bucket: <span class="string">''</span>,<span class="comment">//bucket的名称 自己定</span></span><br><span class="line">            overwrite: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// putACL: 'public-read', // **webpack-ali-oss-upload 新增参数 设置oss上传文件读写权限**</span></span><br><span class="line">            <span class="comment">// test: true,</span></span><br><span class="line">            setOssPath: <span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// some operations to filePath</span></span><br><span class="line">              <span class="keyword">let</span> index = filePath.lastIndexOf(<span class="string">"dist"</span>);</span><br><span class="line">              <span class="keyword">let</span> Path = filePath.substring(index + <span class="number">4</span>, filePath.length);</span><br><span class="line">              <span class="keyword">return</span> Path.replace(<span class="regexp">/\\/g</span>, <span class="string">"/"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            setHeaders: <span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// some operations to filePath</span></span><br><span class="line">              <span class="comment">// return false to use default header</span></span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">"Cache-Control"</span>: <span class="string">"max-age=31536000"</span></span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        ];</span><br><span class="line">        config.plugins = [...config.plugins, ...webpackAliyunOss ];</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(process.env.VUE_APP_MODE === <span class="string">'test'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> webpackAliyunOss = [</span><br><span class="line">          <span class="keyword">new</span> WebpackAliyunOss(&#123;</span><br><span class="line">            <span class="keyword">from</span>: [<span class="string">'./dist/**'</span>,], <span class="comment">// 上传那个文件或文件夹  可以是字符串或数组 我这边默认dist全部上传</span></span><br><span class="line">            dist: <span class="string">"/xxxx/test-www/xxxx/"</span>,  <span class="comment">// 需要上传到oss上的给定文件目录</span></span><br><span class="line">            region: <span class="string">'oss-cn-beijing'</span>, <span class="comment">// 区域 我这边是北京 视情况而定</span></span><br><span class="line">            accessKeyId: <span class="string">''</span>, <span class="comment">//oss的keyid</span></span><br><span class="line">            accessKeySecret: <span class="string">''</span>,<span class="comment">//oss的keysecret</span></span><br><span class="line">            bucket: <span class="string">''</span>,<span class="comment">//bucket的名称 自己定</span></span><br><span class="line">            overwrite: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// putACL: 'public-read', // **webpack-ali-oss-upload 新增参数 设置oss上传文件读写权限**</span></span><br><span class="line">            <span class="comment">// test: true,</span></span><br><span class="line">            setOssPath: <span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// some operations to filePath</span></span><br><span class="line">              <span class="keyword">let</span> index = filePath.lastIndexOf(<span class="string">"dist"</span>);</span><br><span class="line">              <span class="keyword">let</span> Path = filePath.substring(index + <span class="number">4</span>, filePath.length);</span><br><span class="line">              <span class="keyword">return</span> Path.replace(<span class="regexp">/\\/g</span>, <span class="string">"/"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            setHeaders: <span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// some operations to filePath</span></span><br><span class="line">              <span class="comment">// return false to use default header</span></span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">"Cache-Control"</span>: <span class="string">"max-age=31536000"</span></span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        ];</span><br><span class="line">        config.plugins = [...config.plugins, ...webpackAliyunOss ];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>生活枯燥无味,努力才有滋味!!!!!!</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序登录</title>
    <url>/2020/04/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/04/06/Wa3jVBRl4gIe7PJ.png" alt="11.png"></p>
<a id="more"></a>

<h1 id="微信小程序登录流程"><a href="#微信小程序登录流程" class="headerlink" title="微信小程序登录流程"></a>微信小程序登录流程</h1><p>一张图了解微信小程序登录流程</p>
<p><img src="https://i.loli.net/2020/04/06/1HjJsdD9V6lmoSA.png" alt="11.png"></p>
<h2 id="微信小程序发送请求-wx-login"><a href="#微信小程序发送请求-wx-login" class="headerlink" title="微信小程序发送请求(wx.login())"></a>微信小程序发送请求(wx.login())</h2><p>通过wx.login()获取临时凭证code 并传回到后台</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  <span class="comment">//获取用户对象信息</span></span><br><span class="line">  <span class="keyword">var</span> userInfo = res.detail.userInfo;</span><br><span class="line">  wx.setStorageSync(<span class="string">"userInfo"</span>, userInfo);  <span class="comment">//设置缓存</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    userInfo: userInfo,</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.login(&#123;</span><br><span class="line">    success(res) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.code) &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url: config.baseUrl + <span class="string">"/token"</span>,  <span class="comment">//发送到后台</span></span><br><span class="line">          data: &#123;</span><br><span class="line">            code: res.code, <span class="comment">//临时凭证code</span></span><br><span class="line">            nickName: userInfo.nickName,  <span class="comment">//用户对象昵称</span></span><br><span class="line">            avatarUrl: userInfo.avatarUrl <span class="comment">//用户对象头像</span></span><br><span class="line">          &#125;,</span><br><span class="line">          method: <span class="string">'POST'</span>,</span><br><span class="line">          dataType: <span class="string">'json'</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> token = res.data.token;</span><br><span class="line">            wx.setStorageSync(<span class="string">'token'</span>, token); <span class="comment">//设置缓存</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="tp5后台处理"><a href="#tp5后台处理" class="headerlink" title="tp5后台处理"></a>tp5后台处理</h2><ul>
<li>接收到code  通过curl调用小程序接口 发送请求 将code appid secret 发送过去 请求成功 拿到 session_key 和openid</li>
<li>将openid和用户的名称头像存到数据表中</li>
<li>生成令牌做为自定义登录态 返回给前台 前台存到缓存中  自定义登录态与openid关联</li>
<li>微信小程序发起业务请求时从缓存中拿到token令牌 验证是否登录</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">token</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $code=input(<span class="string">'post.code'</span>); <span class="comment">//接收微信小程序发送过来的code</span></span><br><span class="line">        <span class="comment">//初始化curl  通过curl向微信小程序接口服务 发送请求</span></span><br><span class="line">        $ch=curl_init();</span><br><span class="line">        <span class="comment">//设置选项</span></span><br><span class="line">        $appid=<span class="string">"wxad72f080afae7980"</span>;  </span><br><span class="line">        $secret=<span class="string">"ebf7abfded334145e4de09d7ec2c3969"</span>;</span><br><span class="line">        <span class="comment">//登录凭证校验</span></span><br><span class="line">        $url=<span class="string">"https://api.weixin.qq.com/sns/jscode2session?appid=$appid&amp;secret=$secret&amp;js_code=$code&amp;grant_type=authorization_code"</span>; <span class="comment">//需要发送appid secret code</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * curl_init() 和 curl_close() 分别是初始化CURL连接和关闭CURL连接，</span></span><br><span class="line"><span class="comment">         * curl_exec() 执行CURL请求，如果没有错误发生，该函数的返回是对应URL返回的数据,json字符串的格式；如果发生错误，该函数返回 FALSE。需要注意的是，判断输出是否为FALSE用的是全等号，这是为了区分返回空串和出错的情况。</span></span><br><span class="line"><span class="comment">         * CURL函数库里最重要的函数是curl_setopt(),它可以通过设定CURL函数库定义的选项来定制HTTP请求。上述代码片段中使用了三个重要的选项：</span></span><br><span class="line"><span class="comment">         * CURLOPT_URL 指定请求的URL；</span></span><br><span class="line"><span class="comment">         * CURLOPT_RETURNTRANSFER 设置为1表示稍后执行的curl_exec函数的返回是URL的返回字符串，而不是把返回字符串定向到标准输出并返回TRUE；</span></span><br><span class="line"><span class="comment">         * CURLLOPT_HEADER设置为0表示不返回HTTP头部信息。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">        curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch,CURLOPT_HEADER,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置为不是https也可以访问</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * CURLOPT_SSL_VERIFYHOST</span></span><br><span class="line"><span class="comment">         * 设置为 1 是检查服务器SSL证书中是否存在一个公用名(common name)。译者注：公用名(Common Name)</span></span><br><span class="line"><span class="comment">         * 一般来讲就是填写你将要申请SSL证书的域名 (domain)或子域名(sub domain)。</span></span><br><span class="line"><span class="comment">         * 设置成 2，会检查公用名是否存在，并且是否与提供的主机名匹配。</span></span><br><span class="line"><span class="comment">         * 0 为不检查名称。 在生产环境中，这个值应该是 2（默认值）。</span></span><br><span class="line"><span class="comment">         * 值 1 的支持在 cURL 7.28.1 中被删除了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,0);</span></span><br><span class="line"><span class="comment">//        curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行curl获取HTML文档内容</span></span><br><span class="line">        $output=curl_exec($ch);</span><br><span class="line">        <span class="keyword">if</span>($output===<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"CURL Error:"</span>.curl_error($ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放curl句柄</span></span><br><span class="line">        curl_close($ch);</span><br><span class="line"><span class="comment">//        return $output;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//将json解码转换为数组</span></span><br><span class="line">        $curl_result=json_decode($output,<span class="keyword">true</span>); <span class="comment">//assoc 值为TRUE时返回数组，FALSE时返回对象；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断错误信息</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($curl_result[<span class="string">'errcode'</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> json([</span><br><span class="line">                <span class="string">'status'</span>=&gt;<span class="number">0</span>,</span><br><span class="line">                <span class="string">'msg'</span>=&gt;<span class="string">' Invalid parameter'</span> <span class="comment">//无效的参数</span></span><br><span class="line">            ],<span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $model=User::get([<span class="string">'openid'</span>=&gt;$curl_result[<span class="string">'openid'</span>]]); <span class="comment">//请求成功之后拿到openid 进行比对</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($model)&#123;</span><br><span class="line">            $userid=$model-&gt;id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $data=<span class="keyword">array</span>(  <span class="comment">//插入到数据表中</span></span><br><span class="line">                <span class="string">'openid'</span>=&gt;$curl_result[<span class="string">'openid'</span>],</span><br><span class="line">                <span class="string">'nickName'</span>=&gt;input(<span class="string">'post.nickName'</span>),</span><br><span class="line">                <span class="string">'avatarUrl'</span>=&gt;input(<span class="string">'post.avatarUrl'</span>)</span><br><span class="line">            );</span><br><span class="line">            $model=User::create($data);</span><br><span class="line">            $userid=$model-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成令牌</span></span><br><span class="line">        $token=<span class="keyword">$this</span>-&gt;generalToken(<span class="number">32</span>);</span><br><span class="line">        User::where(<span class="string">'id'</span>,$userid)-&gt;update([<span class="string">'token'</span>=&gt;$token]);</span><br><span class="line">        <span class="keyword">return</span>[</span><br><span class="line">            <span class="string">'token'</span>=&gt;$token</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//生成令牌  做为自定义登录态 返回到微信小程序前台  前台存到缓存中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generalToken</span><span class="params">($length)</span></span>&#123;  </span><br><span class="line">        <span class="comment">//令牌就是生成一系列的随机字符串</span></span><br><span class="line">        $str=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">        $result=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$length;$i++)&#123;</span><br><span class="line">            $result.=$str[rand(<span class="number">0</span>,<span class="number">61</span>)]; <span class="comment">//rand() 函数返回随机整数。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前时间戳</span></span><br><span class="line">        $time=$_SERVER[<span class="string">'REQUEST_TIME'</span>];</span><br><span class="line">        <span class="keyword">return</span> md5($result.$time);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信小程序验证是否登录"><a href="#微信小程序验证是否登录" class="headerlink" title="微信小程序验证是否登录"></a>微信小程序验证是否登录</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//验证用户登录</span></span><br><span class="line">​    <span class="keyword">var</span> token = wx.getStorageSync(<span class="string">'token'</span>);</span><br><span class="line">​    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">​      wx.showToast(&#123;</span><br><span class="line">​        title: <span class="string">'请先登录'</span>,</span><br><span class="line">​        icon: <span class="string">'none'</span></span><br><span class="line">​      &#125;)</span><br><span class="line">​      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">​    &#125; <span class="comment">//登录成功发送业务请求</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2020/03/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="微信小程序中this指向"><a href="#微信小程序中this指向" class="headerlink" title="微信小程序中this指向"></a>微信小程序中this指向</h1><p>​        最近在学习微信小程序,踩了一个this指向的坑,记录一下.</p>
<p><img src="https://i.loli.net/2020/03/29/kl43WqrHaQA5hNi.png" alt="11.png"></p>
<a id="more"></a>

<p>图片中可以看到 页面加载函数中的this是page的全局this</p>
<p><img src="https://i.loli.net/2020/03/29/EaIcfwUmeBbx1ij.png" alt="111.png"></p>
<p>同样在我自定义的函数中,this也是全局this,这都没有什么问题. 问题出在闭包函数</p>
<p><img src="https://i.loli.net/2020/03/29/yrnOvdTtRXIP3Yg.png" alt="111.png"></p>
<p>可以看到当我使用<code>wx.request({})</code>来请求<code>api</code>接口时,success回调函数中的this是未定义的。这就有问题了,当我们想把接收到的接口数据返回给视图页面时,一般要用<code>this.setData({})</code>进行设置,要解决这个问题很简单,两种方法.</p>
<h2 id="第一种解决方法"><a href="#第一种解决方法" class="headerlink" title="第一种解决方法"></a>第一种解决方法</h2><p>在请求的外部也就是全局this的作用域下声明一个变量 来接收全局this</p>
<p><img src="https://i.loli.net/2020/03/29/ix5ntVzOduDefR3.png" alt="111.png"></p>
<h2 id="第二种解决方法"><a href="#第二种解决方法" class="headerlink" title="第二种解决方法"></a>第二种解决方法</h2><p>使用<code>es6</code>的箭头函数</p>
<p>小程序中箭头函数中的this是指的是父作用域的this. 箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>
<p><img src="https://i.loli.net/2020/03/29/oyw5127BeLlQAX9.png" alt="1111.png"></p>
<p><img src="https://i.loli.net/2020/03/29/ehdBtS7cDb9j3Ll.png" alt="111.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖和节流</title>
    <url>/2022/03/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h1 id="什么是防抖和节流"><a href="#什么是防抖和节流" class="headerlink" title="什么是防抖和节流"></a>什么是防抖和节流</h1><p><strong>防抖(debounce)</strong></p>
<p>触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间</p>
<p><strong>节流(throttle)</strong></p>
<p>高频事件触发，但在 n 秒内只会执行一次所以节流会稀释函数的执行频率</p>
<a id="more"></a>

<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖，顾名思义，防止抖动，以免把一次事件误认为多次，敲键盘就是一个每天都会接触到的防抖操作。</p>
<p>想要了解一个概念，必先了解概念所应用的场景。在 JS 这个世界中，有哪些防抖的场景呢</p>
<ol>
<li>登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖</li>
<li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li>
<li>文本编辑器实时保存，当无任何更改操作一秒后进行保存</li>
</ol>
<p>代码如下，可以看出来<strong>防抖重在清零 <code>clearTimeout(timer)</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">f, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      f(...args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>节流，顾名思义，控制水的流量。控制事件发生的频率，如控制为 1s 发生一次，甚至 1 分钟发生一次。</p>
<ol>
<li><code>scroll</code> 事件，每隔一秒计算一次位置信息等</li>
<li>浏览器播放事件，每个一秒计算一次进度信息等</li>
<li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)</li>
</ol>
<p>代码如下，可以看出来<strong>节流重在加锁 <code>timer=timeout</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">f, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      f(...args);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>防抖：防止抖动，单位时间内事件触发会被重置，避免事件被误伤触发多次。<strong>代码实现重在清零 <code>clearTimeout</code></strong>。防抖可以比作等电梯，只要有一个人进来，就需要再等一会儿。业务场景有避免登录按钮多次点击的重复提交。</li>
<li>节流：控制流量，单位时间内事件只能触发一次。<strong>代码实现重在开锁关锁 <code>timer=timeout; timer=null</code></strong>。节流可以比作过红绿灯，每等一个红灯时间就可以过一批。</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏引擎调研</title>
    <url>/2021/12/24/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<p>​        最近要开发一个微信小游戏,要用到游戏引擎,本人对这方面不了解,所以对市面上比较流行的游戏引擎做一个调研</p>
<a id="more"></a>

<h2 id="游戏引擎是什么"><a href="#游戏引擎是什么" class="headerlink" title="游戏引擎是什么?"></a>游戏引擎是什么?</h2><p>​        <strong>游戏引擎</strong>是指一些已编写好的可编辑电脑游戏系统或者一些交互式实时图像应用程序的核心组件。这些系统为<a href="https://zh.wikipedia.org/wiki/遊戲設計師" target="_blank" rel="noopener">游戏设计者</a>提供各种编写游戏所需的各种工具，其目的在于让游戏设计者能容易和快速地做出游戏程序，而不用由零开始。大部分都支持多种操作系统平台，如<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>、<a href="https://zh.wikipedia.org/wiki/Mac_OS_X" target="_blank" rel="noopener">Mac OS X</a>、<a href="https://zh.wikipedia.org/wiki/Windows" target="_blank" rel="noopener">Windows</a>。大多数游戏引擎包含以下系统：<a href="https://zh.wikipedia.org/wiki/渲染" target="_blank" rel="noopener">渲染</a>引擎（即“<a href="https://zh.wikipedia.org/wiki/渲染器" target="_blank" rel="noopener">渲染器</a>”，含<a href="https://zh.wikipedia.org/wiki/二维图像引擎" target="_blank" rel="noopener">二维图像引擎</a>和<a href="https://zh.wikipedia.org/w/index.php?title=三维图像引擎&action=edit&redlink=1" target="_blank" rel="noopener">三维图像引擎</a>）、<a href="https://zh.wikipedia.org/wiki/物理引擎" target="_blank" rel="noopener">物理引擎</a>、碰撞检测系统、<a href="https://zh.wikipedia.org/wiki/音效" target="_blank" rel="noopener">音效</a>、<a href="https://zh.wikipedia.org/w/index.php?title=脚本引擎&action=edit&redlink=1" target="_blank" rel="noopener">脚本引擎</a>、<a href="https://zh.wikipedia.org/wiki/电脑动画" target="_blank" rel="noopener">电脑动画</a>、<a href="https://zh.wikipedia.org/wiki/人工智能" target="_blank" rel="noopener">人工智能</a>、<a href="https://zh.wikipedia.org/wiki/互聯網" target="_blank" rel="noopener">网络</a>引擎以及场景管理等</p>
<h2 id="流行引擎盘点"><a href="#流行引擎盘点" class="headerlink" title="流行引擎盘点"></a>流行引擎盘点</h2><h3 id="1-Cocos2d-x"><a href="#1-Cocos2d-x" class="headerlink" title="1.Cocos2d-x"></a>1.Cocos2d-x</h3><p><strong>官方网址</strong>:<a href="https://www.cocos.com/" target="_blank" rel="noopener">https://www.cocos.com/</a></p>
<p><strong>代表作</strong>: 《捕鱼达人》《欢乐斗地主》《开心消消乐》《保卫萝卜》《梦幻西游》《大话西游》《神武》《问道》《征途》等.</p>
<p><strong>编程语言</strong>: JavaScript,C++,lua</p>
<p><strong>概述</strong>: Cocos2d-x 是一套成熟的开源跨平台游戏开发框架。引擎提供了图形渲染、GUI、音频、网络、物理、用户输入等丰富的功能， 被广泛应用于游戏开发及交互式应用的构建。其核心采用 C++ 编写，支持使用 C++、Lua 或 JavaScript 进行开发。</p>
<h3 id="2-Cocos-creator"><a href="#2-Cocos-creator" class="headerlink" title="2.Cocos creator"></a>2.Cocos creator</h3><p><strong>官方网址</strong>:<a href="https://www.cocos.com/" target="_blank" rel="noopener">https://www.cocos.com/</a></p>
<p><strong>代表作</strong>:《剑与远征》《保卫萝卜2》《热血传奇》《开心消消乐》</p>
<p><strong>编程语言</strong>: JavaScript, TypeScript</p>
<p><strong>概述</strong>: Cocos Creator 是以内容创作为核心，实现了脚本化、组件化和数据驱动的游戏开发工具。 具备了易于上手的内容生产工作流，以及功能强大的开发者工具套件，可用于实现游戏逻辑和高性能游戏效果</p>
<h3 id="3-laya"><a href="#3-laya" class="headerlink" title="3.laya"></a>3.laya</h3><p>官方网址:<a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com/</a></p>
<p><img src="https://s2.loli.net/2021/12/24/paOK5bFgRGmNQYc.png" alt=""></p>
<p><strong>代表作</strong>:《全民枪神边境王者》《大天使之剑H5》《斗罗大陆》《泡面三国》</p>
<p><strong>编程语言</strong>: ActionScript, TypeScript, JavaScript</p>
<p><strong>概述</strong>:    LayaAir是基于webGL的开源引擎，性能与3D是引擎的核心竞争力。配套引擎专属的可视化开发工具，引擎与工具同时支持ActionScript3、JavaScript、TypeScript三种开发语言，并且一次开发可以同时发布APP（安卓与iOS）、HTML5、小游戏（微信小游戏、QQ小游戏、百度小游戏、支付宝小游戏、BiliBili小游戏、字节跳动小游戏、小米快游戏、OPPO小游戏、vivo小游戏、华为快游戏、等）。除支持2D\3D的游戏开发外，引擎还可以用于应用软件、广告、营销、教育、线上虚拟展馆、智慧城市、智慧工业等领域。</p>
<h3 id="4-egret-白鹭引擎"><a href="#4-egret-白鹭引擎" class="headerlink" title="4.egret 白鹭引擎"></a>4.egret 白鹭引擎</h3><p><strong>官方网址</strong>:<a href="https://www.egret.com/" target="_blank" rel="noopener">https://www.egret.com/</a></p>
<p><strong>代表作</strong>:《全民狙神》 《梦幻西游网页版》 《迷你世界创造版》</p>
<p><strong>编程语言</strong>: TypeScript</p>
<p><strong>概述</strong>:    白鹭科技专注技术创新，攻克底层技术制约，为开发者带来一整套游戏研发解决方案，自主研发了白鹭引擎（Egret Engine）、Egret Pro、白鹭加速器（Egret Runtime）、骨骼动画工具(Dragon Bones)、可视化编辑器（EUI Editor）等多款产品，让开发者简单、高效的开发出移动游戏。</p>
<h3 id="5-unity"><a href="#5-unity" class="headerlink" title="5.unity"></a>5.unity</h3><p><strong>官方网址</strong>:<a href="https://unity.cn/madewithunity" target="_blank" rel="noopener">https://unity.cn/madewithunity</a></p>
<p><strong>代表作</strong>:《英雄联盟手游》《一人之下》《非常英雄》《王者荣耀》《火影忍者》《原神》《崩坏》</p>
<p><strong>编程语言</strong>:C#,Lua</p>
<p><strong>概述</strong>: Unity侧重轻量级的开发，更偏向于移动端，在手游方面是非常强的，大概有70%的手游都是使用Unity开发的；自由度比较高，跨平台是最好的几乎支持所有主流平台，可以充分发挥开发者的想法和思路去做创意类型的游戏；更支持VR、AR相关应用的开发；</p>
<h3 id="6-UE4"><a href="#6-UE4" class="headerlink" title="6.UE4"></a>6.UE4</h3><p><strong>官方网址</strong>:<a href="https://www.unrealengine.com/zh-CN/" target="_blank" rel="noopener">https://www.unrealengine.com/zh-CN/</a></p>
<p><strong>代表作</strong>:黑神话悟空,吃鸡,天刀,和平精英</p>
<p><strong>编程语言</strong>:C++</p>
<p><strong>概述</strong>：UE4适合重量级开发，更侧重于PC，端游以及高端手游，对于中低端手机兼容性略差；渲染效果一流，用户体验更好；引擎源代码开源；</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    现在市场上,专注于小游戏的公司,使用cocos和laya比较多.对于中小型以上的游戏公司，使用最多的是unity，unity是现在市面上使用最广的游戏引擎，也是使用人员最多的引擎。对于大型的游戏公司，很多都有自己的UE4 项目，大的游戏公司都在探索，是未来的主流.</p>
<p>​    对于我们这个项目来言,使用cocos或laya都比较适合,首先支持js和ts编程语言,其次,支持发布在各类小游戏平台。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次h5样式兼容问题</title>
    <url>/2021/12/23/%E8%AE%B0%E4%B8%80%E6%AC%A1h5%E6%A0%B7%E5%BC%8F%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>​    这个h5项目是公司一个大佬写的,react+ts的框架,然后放到了app里面,其他手机一切正常,在一个安卓8.1的vivo手机上样式不正常.并且vivo手机的浏览器直接打开h5也是正常的,所以比较奇怪,特此记录一下.</p>
<a id="more"></a>

<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>​    在vivo手机上样式效果</p>
<p><img src="https://s2.loli.net/2021/12/23/bxdyVhgnCzHTqmk.png" alt=""></p>
<p>很明显的看到,表头的内容有一部分没出来.</p>
<p>我们再来看一下正常的效果.</p>
<p><img src="https://s2.loli.net/2021/12/23/YhSWJGfpsj4CavI.png" alt=""></p>
<p>我们表格的效果是固定左侧一列，然后可以滚动表格(scroll),既然在vivo手机上没出来,那我们只好在电脑上调试一下,看是哪个样式出了问题.</p>
<h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>​    本次调试环境基于安卓和win</p>
<p> <strong>怎么做</strong></p>
<ul>
<li>安卓机+数据线+chrome</li>
<li>使用数据线连接手机和电脑</li>
<li>打开手机开发者模式:设置=&gt;关于手机=&gt;版本号=&gt;连续点击</li>
<li>找到手机的开发者选项=&gt;打开USB调试</li>
<li>将手机内app里的H5打开</li>
<li>在电脑上的chrome地址栏内输入  <code>chrome://inspect/#devices</code></li>
<li>等待几秒,正常情况下就会出来我们的h5链接</li>
<li>如果按照上述步骤出不来,检查一下数据线是否可用,一般情况都是数据线的问题.</li>
</ul>
<p>上面的工作做完,我们就成功的在电脑上看到了如下页面:</p>
<p><img src="https://s2.loli.net/2021/12/23/bdO9SzTxQonk2LV.png" alt=""></p>
<p>这样我们就可以愉快的调试了.</p>
<h2 id="分析解决"><a href="#分析解决" class="headerlink" title="分析解决"></a>分析解决</h2><p>起初,我去看表头的样式,发现了如下问题:</p>
<p><img src="https://s2.loli.net/2021/12/23/CvptQqSe2gsx57j.png" alt=""></p>
<p>colgroup是0px，但是修改col的样式也的确有响应.</p>
<p>我们来看一下正常情况下:</p>
<p><img src="https://s2.loli.net/2021/12/23/pkhGxRsCZH9L5ja.png" alt=""></p>
<p>​    然后,我就想是不是这个样式在这个vivo上不起效果,经过查阅了资料,和自己一番调试后发现没效果. 然后公司大佬一出手,瞬间定位了问题,是浮动的问题.</p>
<p>原本我们的overflow是这样的:</p>
<p><img src="https://s2.loli.net/2021/12/23/bszCvyqHl5dPkwY.png" alt=""></p>
<p>设置了overflow:hidden 正常情况下一切正常,拖动表格也可以正常显示,在我们的vivo手机上面还是上面的样子,不起效果.然后我们把vivo手机上的overflow属性删除之后,发现正常了,但是在其他手机和浏览器就不正常了.那我们就得从overflow的几个属性下手了.看一下overflow的几个属性:</p>
<table>
<thead>
<tr>
<th>visible</th>
<th>默认值。内容不会被修剪，会呈现在元素框之外。</th>
</tr>
</thead>
<tbody><tr>
<td>hidden</td>
<td>内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td>scroll</td>
<td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 (始终显示滚动条)</td>
</tr>
<tr>
<td>auto</td>
<td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。(必要时显示滚动条)</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody></table>
<p>​    因为我们的表格是一个可滚动的表格,表格下方是有一个滚动条的,所以我们可以考虑一下scroll,auto两个属性。经过测试发现,将overflow设置为overflow:auto scroll 后在各个机型样式都正常了。这样,我们的表头和表格内容都可以滚动,在我们滑动表格时就会一起滚动. overflow设置两个值的情况下,一个代表overflow-x的值,一个代表overflow-y的值. 我所理解的我们只需要设置overflow:auto,必要时显示滚动条是可以解决这个问题的,因为我们用不上基于y轴的情况。但是这样设置在这台vivo手机也是不行的,所以尝试写两个值的方式,我们给overflow设置两个值得情况下,在这个vivo手机上面也是不兼容的,会自动删除掉,从而达到了我们的目的.</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型和原型链</title>
    <url>/2022/04/14/JavaScript%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h1 id="JavaScript原型和原型链"><a href="#JavaScript原型和原型链" class="headerlink" title="JavaScript原型和原型链"></a>JavaScript原型和原型链</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p><code>JavaScript</code> 常被描述为一种基于原型的语言——每个对象拥有一个原型对象</p>
<p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</p>
<p>准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的<code>prototype</code>属性上，而非实例对象本身</p>
<a id="more"></a>

<p>下面举个例子：</p>
<p>函数可以有属性。 每个函数都有一个特殊的属性叫作原型<code>prototype</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log( doSomething.prototype );</span><br></pre></td></tr></table></figure>

<p>控制台输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">constructor</span>: ƒ doSomething(),</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: ƒ Object(),</span><br><span class="line">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class="line">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class="line">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class="line">        toLocaleString: ƒ toLocaleString(),</span><br><span class="line">        toString: ƒ toString(),</span><br><span class="line">        valueOf: ƒ valueOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个对象，就是大家常说的原型对象</p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法</p>
<p>在对象实例和它的构造器之间建立一个链接（它是<code>__proto__</code>属性，是从构造函数的<code>prototype</code>属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二步 创建实例</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'person'</span>)</span><br></pre></td></tr></table></figure>

<p>根据代码，我们可以得到下图</p>
<p><img src="https://static.vue-js.com/60825aa0-725e-11eb-85f6-6fac77c0c9b3.png" alt=""></p>
<p>下面分析一下：</p>
<ul>
<li>构造函数<code>Person</code>存在原型对象<code>Person.prototype</code></li>
<li>构造函数生成实例对象<code>person</code>，<code>person</code>的<code>__proto__</code>指向构造函数<code>Person</code>原型对象</li>
<li><code>Person.prototype.__proto__</code> 指向内置对象，因为 <code>Person.prototype</code> 是个对象，默认是由 <code>Object</code>函数作为类创建的，而 <code>Object.prototype</code> 为内置对象</li>
<li><code>Person.__proto__</code> 指向内置匿名函数 <code>anonymous</code>，因为 Person 是个函数对象，默认由 Function 作为类创建</li>
<li><code>Function.prototype</code> 和 <code>Function.__proto__</code>同时指向内置匿名函数 <code>anonymous</code>，这样原型链的终点就是 <code>null</code></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面首先要看几个概念：</p>
<p><code>__proto__</code>作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的</p>
<p><img src="https://static.vue-js.com/6a742160-725e-11eb-ab90-d9ae814b240d.png" alt=""></p>
<p>每个对象的<code>__proto__</code>都是指向它的构造函数的原型对象<code>prototype</code>的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person1.__proto__ === Person.prototype</span><br></pre></td></tr></table></figure>

<p>构造函数是一个函数对象，是通过 <code>Function</code>构造器产生的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.__proto__ === <span class="built_in">Function</span>.prototype</span><br></pre></td></tr></table></figure>

<p>原型对象本身是一个普通对象，而普通对象的构造函数都是<code>Object</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure>

<p>刚刚上面说了，所有的构造器都是函数对象，函数对象都是 <code>Function</code>构造产生的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</span><br></pre></td></tr></table></figure>

<p><code>Object</code>的原型对象也有<code>__proto__</code>属性指向<code>null</code>，<code>null</code>是原型链的顶端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>下面作出总结：</p>
<ul>
<li>一切对象都是继承自<code>Object</code>对象，<code>Object</code> 对象直接继承根源对象<code>null</code></li>
<li>一切的函数对象（包括 <code>Object</code> 对象），都是继承自 <code>Function</code> 对象</li>
<li><code>Object</code> 对象直接继承自 <code>Function</code> 对象</li>
<li><code>Function</code>对象的<code>__proto__</code>会指向自己的原型对象，最终还是继承自<code>Object</code>对象</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
